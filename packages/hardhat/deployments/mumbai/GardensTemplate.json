{
  "address": "0x5c2037174D842D59cAf31db13A7CD57c837423E1",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "AGREEMENT_APP_ID",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "UPDATE_PERCENT_REWARD",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MIN_XDAI_IN_HNY_REQUIRED_FOR_NEW_GARDEN",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_erc721Adapter",
          "type": "address"
        },
        {
          "name": "_convictionSettings",
          "type": "uint64[4]"
        },
        {
          "name": "_convictionVotingRequestToken",
          "type": "address"
        }
      ],
      "name": "createGardenTxTwo",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CONVICTION_VOTING_APP_ID",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "stakingFactory",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "AGGREGATE_TOKEN_PREPEND_SYMBOL",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "honeyPriceOracle",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DISPUTABLE_VOTING_APP_ID",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_daoId",
          "type": "string"
        },
        {
          "name": "_agreementTitle",
          "type": "string"
        },
        {
          "name": "_agreementContent",
          "type": "bytes"
        },
        {
          "name": "_challengeDuration",
          "type": "uint64"
        },
        {
          "name": "_initialFees",
          "type": "uint256[2]"
        },
        {
          "name": "_actionAmountsStable",
          "type": "uint256[]"
        },
        {
          "name": "_challengeAmountsStable",
          "type": "uint256[]"
        }
      ],
      "name": "createGardenTxThree",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "collateralRequirementUpdaterFactory",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "arbitrator",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "VOTING_AGGREGATOR_APP_ID",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "uniswapFactory",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_addresses",
          "type": "address[2]"
        },
        {
          "name": "_gardenTokenName",
          "type": "string"
        },
        {
          "name": "_gardenTokenSymbol",
          "type": "string"
        },
        {
          "name": "_disputableVotingSettings",
          "type": "uint64[7]"
        }
      ],
      "name": "createGardenTxOne",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DYNAMIC_ISSUANCE_APP_ID",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_holders",
          "type": "address[]"
        },
        {
          "name": "_stakes",
          "type": "uint256[]"
        }
      ],
      "name": "createTokenHolders",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "miniMeWithPermitFactory",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "stableToken",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "AGGREGATE_TOKEN_PREPEND_NAME",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "AVERAGE_PRICE_PERIOD",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "UPDATE_FREQUENCY",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "incentivisedPriceOracleFactory",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "HOOKED_TOKEN_MANAGER_APP_ID",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "GARDEN_TOKEN_AGGREGATOR_WEIGHT",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "erc721AdapterFactory",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_daoFactory",
          "type": "address"
        },
        {
          "name": "_ens",
          "type": "address"
        },
        {
          "name": "_miniMeWithPermitFactory",
          "type": "address"
        },
        {
          "name": "_aragonID",
          "type": "address"
        },
        {
          "name": "_stableToken",
          "type": "address"
        },
        {
          "name": "_incentivisedPriceOracleFactory",
          "type": "address"
        },
        {
          "name": "_collateralRequirementUpdaterFactory",
          "type": "address"
        },
        {
          "name": "_uniswapFactory",
          "type": "address"
        },
        {
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "name": "_stakingFactory",
          "type": "address"
        },
        {
          "name": "_erc721AdapterFactory",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "fundsManager",
          "type": "address"
        }
      ],
      "name": "GardenTransactionOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "dao",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "incentivisedPriceOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "convictionVoting",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "erc721Adapter",
          "type": "address"
        }
      ],
      "name": "GardenTransactionTwo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "gardenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "collateralRequirementUpdater",
          "type": "address"
        }
      ],
      "name": "GardenDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "dao",
          "type": "address"
        }
      ],
      "name": "DeployDao",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "dao",
          "type": "address"
        }
      ],
      "name": "SetupDao",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "token",
          "type": "address"
        }
      ],
      "name": "DeployToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "appProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "appId",
          "type": "bytes32"
        }
      ],
      "name": "InstalledApp",
      "type": "event"
    }
  ],
  "transactionHash": "0x65d548dba3ad65e2695e8e49b4d67d3c16c1111f3ab8539449c75c8c0c826f09",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xdf456B614fE9FF1C7c0B380330Da29C96d40FB02",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "4771031",
    "logsBloom": "0x
    "blockHash": "0x57f46e3b6f51569a85cb4d8f2710910e80f4d6d1cd0c43a1da415741fef9981a",
    "transactionHash": "0x65d548dba3ad65e2695e8e49b4d67d3c16c1111f3ab8539449c75c8c0c826f09",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 20668018,
        "transactionHash": "0x65d548dba3ad65e2695e8e49b4d67d3c16c1111f3ab8539449c75c8c0c826f09",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000df456b614fe9ff1c7c0b380330da29c96d40fb02",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000010f33a37f7a6000000000000000000000000000000000000000000000000001cc52b4cfc2d63000000000000000000000000000000000000000000000001ba7d84182d485ddc180000000000000000000000000000000000000000000000001cb43812c435bd000000000000000000000000000000000000000000000001ba7d950b6780558218",
        "logIndex": 8,
        "blockHash": "0x57f46e3b6f51569a85cb4d8f2710910e80f4d6d1cd0c43a1da415741fef9981a"
      }
    ],
    "blockNumber": 20668018,
    "cumulativeGasUsed": "5339716",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE97999F411333E3B712104aa04fc06b149BD12eA",
    "0xB1576a9bE5EC445368740161174f3Dd1034fF8be",
    "0x14E1326445077E2E170eb48785a849e30D502994",
    "0xb7E098cB86b120363A935730970A3758861ba458",
    "0xF9c0EBA79d452d3F426F12117DE5a10676a812d3",
    "0x992AA39502D76E594B80B4102F5FeA692fE0d537",
    "0xd1a3dD30bc63dC90bE2fC0c3Ec7Fe188E48FF402",
    "0xc35DADB65012eC5796536bD9864eD8773aBc74C4",
    "0x68E18891159475c21E9f98bbb8b33234769328b1",
    "0x2C3ac82981979af1611F6Efb17a4a3a04d1F9245",
    "0x9e69734865441b6B29C1ed423dBe80ecfa24Fe03"
  ],
  "solcInputHash": "6fa55504b0732d166e2fe38373c58560",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"AGREEMENT_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UPDATE_PERCENT_REWARD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_XDAI_IN_HNY_REQUIRED_FOR_NEW_GARDEN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_erc721Adapter\",\"type\":\"address\"},{\"name\":\"_convictionSettings\",\"type\":\"uint64[4]\"},{\"name\":\"_convictionVotingRequestToken\",\"type\":\"address\"}],\"name\":\"createGardenTxTwo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONVICTION_VOTING_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AGGREGATE_TOKEN_PREPEND_SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"honeyPriceOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DISPUTABLE_VOTING_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_daoId\",\"type\":\"string\"},{\"name\":\"_agreementTitle\",\"type\":\"string\"},{\"name\":\"_agreementContent\",\"type\":\"bytes\"},{\"name\":\"_challengeDuration\",\"type\":\"uint64\"},{\"name\":\"_initialFees\",\"type\":\"uint256[2]\"},{\"name\":\"_actionAmountsStable\",\"type\":\"uint256[]\"},{\"name\":\"_challengeAmountsStable\",\"type\":\"uint256[]\"}],\"name\":\"createGardenTxThree\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collateralRequirementUpdaterFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VOTING_AGGREGATOR_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[2]\"},{\"name\":\"_gardenTokenName\",\"type\":\"string\"},{\"name\":\"_gardenTokenSymbol\",\"type\":\"string\"},{\"name\":\"_disputableVotingSettings\",\"type\":\"uint64[7]\"}],\"name\":\"createGardenTxOne\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DYNAMIC_ISSUANCE_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holders\",\"type\":\"address[]\"},{\"name\":\"_stakes\",\"type\":\"uint256[]\"}],\"name\":\"createTokenHolders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miniMeWithPermitFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stableToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AGGREGATE_TOKEN_PREPEND_NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVERAGE_PRICE_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UPDATE_FREQUENCY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incentivisedPriceOracleFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOOKED_TOKEN_MANAGER_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GARDEN_TOKEN_AGGREGATOR_WEIGHT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc721AdapterFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_daoFactory\",\"type\":\"address\"},{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_miniMeWithPermitFactory\",\"type\":\"address\"},{\"name\":\"_aragonID\",\"type\":\"address\"},{\"name\":\"_stableToken\",\"type\":\"address\"},{\"name\":\"_incentivisedPriceOracleFactory\",\"type\":\"address\"},{\"name\":\"_collateralRequirementUpdaterFactory\",\"type\":\"address\"},{\"name\":\"_uniswapFactory\",\"type\":\"address\"},{\"name\":\"_arbitrator\",\"type\":\"address\"},{\"name\":\"_stakingFactory\",\"type\":\"address\"},{\"name\":\"_erc721AdapterFactory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fundsManager\",\"type\":\"address\"}],\"name\":\"GardenTransactionOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incentivisedPriceOracle\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"convictionVoting\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"erc721Adapter\",\"type\":\"address\"}],\"name\":\"GardenTransactionTwo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gardenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"collateralRequirementUpdater\",\"type\":\"address\"}],\"name\":\"GardenDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dao\",\"type\":\"address\"}],\"name\":\"DeployDao\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dao\",\"type\":\"address\"}],\"name\":\"SetupDao\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DeployToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"appProxy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"appId\",\"type\":\"bytes32\"}],\"name\":\"InstalledApp\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"createGardenTxOne(address[2],string,string,uint64[7])\":{\"details\":\"Create the DAO and initialise the basic apps necessary for gardens\",\"params\":{\"_addresses\":\"Array of [existingToken, gnosisSafe]     existingToken An existing token used for the common pool token. Set to address(0) to create a new token.     gnosisSafe Gnosis Safe used to hold common pools funds. Set to address(0) to use an Aragon Agent instead.\",\"_disputableVotingSettings\":\"Array of [voteDuration, voteSupportRequired, voteMinAcceptanceQuorum, voteDelegatedVotingPeriod,   voteQuietEndingPeriod, voteQuietEndingExtension, voteExecutionDelay] to set up the voting app of the organization\",\"_gardenTokenName\":\"DAO governance new token name\",\"_gardenTokenSymbol\":\"DAO governance new token symbol\"}},\"createGardenTxThree(string,string,bytes,uint64,uint256[2],uint256[],uint256[])\":{\"details\":\"Add, initialise and activate the agreement\",\"params\":{\"_actionAmountsStable\":\"The action amount specified as a stable value (eg in xdai)\",\"_agreementContent\":\"Link to a human-readable text that describes the initial rules for the Agreement\",\"_agreementTitle\":\"String indicating a short description\",\"_challengeAmountsStable\":\"The challenge amount specified as a stable value (eg in xdai)\",\"_challengeDuration\":\"Challenge duration, during which the submitter can raise a dispute\",\"_daoId\":\"The ENS ID assigned to this DAO\",\"_initialFees\":\"Array of fees settings: [actionFee, challangeFee]\"}},\"createGardenTxTwo(address,uint64[4],address)\":{\"details\":\"Add and initialise issuance and conviction voting\",\"params\":{\"_convictionSettings\":\"Array of conviction settings: [decay, max_ratio, weight, min_threshold_stake_percentage]\",\"_convictionVotingRequestToken\":\"The Garden's common pool token, requested using conviction voting. If set to       address(0) the Garden will use it's main token.\",\"_erc721Adapter\":\"The Conviction Voting stake token. Set to address(0) to create a new one.\"}},\"createTokenHolders(address[],uint256[])\":{\"details\":\"Add tokenholders, only accessible between the first and second createDao transactions and if no existing     token was specified. Note will fail if called incorrectly due to missing mint permission.\",\"params\":{\"_holders\":\"List of initial tokenholder addresses\",\"_stakes\":\"List of intial tokenholder amounts\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/GardensTemplate.sol\":\"GardensTemplate\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@1hive/funds-manager/contracts/AragonVaultFundsManager.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./FundsManager.sol\\\";\\nimport \\\"@aragon/apps-vault/contracts/Vault.sol\\\";\\n\\n// This contract must be granted the permission to transfer funds on the Aragon Vault it accepts\\ncontract AragonVaultFundsManager is FundsManager {\\n\\n    Vault public aragonVault;\\n\\n    constructor(Vault _aragonVault) FundsManager(msg.sender) public {\\n        aragonVault = _aragonVault;\\n    }\\n\\n    function fundsOwner() public view returns (address) {\\n        return address(aragonVault);\\n    }\\n\\n    function balance(address _token) public view returns (uint256) {\\n        return aragonVault.balance(_token);\\n    }\\n\\n    function transfer(address _token, address _beneficiary, uint256 _amount) public onlyFundsUser {\\n        aragonVault.transfer(_token, _beneficiary, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x392e048e68fabf8927068c97e766abf4f936793a3b5453e4000dac6848739cda\"},\"@1hive/funds-manager/contracts/FundsManager.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\ncontract FundsManager {\\n\\n    address public owner;\\n    mapping(address => bool) public fundsUsers;\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"ERR:NOT_OWNER\\\");\\n        _;\\n    }\\n\\n    modifier onlyFundsUser {\\n        require(fundsUsers[msg.sender] == true, \\\"ERR:NOT_FUNDS_USER\\\");\\n        _;\\n    }\\n\\n    constructor (address _owner) public {\\n        owner = _owner;\\n    }\\n\\n    function setOwner(address _owner) public onlyOwner {\\n        owner = _owner;\\n    }\\n\\n    function addFundsUser(address _fundsUser) public onlyOwner {\\n        fundsUsers[_fundsUser] = true;\\n    }\\n\\n    function revokeFundsUser(address _fundsUser) public onlyOwner {\\n        require(fundsUsers[_fundsUser] == true, \\\"ERR:SHOULD_BE_FUNDS_USER\\\");\\n        fundsUsers[_fundsUser] = false;\\n    }\\n\\n    function fundsOwner() public view returns (address);\\n\\n    function balance(address _token) public view returns (uint256);\\n\\n    // This must revert if the transfer fails or returns false\\n    function transfer(address _token, address _beneficiary, uint256 _amount) public;\\n}\\n\",\"keccak256\":\"0x683f7a640c3acebe05b748d06f5022fc7133d4ca9fff36ea8a8c27c80f8d4252\"},\"@1hive/funds-manager/contracts/GnosisSafe.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\ncontract GnosisSafe {\\n\\n    enum Operation {Call, DelegateCall}\\n\\n    function execTransactionFromModuleReturnData(address to, uint256 value, bytes memory data, Operation operation)\\n        public returns (bool success, bytes memory returnData);\\n\\n}\\n\",\"keccak256\":\"0xc01a7e1a4458dfa3913dc123373ae9dca48b159fcf3fd95f13914926e15e5958\"},\"@1hive/funds-manager/contracts/GnosisSafeFundsManager.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./FundsManager.sol\\\";\\nimport \\\"./GnosisSafe.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/token/ERC20.sol\\\";\\n\\n// This contract must be granted the permission to transfer funds on the Gnosis Safe it accepts\\ncontract GnosisSafeFundsManager is FundsManager {\\n\\n    bytes4 public constant TRANSFER_SELECTOR = 0xa9059cbb; // Equivalent of bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n    address public constant ETH = address(0);\\n\\n    GnosisSafe public gnosisSafe;\\n\\n    constructor(GnosisSafe _gnosisSafe) FundsManager(msg.sender) public {\\n        gnosisSafe = _gnosisSafe;\\n    }\\n\\n    function fundsOwner() public view returns (address) {\\n        return address(gnosisSafe);\\n    }\\n\\n    function balance(address _token) public view returns (uint256) {\\n        if (_token == ETH) {\\n            return address(gnosisSafe).balance;\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            return token.balanceOf(address(gnosisSafe));\\n        }\\n    }\\n\\n    function transfer(address _token, address _beneficiary, uint256 _amount) public onlyFundsUser {\\n        bool success;\\n        bytes memory returnData;\\n\\n        if (_token == ETH) {\\n            (success, returnData) = gnosisSafe.execTransactionFromModuleReturnData(_beneficiary, _amount, new bytes(0), GnosisSafe.Operation.Call);\\n        } else {\\n            bytes memory transferBytes = abi.encodeWithSelector(TRANSFER_SELECTOR, _beneficiary, _amount);\\n            (success, returnData) = gnosisSafe.execTransactionFromModuleReturnData(_token, 0, transferBytes, GnosisSafe.Operation.Call);\\n        }\\n\\n        bool returnBool = false;\\n        assembly {\\n            // Load the data after 32 bytes length slot, eg add 0x20\\n            returnBool := mload(add(returnData, 0x20))\\n        }\\n\\n        require(success, \\\"ERR:TRANSFER_REVERTED\\\");\\n        if (_token != ETH) { require(returnBool, \\\"ERR:TRANSFER_NOT_RETURN_TRUE\\\"); }\\n    }\\n}\\n\",\"keccak256\":\"0xe2fef200e6836d5ffa0a0bf3f6f25c7f79f16ab34a9c066546bdf80f0c40f35c\"},\"@aragon/apps-agent/contracts/Agent.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    GPL-3.0-or-later\\n */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"./SignatureValidator.sol\\\";\\nimport \\\"./standards/IERC165.sol\\\";\\nimport \\\"./standards/ERC1271.sol\\\";\\nimport \\\"./standards/IERC721Receiver.sol\\\";\\n\\nimport \\\"@aragon/apps-vault/contracts/Vault.sol\\\";\\n\\nimport \\\"@aragon/os/contracts/common/IForwarder.sol\\\";\\n\\n\\ncontract Agent is IERC165, IERC721Receiver, ERC1271Bytes, IForwarder, IsContract, Vault {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant EXECUTE_ROLE = keccak256(\\\"EXECUTE_ROLE\\\");\\n    bytes32 public constant SAFE_EXECUTE_ROLE = keccak256(\\\"SAFE_EXECUTE_ROLE\\\");\\n    bytes32 public constant ADD_PROTECTED_TOKEN_ROLE = keccak256(\\\"ADD_PROTECTED_TOKEN_ROLE\\\");\\n    bytes32 public constant REMOVE_PROTECTED_TOKEN_ROLE = keccak256(\\\"REMOVE_PROTECTED_TOKEN_ROLE\\\");\\n    bytes32 public constant ADD_PRESIGNED_HASH_ROLE = keccak256(\\\"ADD_PRESIGNED_HASH_ROLE\\\");\\n    bytes32 public constant DESIGNATE_SIGNER_ROLE = keccak256(\\\"DESIGNATE_SIGNER_ROLE\\\");\\n    bytes32 public constant RUN_SCRIPT_ROLE = keccak256(\\\"RUN_SCRIPT_ROLE\\\");\\n    */\\n\\n    bytes32 public constant EXECUTE_ROLE = 0xcebf517aa4440d1d125e0355aae64401211d0848a23c02cc5d29a14822580ba4;\\n    bytes32 public constant SAFE_EXECUTE_ROLE = 0x0a1ad7b87f5846153c6d5a1f761d71c7d0cfd122384f56066cd33239b7933694;\\n    bytes32 public constant ADD_PROTECTED_TOKEN_ROLE = 0x6eb2a499556bfa2872f5aa15812b956cc4a71b4d64eb3553f7073c7e41415aaa;\\n    bytes32 public constant REMOVE_PROTECTED_TOKEN_ROLE = 0x71eee93d500f6f065e38b27d242a756466a00a52a1dbcd6b4260f01a8640402a;\\n    bytes32 public constant ADD_PRESIGNED_HASH_ROLE = 0x0b29780bb523a130b3b01f231ef49ed2fa2781645591a0b0a44ca98f15a5994c;\\n    bytes32 public constant DESIGNATE_SIGNER_ROLE = 0x23ce341656c3f14df6692eebd4757791e33662b7dcf9970c8308303da5472b7c;\\n    bytes32 public constant RUN_SCRIPT_ROLE = 0xb421f7ad7646747f3051c50c0b8e2377839296cd4973e27f63821d73e390338f;\\n\\n    uint256 public constant PROTECTED_TOKENS_CAP = 10;\\n\\n    bytes4 private constant ERC165_INTERFACE_ID = 0x01ffc9a7;\\n    bytes4 private constant ERC721_RECEIVED_INTERFACE_ID = 0x150b7a02; // bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))\\n\\n    string private constant ERROR_TARGET_PROTECTED = \\\"AGENT_TARGET_PROTECTED\\\";\\n    string private constant ERROR_PROTECTED_TOKENS_MODIFIED = \\\"AGENT_PROTECTED_TOKENS_MODIFIED\\\";\\n    string private constant ERROR_PROTECTED_BALANCE_LOWERED = \\\"AGENT_PROTECTED_BALANCE_LOWERED\\\";\\n    string private constant ERROR_TOKENS_CAP_REACHED = \\\"AGENT_TOKENS_CAP_REACHED\\\";\\n    string private constant ERROR_TOKEN_NOT_ERC20 = \\\"AGENT_TOKEN_NOT_ERC20\\\";\\n    string private constant ERROR_TOKEN_ALREADY_PROTECTED = \\\"AGENT_TOKEN_ALREADY_PROTECTED\\\";\\n    string private constant ERROR_TOKEN_NOT_PROTECTED = \\\"AGENT_TOKEN_NOT_PROTECTED\\\";\\n    string private constant ERROR_DESIGNATED_TO_SELF = \\\"AGENT_DESIGNATED_TO_SELF\\\";\\n    string private constant ERROR_CAN_NOT_FORWARD = \\\"AGENT_CAN_NOT_FORWARD\\\";\\n\\n    mapping (bytes32 => bool) public isPresigned;\\n    address public designatedSigner;\\n    address[] public protectedTokens;\\n\\n    event SafeExecute(address indexed sender, address indexed target, bytes data);\\n    event Execute(address indexed sender, address indexed target, uint256 ethValue, bytes data);\\n    event AddProtectedToken(address indexed token);\\n    event RemoveProtectedToken(address indexed token);\\n    event PresignHash(address indexed sender, bytes32 indexed hash);\\n    event SetDesignatedSigner(address indexed sender, address indexed oldSigner, address indexed newSigner);\\n    event ReceiveERC721(address indexed token, address indexed operator, address indexed from, uint256 tokenId, bytes data);\\n\\n    /**\\n    * @notice Execute '`@radspec(_target, _data)`' on `_target``_ethValue == 0 ? '' : ' (Sending ' + @tokenAmount(0x0000000000000000000000000000000000000000, _ethValue) + ')'`\\n    * @param _target Address where the action is being executed\\n    * @param _ethValue Amount of ETH from the contract that is sent with the action\\n    * @param _data Calldata for the action\\n    * @return Exits call frame forwarding the return data of the executed call (either error or success data)\\n    */\\n    function execute(address _target, uint256 _ethValue, bytes _data)\\n        external // This function MUST always be external as the function performs a low level return, exiting the Agent app execution context\\n        authP(EXECUTE_ROLE, arr(_target, _ethValue, uint256(_getSig(_data)))) // bytes4 casted as uint256 sets the bytes as the LSBs\\n    {\\n        bool result = _target.call.value(_ethValue)(_data);\\n\\n        if (result) {\\n            emit Execute(msg.sender, _target, _ethValue, _data);\\n        }\\n\\n        assembly {\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize)\\n\\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\\n            // if the call returned error data, forward it\\n            switch result case 0 { revert(ptr, returndatasize) }\\n            default { return(ptr, returndatasize) }\\n        }\\n    }\\n\\n    /**\\n    * @notice Execute '`@radspec(_target, _data)`' on `_target`, ensuring that protected tokens can't be spent\\n    * @param _target Address where the action is being executed\\n    * @param _data Calldata for the action\\n    * @return Exits call frame forwarding the return data of the executed call (either error or success data)\\n    */\\n    function safeExecute(address _target, bytes _data)\\n        external // This function MUST always be external as the function performs a low level return, exiting the Agent app execution context\\n        authP(SAFE_EXECUTE_ROLE, arr(_target, uint256(_getSig(_data)))) // bytes4 casted as uint256 sets the bytes as the LSBs\\n    {\\n        uint256 protectedTokensLength = protectedTokens.length;\\n        address[] memory protectedTokens_ = new address[](protectedTokensLength);\\n        uint256[] memory balances = new uint256[](protectedTokensLength);\\n\\n        for (uint256 i = 0; i < protectedTokensLength; i++) {\\n            address token = protectedTokens[i];\\n            require(_target != token, ERROR_TARGET_PROTECTED);\\n            // we copy the protected tokens array to check whether the storage array has been modified during the underlying call\\n            protectedTokens_[i] = token;\\n            // we copy the balances to check whether they have been modified during the underlying call\\n            balances[i] = balance(token);\\n        }\\n\\n        bool result = _target.call(_data);\\n\\n        bytes32 ptr;\\n        uint256 size;\\n        assembly {\\n            size := returndatasize\\n            ptr := mload(0x40)\\n            mstore(0x40, add(ptr, returndatasize))\\n            returndatacopy(ptr, 0, returndatasize)\\n        }\\n\\n        if (result) {\\n            // if the underlying call has succeeded, we check that the protected tokens\\n            // and their balances have not been modified and return the call's return data\\n            require(protectedTokens.length == protectedTokensLength, ERROR_PROTECTED_TOKENS_MODIFIED);\\n            for (uint256 j = 0; j < protectedTokensLength; j++) {\\n                require(protectedTokens[j] == protectedTokens_[j], ERROR_PROTECTED_TOKENS_MODIFIED);\\n                require(balance(protectedTokens[j]) >= balances[j], ERROR_PROTECTED_BALANCE_LOWERED);\\n            }\\n\\n            emit SafeExecute(msg.sender, _target, _data);\\n\\n            assembly {\\n                return(ptr, size)\\n            }\\n        } else {\\n            // if the underlying call has failed, we revert and forward returned error data\\n            assembly {\\n                revert(ptr, size)\\n            }\\n        }\\n    }\\n\\n    /**\\n    * @notice Add `_token.symbol(): string` to the list of protected tokens\\n    * @param _token Address of the token to be protected\\n    */\\n    function addProtectedToken(address _token) external authP(ADD_PROTECTED_TOKEN_ROLE, arr(_token)) {\\n        require(protectedTokens.length < PROTECTED_TOKENS_CAP, ERROR_TOKENS_CAP_REACHED);\\n        require(_isERC20(_token), ERROR_TOKEN_NOT_ERC20);\\n        require(!_tokenIsProtected(_token), ERROR_TOKEN_ALREADY_PROTECTED);\\n\\n        _addProtectedToken(_token);\\n    }\\n\\n    /**\\n    * @notice Remove `_token.symbol(): string` from the list of protected tokens\\n    * @param _token Address of the token to be unprotected\\n    */\\n    function removeProtectedToken(address _token) external authP(REMOVE_PROTECTED_TOKEN_ROLE, arr(_token)) {\\n        require(_tokenIsProtected(_token), ERROR_TOKEN_NOT_PROTECTED);\\n\\n        _removeProtectedToken(_token);\\n    }\\n\\n    /**\\n    * @notice Pre-sign hash `_hash`\\n    * @param _hash Hash that will be considered signed regardless of the signature checked with 'isValidSignature()'\\n    */\\n    function presignHash(bytes32 _hash)\\n        external\\n        authP(ADD_PRESIGNED_HASH_ROLE, arr(_hash))\\n    {\\n        isPresigned[_hash] = true;\\n\\n        emit PresignHash(msg.sender, _hash);\\n    }\\n\\n    /**\\n    * @notice Set `_designatedSigner` as the designated signer of the app, which will be able to sign messages on behalf of the app\\n    * @param _designatedSigner Address that will be able to sign messages on behalf of the app\\n    */\\n    function setDesignatedSigner(address _designatedSigner)\\n        external\\n        authP(DESIGNATE_SIGNER_ROLE, arr(_designatedSigner))\\n    {\\n        // Prevent an infinite loop by setting the app itself as its designated signer.\\n        // An undetectable loop can be created by setting a different contract as the\\n        // designated signer which calls back into `isValidSignature`.\\n        // Given that `isValidSignature` is always called with just 50k gas, the max\\n        // damage of the loop is wasting 50k gas.\\n        require(_designatedSigner != address(this), ERROR_DESIGNATED_TO_SELF);\\n\\n        address oldDesignatedSigner = designatedSigner;\\n        designatedSigner = _designatedSigner;\\n\\n        emit SetDesignatedSigner(msg.sender, oldDesignatedSigner, _designatedSigner);\\n    }\\n\\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns (bytes4) {\\n        emit ReceiveERC721(msg.sender, _operator, _from, _tokenId, _data);\\n\\n        return ERC721_RECEIVED_INTERFACE_ID;\\n    }\\n\\n    // Forwarding fns\\n\\n    /**\\n    * @notice Tells whether the Agent app is a forwarder or not\\n    * @dev IForwarder interface conformance\\n    * @return Always true\\n    */\\n    function isForwarder() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Tells whether this contract supports a given ERC-165 interface\\n     * @dev Implements conformance to ERC-165\\n     * @param _interfaceId Interface bytes to check\\n     * @return True if this contract supports the interface\\n     */\\n    function supportsInterface(bytes4 _interfaceId) external pure returns (bool) {\\n        return\\n            _interfaceId == ERC1271_INTERFACE_ID ||\\n            _interfaceId == ERC721_RECEIVED_INTERFACE_ID ||\\n            _interfaceId == ERC165_INTERFACE_ID;\\n    }\\n\\n    /**\\n    * @notice Execute the script as the Agent app\\n    * @dev IForwarder interface conformance. Forwards any token holder action.\\n    * @param _evmScript Script being executed\\n    */\\n    function forward(bytes _evmScript) public {\\n        require(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);\\n\\n        bytes memory input = \\\"\\\"; // no input\\n        address[] memory blacklist = new address[](0); // no addr blacklist, can interact with anything\\n        runScript(_evmScript, input, blacklist);\\n        // We don't need to emit an event here as EVMScriptRunner will emit ScriptResult if successful\\n    }\\n\\n    /**\\n    * @notice Tells whether `_sender` can forward actions or not\\n    * @dev IForwarder interface conformance\\n    * @param _sender Address of the account intending to forward an action\\n    * @return True if the given address can run scripts, false otherwise\\n    */\\n    function canForward(address _sender, bytes _evmScript) public view returns (bool) {\\n        // Note that `canPerform()` implicitly does an initialization check itself\\n        return canPerform(_sender, RUN_SCRIPT_ROLE, arr(_getScriptACLParam(_evmScript)));\\n    }\\n\\n    // ERC-1271 conformance\\n\\n    /**\\n     * @notice Tells whether a signature is seen as valid by this contract through ERC-1271\\n     * @param _hash Arbitrary length data signed on the behalf of address (this)\\n     * @param _signature Signature byte array associated with _data\\n     * @return The ERC-1271 magic value if the signature is valid\\n     */\\n    function isValidSignature(bytes32 _hash, bytes _signature) public view returns (bytes4) {\\n        // Short-circuit in case the hash was presigned. Optimization as performing calls\\n        // and ecrecover is more expensive than an SLOAD.\\n        if (isPresigned[_hash]) {\\n            return returnIsValidSignatureMagicNumber(true);\\n        }\\n\\n        bool isValid;\\n        if (designatedSigner == address(0)) {\\n            isValid = false;\\n        } else {\\n            isValid = SignatureValidator.isValidSignature(_hash, designatedSigner, _signature);\\n        }\\n\\n        return returnIsValidSignatureMagicNumber(isValid);\\n    }\\n\\n    // Getters\\n\\n    function getProtectedTokensLength() public view isInitialized returns (uint256) {\\n        return protectedTokens.length;\\n    }\\n\\n    // Internal fns\\n\\n    function _addProtectedToken(address _token) internal {\\n        protectedTokens.push(_token);\\n\\n        emit AddProtectedToken(_token);\\n    }\\n\\n    function _removeProtectedToken(address _token) internal {\\n        protectedTokens[_protectedTokenIndex(_token)] = protectedTokens[protectedTokens.length - 1];\\n        protectedTokens.length--;\\n\\n        emit RemoveProtectedToken(_token);\\n    }\\n\\n    function _isERC20(address _token) internal view returns (bool) {\\n        if (!isContract(_token)) {\\n            return false;\\n        }\\n\\n        // Throwaway sanity check to make sure the token's `balanceOf()` does not error (for now)\\n        balance(_token);\\n\\n        return true;\\n    }\\n\\n    function _protectedTokenIndex(address _token) internal view returns (uint256) {\\n        for (uint i = 0; i < protectedTokens.length; i++) {\\n            if (protectedTokens[i] == _token) {\\n              return i;\\n            }\\n        }\\n\\n        revert(ERROR_TOKEN_NOT_PROTECTED);\\n    }\\n\\n    function _tokenIsProtected(address _token) internal view returns (bool) {\\n        for (uint256 i = 0; i < protectedTokens.length; i++) {\\n            if (protectedTokens[i] == _token) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function _getScriptACLParam(bytes _evmScript) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(_evmScript)));\\n    }\\n\\n    function _getSig(bytes _data) internal pure returns (bytes4 sig) {\\n        if (_data.length < 4) {\\n            return;\\n        }\\n\\n        assembly { sig := mload(add(_data, 0x20)) }\\n    }\\n}\\n\",\"keccak256\":\"0xd90f3ec7479a49011f6e35a1c1b85322e6d634f41f0d4bcb89023102abbd3203\"},\"@aragon/apps-agent/contracts/SignatureValidator.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n// Inspired by https://github.com/horizon-games/multi-token-standard/blob/319740cf2a78b8816269ae49a09c537b3fd7303b/contracts/utils/SignatureValidator.sol\\n// This should probably be moved into aOS: https://github.com/aragon/aragonOS/pull/442\\n\\nimport \\\"./standards/ERC1271.sol\\\";\\n\\n\\nlibrary SignatureValidator {\\n    enum SignatureMode {\\n        Invalid, // 0x00\\n        EIP712,  // 0x01\\n        EthSign, // 0x02\\n        ERC1271, // 0x03\\n        NMode    // 0x04, to check if mode is specified, leave at the end\\n    }\\n\\n    // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n    bytes4 public constant ERC1271_RETURN_VALID_SIGNATURE = 0x20c13b0b;\\n    uint256 internal constant ERC1271_ISVALIDSIG_MAX_GAS = 250000;\\n\\n    string private constant ERROR_INVALID_LENGTH_POP_BYTE = \\\"SIGVAL_INVALID_LENGTH_POP_BYTE\\\";\\n\\n    /// @dev Validates that a hash was signed by a specified signer.\\n    /// @param hash Hash which was signed.\\n    /// @param signer Address of the signer.\\n    /// @param signature ECDSA signature along with the mode (0 = Invalid, 1 = EIP712, 2 = EthSign, 3 = ERC1271) {mode}{r}{s}{v}.\\n    /// @return Returns whether signature is from a specified user.\\n    function isValidSignature(bytes32 hash, address signer, bytes signature) internal view returns (bool) {\\n        if (signature.length == 0) {\\n            return false;\\n        }\\n\\n        uint8 modeByte = uint8(signature[0]);\\n        if (modeByte >= uint8(SignatureMode.NMode)) {\\n            return false;\\n        }\\n        SignatureMode mode = SignatureMode(modeByte);\\n\\n        if (mode == SignatureMode.EIP712) {\\n            return ecVerify(hash, signer, signature);\\n        } else if (mode == SignatureMode.EthSign) {\\n            return ecVerify(\\n                keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)),\\n                signer,\\n                signature\\n            );\\n        } else if (mode == SignatureMode.ERC1271) {\\n            // Pop the mode byte before sending it down the validation chain\\n            return safeIsValidSignature(signer, hash, popFirstByte(signature));\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function ecVerify(bytes32 hash, address signer, bytes memory signature) private pure returns (bool) {\\n        (bool badSig, bytes32 r, bytes32 s, uint8 v) = unpackEcSig(signature);\\n\\n        if (badSig) {\\n            return false;\\n        }\\n\\n        return signer == ecrecover(hash, v, r, s);\\n    }\\n\\n    function unpackEcSig(bytes memory signature) private pure returns (bool badSig, bytes32 r, bytes32 s, uint8 v) {\\n        if (signature.length != 66) {\\n            badSig = true;\\n            return;\\n        }\\n\\n        v = uint8(signature[65]);\\n        assembly {\\n            r := mload(add(signature, 33))\\n            s := mload(add(signature, 65))\\n        }\\n\\n        // Allow signature version to be 0 or 1\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            badSig = true;\\n        }\\n    }\\n\\n    function popFirstByte(bytes memory input) private pure returns (bytes memory output) {\\n        uint256 inputLength = input.length;\\n        require(inputLength > 0, ERROR_INVALID_LENGTH_POP_BYTE);\\n\\n        output = new bytes(inputLength - 1);\\n\\n        if (output.length == 0) {\\n            return output;\\n        }\\n\\n        uint256 inputPointer;\\n        uint256 outputPointer;\\n        assembly {\\n            inputPointer := add(input, 0x21)\\n            outputPointer := add(output, 0x20)\\n        }\\n        memcpy(outputPointer, inputPointer, output.length);\\n    }\\n\\n    function safeIsValidSignature(address validator, bytes32 hash, bytes memory signature) private view returns (bool) {\\n        bytes memory data = abi.encodeWithSelector(ERC1271(validator).isValidSignature.selector, hash, signature);\\n        bytes4 erc1271Return = safeBytes4StaticCall(validator, data, ERC1271_ISVALIDSIG_MAX_GAS);\\n        return erc1271Return == ERC1271_RETURN_VALID_SIGNATURE;\\n    }\\n\\n    function safeBytes4StaticCall(address target, bytes data, uint256 maxGas) private view returns (bytes4 ret) {\\n        uint256 gasLeft = gasleft();\\n\\n        uint256 callGas = gasLeft > maxGas ? maxGas : gasLeft;\\n        bool ok;\\n        assembly {\\n            ok := staticcall(callGas, target, add(data, 0x20), mload(data), 0, 0)\\n        }\\n\\n        if (!ok) {\\n            return;\\n        }\\n\\n        uint256 size;\\n        assembly { size := returndatasize }\\n        if (size != 32) {\\n            return;\\n        }\\n\\n        assembly {\\n            let ptr := mload(0x40)       // get next free memory ptr\\n            returndatacopy(ptr, 0, size) // copy return from above `staticcall`\\n            ret := mload(ptr)            // read data at ptr and set it to be returned\\n        }\\n\\n        return ret;\\n    }\\n\\n    // From: https://github.com/Arachnid/solidity-stringutils/blob/01e955c1d6/src/strings.sol\\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8900d75cd2ac28d3290df3aa09db7d4c89e0de0ae1598ee8bef450b22731118b\"},\"@aragon/apps-agent/contracts/standards/ERC1271.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n// ERC1271 on Feb 12th, 2019: https://github.com/ethereum/EIPs/blob/a97dc434930d0ccc4461c97d8c7a920dc585adf2/EIPS/eip-1271.md\\n// Using `isValidSignature(bytes32,bytes)` even though the standard still hasn't been modified\\n// Rationale: https://github.com/ethereum/EIPs/issues/1271#issuecomment-462719728\\n\\n\\ncontract ERC1271 {\\n    bytes4 constant public ERC1271_INTERFACE_ID = 0xfb855dc9; // this.isValidSignature.selector\\n\\n    bytes4 constant public ERC1271_RETURN_VALID_SIGNATURE =   0x20c13b0b; // TODO: Likely needs to be updated\\n    bytes4 constant public ERC1271_RETURN_INVALID_SIGNATURE = 0x00000000;\\n\\n    /**\\n    * @dev Function must be implemented by deriving contract\\n    * @param _hash Arbitrary length data signed on the behalf of address(this)\\n    * @param _signature Signature byte array associated with _data\\n    * @return A bytes4 magic value 0x20c13b0b if the signature check passes, 0x00000000 if not\\n    *\\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n    * MUST allow external calls\\n    */\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) public view returns (bytes4);\\n\\n    function returnIsValidSignatureMagicNumber(bool isValid) internal pure returns (bytes4) {\\n        return isValid ? ERC1271_RETURN_VALID_SIGNATURE : ERC1271_RETURN_INVALID_SIGNATURE;\\n    }\\n}\\n\\n\\ncontract ERC1271Bytes is ERC1271 {\\n    /**\\n    * @dev Default behavior of `isValidSignature(bytes,bytes)`, can be overloaded for custom validation\\n    * @param _data Arbitrary length data signed on the behalf of address(this)\\n    * @param _signature Signature byte array associated with _data\\n    * @return A bytes4 magic value 0x20c13b0b if the signature check passes, 0x00000000 if not\\n    *\\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n    * MUST allow external calls\\n    */\\n    function isValidSignature(bytes _data, bytes _signature) public view returns (bytes4) {\\n        return isValidSignature(keccak256(_data), _signature);\\n    }\\n}\\n\",\"keccak256\":\"0x0e0d434f9f3c740b8f94dab93af3b226dac4d40af885adbbe81ff2a4fd957fc1\"},\"@aragon/apps-agent/contracts/standards/IERC165.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x54c5b6c1e72d3f1a3ad7212600f2a5ae39dc9d990b73d88e614b11dd58f8d7ce\"},\"@aragon/apps-agent/contracts/standards/IERC721Receiver.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n\\ninterface IERC721Receiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\\n     * otherwise the caller will revert the transaction. The selector to be\\n     * returned can be obtained as `this.onERC721Received.selector`. This\\n     * function MAY throw to revert and reject the transfer.\\n     * Note: the ERC721 contract address is always the message sender.\\n     * @param operator The address which called `safeTransferFrom` function\\n     * @param from The address which previously owned the token\\n     * @param tokenId The NFT identifier which is being transferred\\n     * @param data Additional data with no specified format\\n     * @return bytes4 `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x0f80bfb9c096d9dc68a94b93038a7de0247396b09d3b10fb7a339f336d7d2f6b\"},\"@aragon/apps-finance/contracts/Finance.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    GPL-3.0-or-later\\n */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/EtherTokenConstant.sol\\\";\\nimport \\\"@aragon/os/contracts/common/IsContract.sol\\\";\\nimport \\\"@aragon/os/contracts/common/SafeERC20.sol\\\";\\n\\nimport \\\"@aragon/os/contracts/lib/token/ERC20.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath64.sol\\\";\\n\\nimport \\\"@aragon/apps-vault/contracts/Vault.sol\\\";\\n\\n\\ncontract Finance is EtherTokenConstant, IsContract, AragonApp {\\n    using SafeMath for uint256;\\n    using SafeMath64 for uint64;\\n    using SafeERC20 for ERC20;\\n\\n    bytes32 public constant CREATE_PAYMENTS_ROLE = keccak256(\\\"CREATE_PAYMENTS_ROLE\\\");\\n    bytes32 public constant CHANGE_PERIOD_ROLE = keccak256(\\\"CHANGE_PERIOD_ROLE\\\");\\n    bytes32 public constant CHANGE_BUDGETS_ROLE = keccak256(\\\"CHANGE_BUDGETS_ROLE\\\");\\n    bytes32 public constant EXECUTE_PAYMENTS_ROLE = keccak256(\\\"EXECUTE_PAYMENTS_ROLE\\\");\\n    bytes32 public constant MANAGE_PAYMENTS_ROLE = keccak256(\\\"MANAGE_PAYMENTS_ROLE\\\");\\n\\n    uint256 internal constant NO_SCHEDULED_PAYMENT = 0;\\n    uint256 internal constant NO_TRANSACTION = 0;\\n    uint256 internal constant MAX_SCHEDULED_PAYMENTS_PER_TX = 20;\\n    uint256 internal constant MAX_UINT256 = uint256(-1);\\n    uint64 internal constant MAX_UINT64 = uint64(-1);\\n    uint64 internal constant MINIMUM_PERIOD = uint64(1 days);\\n\\n    string private constant ERROR_COMPLETE_TRANSITION = \\\"FINANCE_COMPLETE_TRANSITION\\\";\\n    string private constant ERROR_NO_SCHEDULED_PAYMENT = \\\"FINANCE_NO_SCHEDULED_PAYMENT\\\";\\n    string private constant ERROR_NO_TRANSACTION = \\\"FINANCE_NO_TRANSACTION\\\";\\n    string private constant ERROR_NO_PERIOD = \\\"FINANCE_NO_PERIOD\\\";\\n    string private constant ERROR_VAULT_NOT_CONTRACT = \\\"FINANCE_VAULT_NOT_CONTRACT\\\";\\n    string private constant ERROR_SET_PERIOD_TOO_SHORT = \\\"FINANCE_SET_PERIOD_TOO_SHORT\\\";\\n    string private constant ERROR_NEW_PAYMENT_AMOUNT_ZERO = \\\"FINANCE_NEW_PAYMENT_AMOUNT_ZERO\\\";\\n    string private constant ERROR_NEW_PAYMENT_INTERVAL_ZERO = \\\"FINANCE_NEW_PAYMENT_INTRVL_ZERO\\\";\\n    string private constant ERROR_NEW_PAYMENT_EXECS_ZERO = \\\"FINANCE_NEW_PAYMENT_EXECS_ZERO\\\";\\n    string private constant ERROR_NEW_PAYMENT_IMMEDIATE = \\\"FINANCE_NEW_PAYMENT_IMMEDIATE\\\";\\n    string private constant ERROR_RECOVER_AMOUNT_ZERO = \\\"FINANCE_RECOVER_AMOUNT_ZERO\\\";\\n    string private constant ERROR_DEPOSIT_AMOUNT_ZERO = \\\"FINANCE_DEPOSIT_AMOUNT_ZERO\\\";\\n    string private constant ERROR_ETH_VALUE_MISMATCH = \\\"FINANCE_ETH_VALUE_MISMATCH\\\";\\n    string private constant ERROR_BUDGET = \\\"FINANCE_BUDGET\\\";\\n    string private constant ERROR_EXECUTE_PAYMENT_NUM = \\\"FINANCE_EXECUTE_PAYMENT_NUM\\\";\\n    string private constant ERROR_EXECUTE_PAYMENT_TIME = \\\"FINANCE_EXECUTE_PAYMENT_TIME\\\";\\n    string private constant ERROR_PAYMENT_RECEIVER = \\\"FINANCE_PAYMENT_RECEIVER\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FROM_REVERTED = \\\"FINANCE_TKN_TRANSFER_FROM_REVERT\\\";\\n    string private constant ERROR_TOKEN_APPROVE_FAILED = \\\"FINANCE_TKN_APPROVE_FAILED\\\";\\n    string private constant ERROR_PAYMENT_INACTIVE = \\\"FINANCE_PAYMENT_INACTIVE\\\";\\n    string private constant ERROR_REMAINING_BUDGET = \\\"FINANCE_REMAINING_BUDGET\\\";\\n\\n    // Order optimized for storage\\n    struct ScheduledPayment {\\n        address token;\\n        address receiver;\\n        address createdBy;\\n        bool inactive;\\n        uint256 amount;\\n        uint64 initialPaymentTime;\\n        uint64 interval;\\n        uint64 maxExecutions;\\n        uint64 executions;\\n    }\\n\\n    // Order optimized for storage\\n    struct Transaction {\\n        address token;\\n        address entity;\\n        bool isIncoming;\\n        uint256 amount;\\n        uint256 paymentId;\\n        uint64 paymentExecutionNumber;\\n        uint64 date;\\n        uint64 periodId;\\n    }\\n\\n    struct TokenStatement {\\n        uint256 expenses;\\n        uint256 income;\\n    }\\n\\n    struct Period {\\n        uint64 startTime;\\n        uint64 endTime;\\n        uint256 firstTransactionId;\\n        uint256 lastTransactionId;\\n        mapping (address => TokenStatement) tokenStatement;\\n    }\\n\\n    struct Settings {\\n        uint64 periodDuration;\\n        mapping (address => uint256) budgets;\\n        mapping (address => bool) hasBudget;\\n    }\\n\\n    Vault public vault;\\n    Settings internal settings;\\n\\n    // We are mimicing arrays, we use mappings instead to make app upgrade more graceful\\n    mapping (uint256 => ScheduledPayment) internal scheduledPayments;\\n    // Payments start at index 1, to allow us to use scheduledPayments[0] for transactions that are not\\n    // linked to a scheduled payment\\n    uint256 public paymentsNextIndex;\\n\\n    mapping (uint256 => Transaction) internal transactions;\\n    uint256 public transactionsNextIndex;\\n\\n    mapping (uint64 => Period) internal periods;\\n    uint64 public periodsLength;\\n\\n    event NewPeriod(uint64 indexed periodId, uint64 periodStarts, uint64 periodEnds);\\n    event SetBudget(address indexed token, uint256 amount, bool hasBudget);\\n    event NewPayment(uint256 indexed paymentId, address indexed recipient, uint64 maxExecutions, string reference);\\n    event NewTransaction(uint256 indexed transactionId, bool incoming, address indexed entity, uint256 amount, string reference);\\n    event ChangePaymentState(uint256 indexed paymentId, bool active);\\n    event ChangePeriodDuration(uint64 newDuration);\\n    event PaymentFailure(uint256 paymentId);\\n\\n    // Modifier used by all methods that impact accounting to make sure accounting period\\n    // is changed before the operation if needed\\n    // NOTE: its use **MUST** be accompanied by an initialization check\\n    modifier transitionsPeriod {\\n        bool completeTransition = _tryTransitionAccountingPeriod(getMaxPeriodTransitions());\\n        require(completeTransition, ERROR_COMPLETE_TRANSITION);\\n        _;\\n    }\\n\\n    modifier scheduledPaymentExists(uint256 _paymentId) {\\n        require(_paymentId > 0 && _paymentId < paymentsNextIndex, ERROR_NO_SCHEDULED_PAYMENT);\\n        _;\\n    }\\n\\n    modifier transactionExists(uint256 _transactionId) {\\n        require(_transactionId > 0 && _transactionId < transactionsNextIndex, ERROR_NO_TRANSACTION);\\n        _;\\n    }\\n\\n    modifier periodExists(uint64 _periodId) {\\n        require(_periodId < periodsLength, ERROR_NO_PERIOD);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Deposit ETH to the Vault, to avoid locking them in this Finance app forever\\n     * @dev Send ETH to Vault. Send all the available balance.\\n     */\\n    function () external payable isInitialized transitionsPeriod {\\n        require(msg.value > 0, ERROR_DEPOSIT_AMOUNT_ZERO);\\n        _deposit(\\n            ETH,\\n            msg.value,\\n            \\\"Ether transfer to Finance app\\\",\\n            msg.sender,\\n            true\\n        );\\n    }\\n\\n    /**\\n    * @notice Initialize Finance app for Vault at `_vault` with period length of `@transformTime(_periodDuration)`\\n    * @param _vault Address of the vault Finance will rely on (non changeable)\\n    * @param _periodDuration Duration in seconds of each period\\n    */\\n    function initialize(Vault _vault, uint64 _periodDuration) external onlyInit {\\n        initialized();\\n\\n        require(isContract(_vault), ERROR_VAULT_NOT_CONTRACT);\\n        vault = _vault;\\n\\n        require(_periodDuration >= MINIMUM_PERIOD, ERROR_SET_PERIOD_TOO_SHORT);\\n        settings.periodDuration = _periodDuration;\\n\\n        // Reserve the first scheduled payment index as an unused index for transactions not linked\\n        // to a scheduled payment\\n        scheduledPayments[0].inactive = true;\\n        paymentsNextIndex = 1;\\n\\n        // Reserve the first transaction index as an unused index for periods with no transactions\\n        transactionsNextIndex = 1;\\n\\n        // Start the first period\\n        _newPeriod(getTimestamp64());\\n    }\\n\\n    /**\\n    * @notice Deposit `@tokenAmount(_token, _amount)`\\n    * @dev Deposit for approved ERC20 tokens or ETH\\n    * @param _token Address of deposited token\\n    * @param _amount Amount of tokens sent\\n    * @param _reference Reason for payment\\n    */\\n    function deposit(address _token, uint256 _amount, string _reference) external payable isInitialized transitionsPeriod {\\n        require(_amount > 0, ERROR_DEPOSIT_AMOUNT_ZERO);\\n        if (_token == ETH) {\\n            // Ensure that the ETH sent with the transaction equals the amount in the deposit\\n            require(msg.value == _amount, ERROR_ETH_VALUE_MISMATCH);\\n        }\\n\\n        _deposit(\\n            _token,\\n            _amount,\\n            _reference,\\n            msg.sender,\\n            true\\n        );\\n    }\\n\\n    /**\\n    * @notice Create a new payment of `@tokenAmount(_token, _amount)` to `_receiver` for '`_reference`'\\n    * @dev Note that this function is protected by the `CREATE_PAYMENTS_ROLE` but uses `MAX_UINT256`\\n    *      as its interval auth parameter (as a sentinel value for \\\"never repeating\\\").\\n    *      While this protects against most cases (you typically want to set a baseline requirement\\n    *      for interval time), it does mean users will have to explicitly check for this case when\\n    *      granting a permission that includes a upperbound requirement on the interval time.\\n    * @param _token Address of token for payment\\n    * @param _receiver Address that will receive payment\\n    * @param _amount Tokens that are paid every time the payment is due\\n    * @param _reference String detailing payment reason\\n    */\\n    function newImmediatePayment(address _token, address _receiver, uint256 _amount, string _reference)\\n        external\\n        // Use MAX_UINT256 as the interval parameter, as this payment will never repeat\\n        // Payment time parameter is left as the last param as it was added later\\n        authP(CREATE_PAYMENTS_ROLE, _arr(_token, _receiver, _amount, MAX_UINT256, uint256(1), getTimestamp()))\\n        transitionsPeriod\\n    {\\n        require(_amount > 0, ERROR_NEW_PAYMENT_AMOUNT_ZERO);\\n\\n        _makePaymentTransaction(\\n            _token,\\n            _receiver,\\n            _amount,\\n            NO_SCHEDULED_PAYMENT,   // unrelated to any payment id; it isn't created\\n            0,   // also unrelated to any payment executions\\n            _reference\\n        );\\n    }\\n\\n    /**\\n    * @notice Create a new payment of `@tokenAmount(_token, _amount)` to `_receiver` for `_reference`, executing `_maxExecutions` times at intervals of `@transformTime(_interval)`\\n    * @dev See `newImmediatePayment()` for limitations on how the interval auth parameter can be used\\n    * @param _token Address of token for payment\\n    * @param _receiver Address that will receive payment\\n    * @param _amount Tokens that are paid every time the payment is due\\n    * @param _initialPaymentTime Timestamp for when the first payment is done\\n    * @param _interval Number of seconds that need to pass between payment transactions\\n    * @param _maxExecutions Maximum instances a payment can be executed\\n    * @param _reference String detailing payment reason\\n    */\\n    function newScheduledPayment(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount,\\n        uint64 _initialPaymentTime,\\n        uint64 _interval,\\n        uint64 _maxExecutions,\\n        string _reference\\n    )\\n        external\\n        // Payment time parameter is left as the last param as it was added later\\n        authP(CREATE_PAYMENTS_ROLE, _arr(_token, _receiver, _amount, uint256(_interval), uint256(_maxExecutions), uint256(_initialPaymentTime)))\\n        transitionsPeriod\\n        returns (uint256 paymentId)\\n    {\\n        require(_amount > 0, ERROR_NEW_PAYMENT_AMOUNT_ZERO);\\n        require(_interval > 0, ERROR_NEW_PAYMENT_INTERVAL_ZERO);\\n        require(_maxExecutions > 0, ERROR_NEW_PAYMENT_EXECS_ZERO);\\n\\n        // Token budget must not be set at all or allow at least one instance of this payment each period\\n        require(!settings.hasBudget[_token] || settings.budgets[_token] >= _amount, ERROR_BUDGET);\\n\\n        // Don't allow creating single payments that are immediately executable, use `newImmediatePayment()` instead\\n        if (_maxExecutions == 1) {\\n            require(_initialPaymentTime > getTimestamp64(), ERROR_NEW_PAYMENT_IMMEDIATE);\\n        }\\n\\n        paymentId = paymentsNextIndex++;\\n        emit NewPayment(paymentId, _receiver, _maxExecutions, _reference);\\n\\n        ScheduledPayment storage payment = scheduledPayments[paymentId];\\n        payment.token = _token;\\n        payment.receiver = _receiver;\\n        payment.amount = _amount;\\n        payment.initialPaymentTime = _initialPaymentTime;\\n        payment.interval = _interval;\\n        payment.maxExecutions = _maxExecutions;\\n        payment.createdBy = msg.sender;\\n\\n        // We skip checking how many times the new payment was executed to allow creating new\\n        // scheduled payments before having enough vault balance\\n        _executePayment(paymentId);\\n    }\\n\\n    /**\\n    * @notice Change period duration to `@transformTime(_periodDuration)`, effective for next accounting period\\n    * @param _periodDuration Duration in seconds for accounting periods\\n    */\\n    function setPeriodDuration(uint64 _periodDuration)\\n        external\\n        authP(CHANGE_PERIOD_ROLE, arr(uint256(_periodDuration), uint256(settings.periodDuration)))\\n        transitionsPeriod\\n    {\\n        require(_periodDuration >= MINIMUM_PERIOD, ERROR_SET_PERIOD_TOO_SHORT);\\n        settings.periodDuration = _periodDuration;\\n        emit ChangePeriodDuration(_periodDuration);\\n    }\\n\\n    /**\\n    * @notice Set budget for `_token.symbol(): string` to `@tokenAmount(_token, _amount, false)`, effective immediately\\n    * @param _token Address for token\\n    * @param _amount New budget amount\\n    */\\n    function setBudget(\\n        address _token,\\n        uint256 _amount\\n    )\\n        external\\n        authP(CHANGE_BUDGETS_ROLE, arr(_token, _amount, settings.budgets[_token], uint256(settings.hasBudget[_token] ? 1 : 0)))\\n        transitionsPeriod\\n    {\\n        settings.budgets[_token] = _amount;\\n        if (!settings.hasBudget[_token]) {\\n            settings.hasBudget[_token] = true;\\n        }\\n        emit SetBudget(_token, _amount, true);\\n    }\\n\\n    /**\\n    * @notice Remove spending limit for `_token.symbol(): string`, effective immediately\\n    * @param _token Address for token\\n    */\\n    function removeBudget(address _token)\\n        external\\n        authP(CHANGE_BUDGETS_ROLE, arr(_token, uint256(0), settings.budgets[_token], uint256(settings.hasBudget[_token] ? 1 : 0)))\\n        transitionsPeriod\\n    {\\n        settings.budgets[_token] = 0;\\n        settings.hasBudget[_token] = false;\\n        emit SetBudget(_token, 0, false);\\n    }\\n\\n    /**\\n    * @notice Execute pending payment #`_paymentId`\\n    * @dev Executes any payment (requires role)\\n    * @param _paymentId Identifier for payment\\n    */\\n    function executePayment(uint256 _paymentId)\\n        external\\n        authP(EXECUTE_PAYMENTS_ROLE, arr(_paymentId, scheduledPayments[_paymentId].amount))\\n        scheduledPaymentExists(_paymentId)\\n        transitionsPeriod\\n    {\\n        _executePaymentAtLeastOnce(_paymentId);\\n    }\\n\\n    /**\\n    * @notice Execute pending payment #`_paymentId`\\n    * @dev Always allow receiver of a payment to trigger execution\\n    *      Initialization check is implicitly provided by `scheduledPaymentExists()` as new\\n    *      scheduled payments can only be created via `newScheduledPayment(),` which requires initialization\\n    * @param _paymentId Identifier for payment\\n    */\\n    function receiverExecutePayment(uint256 _paymentId) external scheduledPaymentExists(_paymentId) transitionsPeriod {\\n        require(scheduledPayments[_paymentId].receiver == msg.sender, ERROR_PAYMENT_RECEIVER);\\n        _executePaymentAtLeastOnce(_paymentId);\\n    }\\n\\n    /**\\n    * @notice `_active ? 'Activate' : 'Disable'` payment #`_paymentId`\\n    * @dev Note that we do not require this action to transition periods, as it doesn't directly\\n    *      impact any accounting periods.\\n    *      Not having to transition periods also makes disabling payments easier to prevent funds\\n    *      from being pulled out in the event of a breach.\\n    * @param _paymentId Identifier for payment\\n    * @param _active Whether it will be active or inactive\\n    */\\n    function setPaymentStatus(uint256 _paymentId, bool _active)\\n        external\\n        authP(MANAGE_PAYMENTS_ROLE, arr(_paymentId, uint256(_active ? 1 : 0)))\\n        scheduledPaymentExists(_paymentId)\\n    {\\n        scheduledPayments[_paymentId].inactive = !_active;\\n        emit ChangePaymentState(_paymentId, _active);\\n    }\\n\\n    /**\\n     * @notice Send tokens held in this contract to the Vault\\n     * @dev Allows making a simple payment from this contract to the Vault, to avoid locked tokens.\\n     *      This contract should never receive tokens with a simple transfer call, but in case it\\n     *      happens, this function allows for their recovery.\\n     * @param _token Token whose balance is going to be transferred.\\n     */\\n    function recoverToVault(address _token) external isInitialized transitionsPeriod {\\n        uint256 amount = _token == ETH ? address(this).balance : ERC20(_token).staticBalanceOf(address(this));\\n        require(amount > 0, ERROR_RECOVER_AMOUNT_ZERO);\\n\\n        _deposit(\\n            _token,\\n            amount,\\n            \\\"Recover to Vault\\\",\\n            address(this),\\n            false\\n        );\\n    }\\n\\n    /**\\n    * @notice Transition accounting period if needed\\n    * @dev Transitions accounting periods if needed. For preventing OOG attacks, a maxTransitions\\n    *      param is provided. If more than the specified number of periods need to be transitioned,\\n    *      it will return false.\\n    * @param _maxTransitions Maximum periods that can be transitioned\\n    * @return success Boolean indicating whether the accounting period is the correct one (if false,\\n    *                 maxTransitions was surpased and another call is needed)\\n    */\\n    function tryTransitionAccountingPeriod(uint64 _maxTransitions) external isInitialized returns (bool success) {\\n        return _tryTransitionAccountingPeriod(_maxTransitions);\\n    }\\n\\n    // Getter fns\\n\\n    /**\\n    * @dev Disable recovery escape hatch if the app has been initialized, as it could be used\\n    *      maliciously to transfer funds in the Finance app to another Vault\\n    *      finance#recoverToVault() should be used to recover funds to the Finance's vault\\n    */\\n    function allowRecoverability(address) public view returns (bool) {\\n        return !hasInitialized();\\n    }\\n\\n    function getPayment(uint256 _paymentId)\\n        public\\n        view\\n        scheduledPaymentExists(_paymentId)\\n        returns (\\n            address token,\\n            address receiver,\\n            uint256 amount,\\n            uint64 initialPaymentTime,\\n            uint64 interval,\\n            uint64 maxExecutions,\\n            bool inactive,\\n            uint64 executions,\\n            address createdBy\\n        )\\n    {\\n        ScheduledPayment storage payment = scheduledPayments[_paymentId];\\n\\n        token = payment.token;\\n        receiver = payment.receiver;\\n        amount = payment.amount;\\n        initialPaymentTime = payment.initialPaymentTime;\\n        interval = payment.interval;\\n        maxExecutions = payment.maxExecutions;\\n        executions = payment.executions;\\n        inactive = payment.inactive;\\n        createdBy = payment.createdBy;\\n    }\\n\\n    function getTransaction(uint256 _transactionId)\\n        public\\n        view\\n        transactionExists(_transactionId)\\n        returns (\\n            uint64 periodId,\\n            uint256 amount,\\n            uint256 paymentId,\\n            uint64 paymentExecutionNumber,\\n            address token,\\n            address entity,\\n            bool isIncoming,\\n            uint64 date\\n        )\\n    {\\n        Transaction storage transaction = transactions[_transactionId];\\n\\n        token = transaction.token;\\n        entity = transaction.entity;\\n        isIncoming = transaction.isIncoming;\\n        date = transaction.date;\\n        periodId = transaction.periodId;\\n        amount = transaction.amount;\\n        paymentId = transaction.paymentId;\\n        paymentExecutionNumber = transaction.paymentExecutionNumber;\\n    }\\n\\n    function getPeriod(uint64 _periodId)\\n        public\\n        view\\n        periodExists(_periodId)\\n        returns (\\n            bool isCurrent,\\n            uint64 startTime,\\n            uint64 endTime,\\n            uint256 firstTransactionId,\\n            uint256 lastTransactionId\\n        )\\n    {\\n        Period storage period = periods[_periodId];\\n\\n        isCurrent = _currentPeriodId() == _periodId;\\n\\n        startTime = period.startTime;\\n        endTime = period.endTime;\\n        firstTransactionId = period.firstTransactionId;\\n        lastTransactionId = period.lastTransactionId;\\n    }\\n\\n    function getPeriodTokenStatement(uint64 _periodId, address _token)\\n        public\\n        view\\n        periodExists(_periodId)\\n        returns (uint256 expenses, uint256 income)\\n    {\\n        TokenStatement storage tokenStatement = periods[_periodId].tokenStatement[_token];\\n        expenses = tokenStatement.expenses;\\n        income = tokenStatement.income;\\n    }\\n\\n    /**\\n    * @dev We have to check for initialization as periods are only valid after initializing\\n    */\\n    function currentPeriodId() public view isInitialized returns (uint64) {\\n        return _currentPeriodId();\\n    }\\n\\n    /**\\n    * @dev We have to check for initialization as periods are only valid after initializing\\n    */\\n    function getPeriodDuration() public view isInitialized returns (uint64) {\\n        return settings.periodDuration;\\n    }\\n\\n    /**\\n    * @dev We have to check for initialization as budgets are only valid after initializing\\n    */\\n    function getBudget(address _token) public view isInitialized returns (uint256 budget, bool hasBudget) {\\n        budget = settings.budgets[_token];\\n        hasBudget = settings.hasBudget[_token];\\n    }\\n\\n    /**\\n    * @dev We have to check for initialization as budgets are only valid after initializing\\n    */\\n    function getRemainingBudget(address _token) public view isInitialized returns (uint256) {\\n        return _getRemainingBudget(_token);\\n    }\\n\\n    /**\\n    * @dev We have to check for initialization as budgets are only valid after initializing\\n    */\\n    function canMakePayment(address _token, uint256 _amount) public view isInitialized returns (bool) {\\n        return _canMakePayment(_token, _amount);\\n    }\\n\\n    /**\\n    * @dev Initialization check is implicitly provided by `scheduledPaymentExists()` as new\\n    *      scheduled payments can only be created via `newScheduledPayment(),` which requires initialization\\n    */\\n    function nextPaymentTime(uint256 _paymentId) public view scheduledPaymentExists(_paymentId) returns (uint64) {\\n        return _nextPaymentTime(_paymentId);\\n    }\\n\\n    // Internal fns\\n\\n    function _deposit(address _token, uint256 _amount, string _reference, address _sender, bool _isExternalDeposit) internal {\\n        _recordIncomingTransaction(\\n            _token,\\n            _sender,\\n            _amount,\\n            _reference\\n        );\\n\\n        if (_token == ETH) {\\n            vault.deposit.value(_amount)(ETH, _amount);\\n        } else {\\n            // First, transfer the tokens to Finance if necessary\\n            // External deposit will be false when the assets were already in the Finance app\\n            // and just need to be transferred to the Vault\\n            if (_isExternalDeposit) {\\n                // This assumes the sender has approved the tokens for Finance\\n                require(\\n                    ERC20(_token).safeTransferFrom(msg.sender, address(this), _amount),\\n                    ERROR_TOKEN_TRANSFER_FROM_REVERTED\\n                );\\n            }\\n            // Approve the tokens for the Vault (it does the actual transferring)\\n            require(ERC20(_token).safeApprove(vault, _amount), ERROR_TOKEN_APPROVE_FAILED);\\n            // Finally, initiate the deposit\\n            vault.deposit(_token, _amount);\\n        }\\n    }\\n\\n    function _executePayment(uint256 _paymentId) internal returns (uint256) {\\n        ScheduledPayment storage payment = scheduledPayments[_paymentId];\\n        require(!payment.inactive, ERROR_PAYMENT_INACTIVE);\\n\\n        uint64 paid = 0;\\n        while (_nextPaymentTime(_paymentId) <= getTimestamp64() && paid < MAX_SCHEDULED_PAYMENTS_PER_TX) {\\n            if (!_canMakePayment(payment.token, payment.amount)) {\\n                emit PaymentFailure(_paymentId);\\n                break;\\n            }\\n\\n            // The while() predicate prevents these two from ever overflowing\\n            payment.executions += 1;\\n            paid += 1;\\n\\n            // We've already checked the remaining budget with `_canMakePayment()`\\n            _unsafeMakePaymentTransaction(\\n                payment.token,\\n                payment.receiver,\\n                payment.amount,\\n                _paymentId,\\n                payment.executions,\\n                \\\"\\\"\\n            );\\n        }\\n\\n        return paid;\\n    }\\n\\n    function _executePaymentAtLeastOnce(uint256 _paymentId) internal {\\n        uint256 paid = _executePayment(_paymentId);\\n        if (paid == 0) {\\n            if (_nextPaymentTime(_paymentId) <= getTimestamp64()) {\\n                revert(ERROR_EXECUTE_PAYMENT_NUM);\\n            } else {\\n                revert(ERROR_EXECUTE_PAYMENT_TIME);\\n            }\\n        }\\n    }\\n\\n    function _makePaymentTransaction(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount,\\n        uint256 _paymentId,\\n        uint64 _paymentExecutionNumber,\\n        string _reference\\n    )\\n        internal\\n    {\\n        require(_getRemainingBudget(_token) >= _amount, ERROR_REMAINING_BUDGET);\\n        _unsafeMakePaymentTransaction(_token, _receiver, _amount, _paymentId, _paymentExecutionNumber, _reference);\\n    }\\n\\n    /**\\n    * @dev Unsafe version of _makePaymentTransaction that assumes you have already checked the\\n    *      remaining budget\\n    */\\n    function _unsafeMakePaymentTransaction(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount,\\n        uint256 _paymentId,\\n        uint64 _paymentExecutionNumber,\\n        string _reference\\n    )\\n        internal\\n    {\\n        _recordTransaction(\\n            false,\\n            _token,\\n            _receiver,\\n            _amount,\\n            _paymentId,\\n            _paymentExecutionNumber,\\n            _reference\\n        );\\n\\n        vault.transfer(_token, _receiver, _amount);\\n    }\\n\\n    function _newPeriod(uint64 _startTime) internal returns (Period storage) {\\n        // There should be no way for this to overflow since each period is at least one day\\n        uint64 newPeriodId = periodsLength++;\\n\\n        Period storage period = periods[newPeriodId];\\n        period.startTime = _startTime;\\n\\n        // Be careful here to not overflow; if startTime + periodDuration overflows, we set endTime\\n        // to MAX_UINT64 (let's assume that's the end of time for now).\\n        uint64 endTime = _startTime + settings.periodDuration - 1;\\n        if (endTime < _startTime) { // overflowed\\n            endTime = MAX_UINT64;\\n        }\\n        period.endTime = endTime;\\n\\n        emit NewPeriod(newPeriodId, period.startTime, period.endTime);\\n\\n        return period;\\n    }\\n\\n    function _recordIncomingTransaction(\\n        address _token,\\n        address _sender,\\n        uint256 _amount,\\n        string _reference\\n    )\\n        internal\\n    {\\n        _recordTransaction(\\n            true, // incoming transaction\\n            _token,\\n            _sender,\\n            _amount,\\n            NO_SCHEDULED_PAYMENT, // unrelated to any existing payment\\n            0, // and no payment executions\\n            _reference\\n        );\\n    }\\n\\n    function _recordTransaction(\\n        bool _incoming,\\n        address _token,\\n        address _entity,\\n        uint256 _amount,\\n        uint256 _paymentId,\\n        uint64 _paymentExecutionNumber,\\n        string _reference\\n    )\\n        internal\\n    {\\n        uint64 periodId = _currentPeriodId();\\n        TokenStatement storage tokenStatement = periods[periodId].tokenStatement[_token];\\n        if (_incoming) {\\n            tokenStatement.income = tokenStatement.income.add(_amount);\\n        } else {\\n            tokenStatement.expenses = tokenStatement.expenses.add(_amount);\\n        }\\n\\n        uint256 transactionId = transactionsNextIndex++;\\n\\n        Transaction storage transaction = transactions[transactionId];\\n        transaction.token = _token;\\n        transaction.entity = _entity;\\n        transaction.isIncoming = _incoming;\\n        transaction.amount = _amount;\\n        transaction.paymentId = _paymentId;\\n        transaction.paymentExecutionNumber = _paymentExecutionNumber;\\n        transaction.date = getTimestamp64();\\n        transaction.periodId = periodId;\\n\\n        Period storage period = periods[periodId];\\n        if (period.firstTransactionId == NO_TRANSACTION) {\\n            period.firstTransactionId = transactionId;\\n        }\\n\\n        emit NewTransaction(transactionId, _incoming, _entity, _amount, _reference);\\n    }\\n\\n    function _tryTransitionAccountingPeriod(uint64 _maxTransitions) internal returns (bool success) {\\n        Period storage currentPeriod = periods[_currentPeriodId()];\\n        uint64 timestamp = getTimestamp64();\\n\\n        // Transition periods if necessary\\n        while (timestamp > currentPeriod.endTime) {\\n            if (_maxTransitions == 0) {\\n                // Required number of transitions is over allowed number, return false indicating\\n                // it didn't fully transition\\n                return false;\\n            }\\n            // We're already protected from underflowing above\\n            _maxTransitions -= 1;\\n\\n            // If there were any transactions in period, record which was the last\\n            // In case 0 transactions occured, first and last tx id will be 0\\n            if (currentPeriod.firstTransactionId != NO_TRANSACTION) {\\n                currentPeriod.lastTransactionId = transactionsNextIndex.sub(1);\\n            }\\n\\n            // New period starts at end time + 1\\n            currentPeriod = _newPeriod(currentPeriod.endTime.add(1));\\n        }\\n\\n        return true;\\n    }\\n\\n    function _canMakePayment(address _token, uint256 _amount) internal view returns (bool) {\\n        return _getRemainingBudget(_token) >= _amount && vault.balance(_token) >= _amount;\\n    }\\n\\n    function _currentPeriodId() internal view returns (uint64) {\\n        // There is no way for this to overflow if protected by an initialization check\\n        return periodsLength - 1;\\n    }\\n\\n    function _getRemainingBudget(address _token) internal view returns (uint256) {\\n        if (!settings.hasBudget[_token]) {\\n            return MAX_UINT256;\\n        }\\n\\n        uint256 budget = settings.budgets[_token];\\n        uint256 spent = periods[_currentPeriodId()].tokenStatement[_token].expenses;\\n\\n        // A budget decrease can cause the spent amount to be greater than period budget\\n        // If so, return 0 to not allow more spending during period\\n        if (spent >= budget) {\\n            return 0;\\n        }\\n\\n        // We're already protected from the overflow above\\n        return budget - spent;\\n    }\\n\\n    function _nextPaymentTime(uint256 _paymentId) internal view returns (uint64) {\\n        ScheduledPayment storage payment = scheduledPayments[_paymentId];\\n\\n        if (payment.executions >= payment.maxExecutions) {\\n            return MAX_UINT64; // re-executes in some billions of years time... should not need to worry\\n        }\\n\\n        // Split in multiple lines to circumvent linter warning\\n        uint64 increase = payment.executions.mul(payment.interval);\\n        uint64 nextPayment = payment.initialPaymentTime.add(increase);\\n        return nextPayment;\\n    }\\n\\n    // Syntax sugar\\n\\n    function _arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e, uint256 _f) internal pure returns (uint256[] r) {\\n        r = new uint256[](6);\\n        r[0] = uint256(_a);\\n        r[1] = uint256(_b);\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n        r[5] = _f;\\n    }\\n\\n    // Mocked fns (overrided during testing)\\n    // Must be view for mocking purposes\\n\\n    function getMaxPeriodTransitions() internal view returns (uint64) { return MAX_UINT64; }\\n}\\n\",\"keccak256\":\"0xafc1ce43dacd96650713ee23b76e9af1fecdc2c2ceaa182b2d9b0227fcdc279d\"},\"@aragon/apps-payroll/contracts/Payroll.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/EtherTokenConstant.sol\\\";\\nimport \\\"@aragon/os/contracts/common/IsContract.sol\\\";\\nimport \\\"@aragon/os/contracts/common/IForwarder.sol\\\";\\n\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath64.sol\\\";\\n\\nimport \\\"@aragon/ppf-contracts/contracts/IFeed.sol\\\";\\nimport \\\"@aragon/apps-finance/contracts/Finance.sol\\\";\\n\\n\\n/**\\n * @title Payroll in multiple currencies\\n */\\ncontract Payroll is EtherTokenConstant, IForwarder, IsContract, AragonApp {\\n    using SafeMath for uint256;\\n    using SafeMath64 for uint64;\\n\\n    /* Hardcoded constants to save gas\\n    * bytes32 constant public ADD_EMPLOYEE_ROLE = keccak256(\\\"ADD_EMPLOYEE_ROLE\\\");\\n    * bytes32 constant public TERMINATE_EMPLOYEE_ROLE = keccak256(\\\"TERMINATE_EMPLOYEE_ROLE\\\");\\n    * bytes32 constant public SET_EMPLOYEE_SALARY_ROLE = keccak256(\\\"SET_EMPLOYEE_SALARY_ROLE\\\");\\n    * bytes32 constant public ADD_BONUS_ROLE = keccak256(\\\"ADD_BONUS_ROLE\\\");\\n    * bytes32 constant public ADD_REIMBURSEMENT_ROLE = keccak256(\\\"ADD_REIMBURSEMENT_ROLE\\\");\\n    * bytes32 constant public MANAGE_ALLOWED_TOKENS_ROLE = keccak256(\\\"MANAGE_ALLOWED_TOKENS_ROLE\\\");\\n    * bytes32 constant public MODIFY_PRICE_FEED_ROLE = keccak256(\\\"MODIFY_PRICE_FEED_ROLE\\\");\\n    * bytes32 constant public MODIFY_RATE_EXPIRY_ROLE = keccak256(\\\"MODIFY_RATE_EXPIRY_ROLE\\\");\\n    */\\n\\n    bytes32 constant public ADD_EMPLOYEE_ROLE = 0x9ecdc3c63716b45d0756eece5fe1614cae1889ec5a1ce62b3127c1f1f1615d6e;\\n    bytes32 constant public TERMINATE_EMPLOYEE_ROLE = 0x69c67f914d12b6440e7ddf01961214818d9158fbcb19211e0ff42800fdea9242;\\n    bytes32 constant public SET_EMPLOYEE_SALARY_ROLE = 0xea9ac65018da2421cf419ee2152371440c08267a193a33ccc1e39545d197e44d;\\n    bytes32 constant public ADD_BONUS_ROLE = 0xceca7e2f5eb749a87aaf68f3f76d6b9251aa2f4600f13f93c5a4adf7a72df4ae;\\n    bytes32 constant public ADD_REIMBURSEMENT_ROLE = 0x90698b9d54427f1e41636025017309bdb1b55320da960c8845bab0a504b01a16;\\n    bytes32 constant public MANAGE_ALLOWED_TOKENS_ROLE = 0x0be34987c45700ee3fae8c55e270418ba903337decc6bacb1879504be9331c06;\\n    bytes32 constant public MODIFY_PRICE_FEED_ROLE = 0x74350efbcba8b85341c5bbf70cc34e2a585fc1463524773a12fa0a71d4eb9302;\\n    bytes32 constant public MODIFY_RATE_EXPIRY_ROLE = 0x79fe989a8899060dfbdabb174ebb96616fa9f1d9dadd739f8d814cbab452404e;\\n\\n    uint256 internal constant MAX_ALLOWED_TOKENS = 20; // prevent OOG issues with `payday()`\\n    uint64 internal constant MIN_RATE_EXPIRY = uint64(1 minutes); // 1 min == ~4 block window to mine both a price feed update and a payout\\n\\n    uint256 internal constant MAX_UINT256 = uint256(-1);\\n    uint64 internal constant MAX_UINT64 = uint64(-1);\\n\\n    string private constant ERROR_EMPLOYEE_DOESNT_EXIST = \\\"PAYROLL_EMPLOYEE_DOESNT_EXIST\\\";\\n    string private constant ERROR_NON_ACTIVE_EMPLOYEE = \\\"PAYROLL_NON_ACTIVE_EMPLOYEE\\\";\\n    string private constant ERROR_SENDER_DOES_NOT_MATCH = \\\"PAYROLL_SENDER_DOES_NOT_MATCH\\\";\\n    string private constant ERROR_FINANCE_NOT_CONTRACT = \\\"PAYROLL_FINANCE_NOT_CONTRACT\\\";\\n    string private constant ERROR_TOKEN_ALREADY_SET = \\\"PAYROLL_TOKEN_ALREADY_SET\\\";\\n    string private constant ERROR_MAX_ALLOWED_TOKENS = \\\"PAYROLL_MAX_ALLOWED_TOKENS\\\";\\n    string private constant ERROR_MIN_RATES_MISMATCH = \\\"PAYROLL_MIN_RATES_MISMATCH\\\";\\n    string private constant ERROR_TOKEN_ALLOCATION_MISMATCH = \\\"PAYROLL_TOKEN_ALLOCATION_MISMATCH\\\";\\n    string private constant ERROR_NOT_ALLOWED_TOKEN = \\\"PAYROLL_NOT_ALLOWED_TOKEN\\\";\\n    string private constant ERROR_DISTRIBUTION_NOT_FULL = \\\"PAYROLL_DISTRIBUTION_NOT_FULL\\\";\\n    string private constant ERROR_INVALID_PAYMENT_TYPE = \\\"PAYROLL_INVALID_PAYMENT_TYPE\\\";\\n    string private constant ERROR_NOTHING_PAID = \\\"PAYROLL_NOTHING_PAID\\\";\\n    string private constant ERROR_CAN_NOT_FORWARD = \\\"PAYROLL_CAN_NOT_FORWARD\\\";\\n    string private constant ERROR_EMPLOYEE_NULL_ADDRESS = \\\"PAYROLL_EMPLOYEE_NULL_ADDRESS\\\";\\n    string private constant ERROR_EMPLOYEE_ALREADY_EXIST = \\\"PAYROLL_EMPLOYEE_ALREADY_EXIST\\\";\\n    string private constant ERROR_FEED_NOT_CONTRACT = \\\"PAYROLL_FEED_NOT_CONTRACT\\\";\\n    string private constant ERROR_EXPIRY_TIME_TOO_SHORT = \\\"PAYROLL_EXPIRY_TIME_TOO_SHORT\\\";\\n    string private constant ERROR_PAST_TERMINATION_DATE = \\\"PAYROLL_PAST_TERMINATION_DATE\\\";\\n    string private constant ERROR_EXCHANGE_RATE_TOO_LOW = \\\"PAYROLL_EXCHANGE_RATE_TOO_LOW\\\";\\n    string private constant ERROR_LAST_PAYROLL_DATE_TOO_BIG = \\\"PAYROLL_LAST_DATE_TOO_BIG\\\";\\n    string private constant ERROR_INVALID_REQUESTED_AMOUNT = \\\"PAYROLL_INVALID_REQUESTED_AMT\\\";\\n\\n    enum PaymentType { Payroll, Reimbursement, Bonus }\\n\\n    struct Employee {\\n        address accountAddress; // unique, but can be changed over time\\n        uint256 denominationTokenSalary; // salary per second in denomination Token\\n        uint256 accruedSalary; // keep track of any leftover accrued salary when changing salaries\\n        uint256 bonus;\\n        uint256 reimbursements;\\n        uint64 lastPayroll;\\n        uint64 endDate;\\n        address[] allocationTokenAddresses;\\n        mapping(address => uint256) allocationTokens;\\n    }\\n\\n    Finance public finance;\\n    address public denominationToken;\\n    IFeed public feed;\\n    uint64 public rateExpiryTime;\\n\\n    // Employees start at index 1, to allow us to use employees[0] to check for non-existent employees\\n    uint256 public nextEmployee;\\n    mapping(uint256 => Employee) internal employees;     // employee ID -> employee\\n    mapping(address => uint256) internal employeeIds;    // employee address -> employee ID\\n\\n    mapping(address => bool) internal allowedTokens;\\n\\n    event AddEmployee(\\n        uint256 indexed employeeId,\\n        address indexed accountAddress,\\n        uint256 initialDenominationSalary,\\n        uint64 startDate,\\n        string role\\n    );\\n    event TerminateEmployee(uint256 indexed employeeId, uint64 endDate);\\n    event SetEmployeeSalary(uint256 indexed employeeId, uint256 denominationSalary);\\n    event AddEmployeeAccruedSalary(uint256 indexed employeeId, uint256 amount);\\n    event AddEmployeeBonus(uint256 indexed employeeId, uint256 amount);\\n    event AddEmployeeReimbursement(uint256 indexed employeeId, uint256 amount);\\n    event ChangeAddressByEmployee(uint256 indexed employeeId, address indexed newAccountAddress, address indexed oldAccountAddress);\\n    event DetermineAllocation(uint256 indexed employeeId);\\n    event SendPayment(\\n        uint256 indexed employeeId,\\n        address indexed accountAddress,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 exchangeRate,\\n        string paymentReference\\n    );\\n    event SetAllowedToken(address indexed token, bool allowed);\\n    event SetPriceFeed(address indexed feed);\\n    event SetRateExpiryTime(uint64 time);\\n\\n    // Check employee exists by ID\\n    modifier employeeIdExists(uint256 _employeeId) {\\n        require(_employeeExists(_employeeId), ERROR_EMPLOYEE_DOESNT_EXIST);\\n        _;\\n    }\\n\\n    // Check employee exists and is still active\\n    modifier employeeActive(uint256 _employeeId) {\\n        // No need to check for existence as _isEmployeeIdActive() is false for non-existent employees\\n        require(_isEmployeeIdActive(_employeeId), ERROR_NON_ACTIVE_EMPLOYEE);\\n        _;\\n    }\\n\\n    // Check sender matches an existing employee\\n    modifier employeeMatches {\\n        require(employees[employeeIds[msg.sender]].accountAddress == msg.sender, ERROR_SENDER_DOES_NOT_MATCH);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize Payroll app for Finance at `_finance` and price feed at `_priceFeed`, setting denomination token to `_token` and exchange rate expiry time to `@transformTime(_rateExpiryTime)`\\n     * @dev Note that we do not require _denominationToken to be a contract, as it may be a \\\"fake\\\"\\n     *      address used by the price feed to denominate fiat currencies\\n     * @param _finance Address of the Finance app this Payroll app will rely on for payments (non-changeable)\\n     * @param _denominationToken Address of the denomination token used for salary accounting\\n     * @param _priceFeed Address of the price feed\\n     * @param _rateExpiryTime Acceptable expiry time in seconds for the price feed's exchange rates\\n     */\\n    function initialize(Finance _finance, address _denominationToken, IFeed _priceFeed, uint64 _rateExpiryTime) external onlyInit {\\n        initialized();\\n\\n        require(isContract(_finance), ERROR_FINANCE_NOT_CONTRACT);\\n        finance = _finance;\\n\\n        denominationToken = _denominationToken;\\n        _setPriceFeed(_priceFeed);\\n        _setRateExpiryTime(_rateExpiryTime);\\n\\n        // Employees start at index 1, to allow us to use employees[0] to check for non-existent employees\\n        nextEmployee = 1;\\n    }\\n\\n    /**\\n     * @notice `_allowed ? 'Add' : 'Remove'` `_token.symbol(): string` `_allowed ? 'to' : 'from'` the set of allowed tokens\\n     * @param _token Address of the token to be added or removed from the list of allowed tokens for payments\\n     * @param _allowed Boolean to tell whether the given token should be added or removed from the list\\n     */\\n    function setAllowedToken(address _token, bool _allowed) external authP(MANAGE_ALLOWED_TOKENS_ROLE, arr(_token)) {\\n        require(allowedTokens[_token] != _allowed, ERROR_TOKEN_ALREADY_SET);\\n        allowedTokens[_token] = _allowed;\\n        emit SetAllowedToken(_token, _allowed);\\n    }\\n\\n    /**\\n     * @notice Set the price feed for exchange rates to `_feed`\\n     * @param _feed Address of the new price feed instance\\n     */\\n    function setPriceFeed(IFeed _feed) external authP(MODIFY_PRICE_FEED_ROLE, arr(_feed, feed)) {\\n        _setPriceFeed(_feed);\\n    }\\n\\n    /**\\n     * @notice Set the acceptable expiry time for the price feed's exchange rates to `@transformTime(_time)`\\n     * @dev Exchange rates older than the given value won't be accepted for payments and will cause payouts to revert\\n     * @param _time The expiration time in seconds for exchange rates\\n     */\\n    function setRateExpiryTime(uint64 _time) external authP(MODIFY_RATE_EXPIRY_ROLE, arr(uint256(_time), uint256(rateExpiryTime))) {\\n        _setRateExpiryTime(_time);\\n    }\\n\\n    /**\\n     * @notice Add employee with address `_accountAddress` to payroll with an salary of `_initialDenominationSalary` per second, starting on `@formatDate(_startDate)`\\n     * @param _accountAddress Employee's address to receive payroll\\n     * @param _initialDenominationSalary Employee's salary, per second in denomination token\\n     * @param _startDate Employee's starting timestamp in seconds (it actually sets their initial lastPayroll value)\\n     * @param _role Employee's role\\n     */\\n    function addEmployee(address _accountAddress, uint256 _initialDenominationSalary, uint64 _startDate, string _role)\\n        external\\n        authP(ADD_EMPLOYEE_ROLE, arr(_accountAddress, _initialDenominationSalary, uint256(_startDate)))\\n    {\\n        _addEmployee(_accountAddress, _initialDenominationSalary, _startDate, _role);\\n    }\\n\\n    /**\\n     * @notice Add `_amount` to bonus for employee #`_employeeId`\\n     * @param _employeeId Employee's identifier\\n     * @param _amount Amount to be added to the employee's bonuses in denomination token\\n     */\\n    function addBonus(uint256 _employeeId, uint256 _amount)\\n        external\\n        authP(ADD_BONUS_ROLE, arr(_employeeId, _amount))\\n        employeeActive(_employeeId)\\n    {\\n        _addBonus(_employeeId, _amount);\\n    }\\n\\n    /**\\n     * @notice Add `_amount` to reimbursements for employee #`_employeeId`\\n     * @param _employeeId Employee's identifier\\n     * @param _amount Amount to be added to the employee's reimbursements in denomination token\\n     */\\n    function addReimbursement(uint256 _employeeId, uint256 _amount)\\n        external\\n        authP(ADD_REIMBURSEMENT_ROLE, arr(_employeeId, _amount))\\n        employeeActive(_employeeId)\\n    {\\n        _addReimbursement(_employeeId, _amount);\\n    }\\n\\n    /**\\n     * @notice Set employee #`_employeeId`'s salary to `_denominationSalary` per second\\n     * @dev This reverts if either the employee's owed salary or accrued salary overflows, to avoid\\n     *      losing any accrued salary for an employee due to the employer changing their salary.\\n     * @param _employeeId Employee's identifier\\n     * @param _denominationSalary Employee's new salary, per second in denomination token\\n     */\\n    function setEmployeeSalary(uint256 _employeeId, uint256 _denominationSalary)\\n        external\\n        authP(SET_EMPLOYEE_SALARY_ROLE, arr(_employeeId, _denominationSalary, employees[_employeeId].denominationTokenSalary))\\n        employeeActive(_employeeId)\\n    {\\n        Employee storage employee = employees[_employeeId];\\n\\n        // Accrue employee's owed salary; don't cap to revert on overflow\\n        uint256 owed = _getOwedSalarySinceLastPayroll(employee, false);\\n        _addAccruedSalary(_employeeId, owed);\\n\\n        // Update employee to track the new salary and payment date\\n        employee.lastPayroll = getTimestamp64();\\n        employee.denominationTokenSalary = _denominationSalary;\\n\\n        emit SetEmployeeSalary(_employeeId, _denominationSalary);\\n    }\\n\\n    /**\\n     * @notice Terminate employee #`_employeeId` on `@formatDate(_endDate)`\\n     * @param _employeeId Employee's identifier\\n     * @param _endDate Termination timestamp in seconds\\n     */\\n    function terminateEmployee(uint256 _employeeId, uint64 _endDate)\\n        external\\n        authP(TERMINATE_EMPLOYEE_ROLE, arr(_employeeId, uint256(_endDate)))\\n        employeeActive(_employeeId)\\n    {\\n        _terminateEmployee(_employeeId, _endDate);\\n    }\\n\\n    /**\\n     * @notice Change your employee account address to `_newAccountAddress`\\n     * @dev Initialization check is implicitly provided by `employeeMatches` as new employees can\\n     *      only be added via `addEmployee(),` which requires initialization.\\n     *      As the employee is allowed to call this, we enforce non-reentrancy.\\n     * @param _newAccountAddress New address to receive payments for the requesting employee\\n     */\\n    function changeAddressByEmployee(address _newAccountAddress) external employeeMatches nonReentrant {\\n        uint256 employeeId = employeeIds[msg.sender];\\n        address oldAddress = employees[employeeId].accountAddress;\\n\\n        _setEmployeeAddress(employeeId, _newAccountAddress);\\n        // Don't delete the old address until after setting the new address to check that the\\n        // employee specified a new address\\n        delete employeeIds[oldAddress];\\n\\n        emit ChangeAddressByEmployee(employeeId, _newAccountAddress, oldAddress);\\n    }\\n\\n    /**\\n     * @notice Set the token distribution for your payments\\n     * @dev Initialization check is implicitly provided by `employeeMatches` as new employees can\\n     *      only be added via `addEmployee(),` which requires initialization.\\n     *      As the employee is allowed to call this, we enforce non-reentrancy.\\n     * @param _tokens Array of token addresses; they must belong to the list of allowed tokens\\n     * @param _distribution Array with each token's corresponding proportions (must be integers summing to 100)\\n     */\\n    function determineAllocation(address[] _tokens, uint256[] _distribution) external employeeMatches nonReentrant {\\n        // Check array lengthes match\\n        require(_tokens.length <= MAX_ALLOWED_TOKENS, ERROR_MAX_ALLOWED_TOKENS);\\n        require(_tokens.length == _distribution.length, ERROR_TOKEN_ALLOCATION_MISMATCH);\\n\\n        uint256 employeeId = employeeIds[msg.sender];\\n        Employee storage employee = employees[employeeId];\\n\\n        // Delete previous token allocations\\n        address[] memory previousAllowedTokenAddresses = employee.allocationTokenAddresses;\\n        for (uint256 j = 0; j < previousAllowedTokenAddresses.length; j++) {\\n            delete employee.allocationTokens[previousAllowedTokenAddresses[j]];\\n        }\\n        delete employee.allocationTokenAddresses;\\n\\n        // Set distributions only if given tokens are allowed\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            employee.allocationTokenAddresses.push(_tokens[i]);\\n            employee.allocationTokens[_tokens[i]] = _distribution[i];\\n        }\\n\\n        _ensureEmployeeTokenAllocationsIsValid(employee);\\n        emit DetermineAllocation(employeeId);\\n    }\\n\\n    /**\\n     * @notice Request your `_type == 0 ? 'salary' : _type == 1 ? 'reimbursements' : 'bonus'`\\n     * @dev Reverts if no payments were made.\\n     *      Initialization check is implicitly provided by `employeeMatches` as new employees can\\n     *      only be added via `addEmployee(),` which requires initialization.\\n     *      As the employee is allowed to call this, we enforce non-reentrancy.\\n     * @param _type Payment type being requested (Payroll, Reimbursement or Bonus)\\n     * @param _requestedAmount Requested amount to pay for the payment type. Must be less than or equal to total owed amount for the payment type, or zero to request all.\\n     * @param _minRates Array of employee's minimum acceptable rates for their allowed payment tokens\\n     */\\n    function payday(PaymentType _type, uint256 _requestedAmount, uint256[] _minRates) external employeeMatches nonReentrant {\\n        uint256 paymentAmount;\\n        uint256 employeeId = employeeIds[msg.sender];\\n        Employee storage employee = employees[employeeId];\\n        _ensureEmployeeTokenAllocationsIsValid(employee);\\n        require(_minRates.length == 0 || _minRates.length == employee.allocationTokenAddresses.length, ERROR_MIN_RATES_MISMATCH);\\n\\n        // Do internal employee accounting\\n        if (_type == PaymentType.Payroll) {\\n            // Salary is capped here to avoid reverting at this point if it becomes too big\\n            // (so employees aren't DDOSed if their salaries get too large)\\n            // If we do use a capped value, the employee's lastPayroll date will be adjusted accordingly\\n            uint256 totalOwedSalary = _getTotalOwedCappedSalary(employee);\\n            paymentAmount = _ensurePaymentAmount(totalOwedSalary, _requestedAmount);\\n            _updateEmployeeAccountingBasedOnPaidSalary(employee, paymentAmount);\\n        } else if (_type == PaymentType.Reimbursement) {\\n            uint256 owedReimbursements = employee.reimbursements;\\n            paymentAmount = _ensurePaymentAmount(owedReimbursements, _requestedAmount);\\n            employee.reimbursements = owedReimbursements.sub(paymentAmount);\\n        } else if (_type == PaymentType.Bonus) {\\n            uint256 owedBonusAmount = employee.bonus;\\n            paymentAmount = _ensurePaymentAmount(owedBonusAmount, _requestedAmount);\\n            employee.bonus = owedBonusAmount.sub(paymentAmount);\\n        } else {\\n            revert(ERROR_INVALID_PAYMENT_TYPE);\\n        }\\n\\n        // Actually transfer the owed funds\\n        require(_transferTokensAmount(employeeId, _type, paymentAmount, _minRates), ERROR_NOTHING_PAID);\\n        _removeEmployeeIfTerminatedAndPaidOut(employeeId);\\n    }\\n\\n    // Forwarding fns\\n\\n    /**\\n     * @dev IForwarder interface conformance. Tells whether the Payroll app is a forwarder or not.\\n     * @return Always true\\n     */\\n    function isForwarder() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Execute desired action as an active employee\\n     * @dev IForwarder interface conformance. Allows active employees to run EVMScripts in the context of the Payroll app.\\n     * @param _evmScript Script being executed\\n     */\\n    function forward(bytes _evmScript) public {\\n        require(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);\\n        bytes memory input = new bytes(0); // TODO: Consider input for this\\n\\n        // Add the Finance app to the blacklist to disallow employees from executing actions on the\\n        // Finance app from Payroll's context (since Payroll requires permissions on Finance)\\n        address[] memory blacklist = new address[](1);\\n        blacklist[0] = address(finance);\\n\\n        runScript(_evmScript, input, blacklist);\\n    }\\n\\n    /**\\n     * @dev IForwarder interface conformance. Tells whether a given address can forward actions or not.\\n     * @param _sender Address of the account intending to forward an action\\n     * @return True if the given address is an active employee, false otherwise\\n     */\\n    function canForward(address _sender, bytes) public view returns (bool) {\\n        return _isEmployeeIdActive(employeeIds[_sender]);\\n    }\\n\\n    // Getter fns\\n\\n    /**\\n     * @dev Return employee's identifier by their account address\\n     * @param _accountAddress Employee's address to receive payments\\n     * @return Employee's identifier\\n     */\\n    function getEmployeeIdByAddress(address _accountAddress) public view returns (uint256) {\\n        require(employeeIds[_accountAddress] != uint256(0), ERROR_EMPLOYEE_DOESNT_EXIST);\\n        return employeeIds[_accountAddress];\\n    }\\n\\n    /**\\n     * @dev Return all information for employee by their ID\\n     * @param _employeeId Employee's identifier\\n     * @return Employee's address to receive payments\\n     * @return Employee's salary, per second in denomination token\\n     * @return Employee's accrued salary\\n     * @return Employee's bonus amount\\n     * @return Employee's reimbursements amount\\n     * @return Employee's last payment date\\n     * @return Employee's termination date (max uint64 if none)\\n     * @return Employee's allowed payment tokens\\n     */\\n    function getEmployee(uint256 _employeeId)\\n        public\\n        view\\n        employeeIdExists(_employeeId)\\n        returns (\\n            address accountAddress,\\n            uint256 denominationSalary,\\n            uint256 accruedSalary,\\n            uint256 bonus,\\n            uint256 reimbursements,\\n            uint64 lastPayroll,\\n            uint64 endDate,\\n            address[] allocationTokens\\n        )\\n    {\\n        Employee storage employee = employees[_employeeId];\\n\\n        accountAddress = employee.accountAddress;\\n        denominationSalary = employee.denominationTokenSalary;\\n        accruedSalary = employee.accruedSalary;\\n        bonus = employee.bonus;\\n        reimbursements = employee.reimbursements;\\n        lastPayroll = employee.lastPayroll;\\n        endDate = employee.endDate;\\n        allocationTokens = employee.allocationTokenAddresses;\\n    }\\n\\n    /**\\n     * @dev Get owed salary since last payroll for an employee. It will take into account the accrued salary as well.\\n     *      The result will be capped to max uint256 to avoid having an overflow.\\n     * @return Employee's total owed salary: current owed payroll since the last payroll date, plus the accrued salary.\\n     */\\n    function getTotalOwedSalary(uint256 _employeeId) public view employeeIdExists(_employeeId) returns (uint256) {\\n        return _getTotalOwedCappedSalary(employees[_employeeId]);\\n    }\\n\\n    /**\\n     * @dev Get an employee's payment allocation for a token\\n     * @param _employeeId Employee's identifier\\n     * @param _token Token to query the payment allocation for\\n     * @return Employee's payment allocation for the token being queried\\n     */\\n    function getAllocation(uint256 _employeeId, address _token) public view employeeIdExists(_employeeId) returns (uint256) {\\n        return employees[_employeeId].allocationTokens[_token];\\n    }\\n\\n    /**\\n     * @dev Check if a token is allowed to be used for payments\\n     * @param _token Address of the token to be checked\\n     * @return True if the given token is allowed, false otherwise\\n     */\\n    function isTokenAllowed(address _token) public view isInitialized returns (bool) {\\n        return allowedTokens[_token];\\n    }\\n\\n    // Internal fns\\n\\n    /**\\n     * @dev Set the price feed used for exchange rates\\n     * @param _feed Address of the new price feed instance\\n     */\\n    function _setPriceFeed(IFeed _feed) internal {\\n        require(isContract(_feed), ERROR_FEED_NOT_CONTRACT);\\n        feed = _feed;\\n        emit SetPriceFeed(feed);\\n    }\\n\\n    /**\\n     * @dev Set the exchange rate expiry time in seconds.\\n     *      Exchange rates older than the given value won't be accepted for payments and will cause\\n     *      payouts to revert.\\n     * @param _time The expiration time in seconds for exchange rates\\n     */\\n    function _setRateExpiryTime(uint64 _time) internal {\\n        // Require a sane minimum for the rate expiry time\\n        require(_time >= MIN_RATE_EXPIRY, ERROR_EXPIRY_TIME_TOO_SHORT);\\n        rateExpiryTime = _time;\\n        emit SetRateExpiryTime(rateExpiryTime);\\n    }\\n\\n    /**\\n     * @dev Add a new employee to Payroll\\n     * @param _accountAddress Employee's address to receive payroll\\n     * @param _initialDenominationSalary Employee's salary, per second in denomination token\\n     * @param _startDate Employee's starting timestamp in seconds\\n     * @param _role Employee's role\\n     */\\n    function _addEmployee(address _accountAddress, uint256 _initialDenominationSalary, uint64 _startDate, string _role) internal {\\n        uint256 employeeId = nextEmployee++;\\n\\n        _setEmployeeAddress(employeeId, _accountAddress);\\n\\n        Employee storage employee = employees[employeeId];\\n        employee.denominationTokenSalary = _initialDenominationSalary;\\n        employee.lastPayroll = _startDate;\\n        employee.endDate = MAX_UINT64;\\n\\n        emit AddEmployee(employeeId, _accountAddress, _initialDenominationSalary, _startDate, _role);\\n    }\\n\\n    /**\\n     * @dev Add amount to an employee's bonuses\\n     * @param _employeeId Employee's identifier\\n     * @param _amount Amount be added to the employee's bonuses in denomination token\\n     */\\n    function _addBonus(uint256 _employeeId, uint256 _amount) internal {\\n        Employee storage employee = employees[_employeeId];\\n        employee.bonus = employee.bonus.add(_amount);\\n        emit AddEmployeeBonus(_employeeId, _amount);\\n    }\\n\\n    /**\\n     * @dev Add amount to an employee's reimbursements\\n     * @param _employeeId Employee's identifier\\n     * @param _amount Amount be added to the employee's reimbursements in denomination token\\n     */\\n    function _addReimbursement(uint256 _employeeId, uint256 _amount) internal {\\n        Employee storage employee = employees[_employeeId];\\n        employee.reimbursements = employee.reimbursements.add(_amount);\\n        emit AddEmployeeReimbursement(_employeeId, _amount);\\n    }\\n\\n    /**\\n     * @dev Add amount to an employee's accrued salary\\n     * @param _employeeId Employee's identifier\\n     * @param _amount Amount be added to the employee's accrued salary in denomination token\\n     */\\n    function _addAccruedSalary(uint256 _employeeId, uint256 _amount) internal {\\n        Employee storage employee = employees[_employeeId];\\n        employee.accruedSalary = employee.accruedSalary.add(_amount);\\n        emit AddEmployeeAccruedSalary(_employeeId, _amount);\\n    }\\n\\n    /**\\n     * @dev Set an employee's account address\\n     * @param _employeeId Employee's identifier\\n     * @param _accountAddress Employee's address to receive payroll\\n     */\\n    function _setEmployeeAddress(uint256 _employeeId, address _accountAddress) internal {\\n        // Check address is non-null\\n        require(_accountAddress != address(0), ERROR_EMPLOYEE_NULL_ADDRESS);\\n        // Check address isn't already being used\\n        require(employeeIds[_accountAddress] == uint256(0), ERROR_EMPLOYEE_ALREADY_EXIST);\\n\\n        employees[_employeeId].accountAddress = _accountAddress;\\n\\n        // Create IDs mapping\\n        employeeIds[_accountAddress] = _employeeId;\\n    }\\n\\n    /**\\n     * @dev Terminate employee on end date\\n     * @param _employeeId Employee's identifier\\n     * @param _endDate Termination timestamp in seconds\\n     */\\n    function _terminateEmployee(uint256 _employeeId, uint64 _endDate) internal {\\n        // Prevent past termination dates\\n        require(_endDate >= getTimestamp64(), ERROR_PAST_TERMINATION_DATE);\\n        employees[_employeeId].endDate = _endDate;\\n        emit TerminateEmployee(_employeeId, _endDate);\\n    }\\n\\n    /**\\n     * @dev Loop over allowed tokens to send requested amount to the employee in their desired allocation\\n     * @param _employeeId Employee's identifier\\n     * @param _totalAmount Total amount to be transferred to the employee distributed in accordance to the employee's token allocation.\\n     * @param _type Payment type being transferred (Payroll, Reimbursement or Bonus)\\n     * @param _minRates Array of employee's minimum acceptable rates for their allowed payment tokens\\n     * @return True if there was at least one token transfer\\n     */\\n    function _transferTokensAmount(uint256 _employeeId, PaymentType _type, uint256 _totalAmount, uint256[] _minRates) internal returns (bool somethingPaid) {\\n        if (_totalAmount == 0) {\\n            return false;\\n        }\\n\\n        Employee storage employee = employees[_employeeId];\\n        address employeeAddress = employee.accountAddress;\\n        string memory paymentReference = _paymentReferenceFor(_type);\\n\\n        address[] storage allocationTokenAddresses = employee.allocationTokenAddresses;\\n        for (uint256 i = 0; i < allocationTokenAddresses.length; i++) {\\n            address token = allocationTokenAddresses[i];\\n            uint256 tokenAllocation = employee.allocationTokens[token];\\n            if (tokenAllocation != uint256(0)) {\\n                // Get the exchange rate for the payout token in denomination token,\\n                // as we do accounting in denomination tokens\\n                uint256 exchangeRate = _getExchangeRateInDenominationToken(token);\\n                require(_minRates.length > 0 ? exchangeRate >= _minRates[i] : exchangeRate > 0, ERROR_EXCHANGE_RATE_TOO_LOW);\\n\\n                // Convert amount (in denomination tokens) to payout token and apply allocation\\n                uint256 tokenAmount = _totalAmount.mul(exchangeRate).mul(tokenAllocation);\\n                // Divide by 100 for the allocation percentage and by the exchange rate precision\\n                tokenAmount = tokenAmount.div(100).div(feed.ratePrecision());\\n\\n                // Finance reverts if the payment wasn't possible\\n                finance.newImmediatePayment(token, employeeAddress, tokenAmount, paymentReference);\\n                emit SendPayment(_employeeId, employeeAddress, token, tokenAmount, exchangeRate, paymentReference);\\n                somethingPaid = true;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Remove employee if there are no owed funds and employee's end date has been reached\\n     * @param _employeeId Employee's identifier\\n     */\\n    function _removeEmployeeIfTerminatedAndPaidOut(uint256 _employeeId) internal {\\n        Employee storage employee = employees[_employeeId];\\n\\n        if (\\n            employee.lastPayroll == employee.endDate &&\\n            (employee.accruedSalary == 0 && employee.bonus == 0 && employee.reimbursements == 0)\\n        ) {\\n            delete employeeIds[employee.accountAddress];\\n            delete employees[_employeeId];\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates the accrued salary and payroll date of an employee based on a payment amount and\\n     *      their currently owed salary since last payroll date\\n     * @param _employee Employee struct in storage\\n     * @param _paymentAmount Amount being paid to the employee\\n     */\\n    function _updateEmployeeAccountingBasedOnPaidSalary(Employee storage _employee, uint256 _paymentAmount) internal {\\n        uint256 accruedSalary = _employee.accruedSalary;\\n\\n        if (_paymentAmount <= accruedSalary) {\\n            // Employee is only cashing out some previously owed salary so we don't need to update\\n            // their last payroll date\\n            // No need to use SafeMath as we already know _paymentAmount <= accruedSalary\\n            _employee.accruedSalary = accruedSalary - _paymentAmount;\\n            return;\\n        }\\n\\n        // Employee is cashing out some of their currently owed salary so their last payroll date\\n        // needs to be modified based on the amount of salary paid\\n        uint256 currentSalaryPaid = _paymentAmount;\\n        if (accruedSalary > 0) {\\n            // Employee is cashing out a mixed amount between previous and current owed salaries;\\n            // first use up their accrued salary\\n            // No need to use SafeMath here as we already know _paymentAmount > accruedSalary\\n            currentSalaryPaid = _paymentAmount - accruedSalary;\\n            // We finally need to clear their accrued salary\\n            _employee.accruedSalary = 0;\\n        }\\n\\n        uint256 salary = _employee.denominationTokenSalary;\\n        uint256 timeDiff = currentSalaryPaid.div(salary);\\n\\n        // If they're being paid an amount that doesn't match perfectly with the adjusted time\\n        // (up to a seconds' worth of salary), add the second and put the extra remaining salary\\n        // into their accrued salary\\n        uint256 extraSalary = currentSalaryPaid % salary;\\n        if (extraSalary > 0) {\\n            timeDiff = timeDiff.add(1);\\n            _employee.accruedSalary = salary - extraSalary;\\n        }\\n\\n        uint256 lastPayrollDate = uint256(_employee.lastPayroll).add(timeDiff);\\n        // Even though this function should never receive a currentSalaryPaid value that would\\n        // result in the lastPayrollDate being higher than the current time,\\n        // let's double check to be safe\\n        require(lastPayrollDate <= uint256(getTimestamp64()), ERROR_LAST_PAYROLL_DATE_TOO_BIG);\\n        // Already know lastPayrollDate must fit in uint64 from above\\n        _employee.lastPayroll = uint64(lastPayrollDate);\\n    }\\n\\n    /**\\n     * @dev Tell whether an employee is registered in this Payroll or not\\n     * @param _employeeId Employee's identifier\\n     * @return True if the given employee ID belongs to an registered employee, false otherwise\\n     */\\n    function _employeeExists(uint256 _employeeId) internal view returns (bool) {\\n        return employees[_employeeId].accountAddress != address(0);\\n    }\\n\\n    /**\\n     * @dev Tell whether an employee has a valid token allocation or not.\\n     *      A valid allocation is one that sums to 100 and only includes allowed tokens.\\n     * @param _employee Employee struct in storage\\n     * @return Reverts if employee's allocation is invalid\\n     */\\n    function _ensureEmployeeTokenAllocationsIsValid(Employee storage _employee) internal view {\\n        uint256 sum = 0;\\n        address[] memory allocationTokenAddresses = _employee.allocationTokenAddresses;\\n        for (uint256 i = 0; i < allocationTokenAddresses.length; i++) {\\n            address token = allocationTokenAddresses[i];\\n            require(allowedTokens[token], ERROR_NOT_ALLOWED_TOKEN);\\n            sum = sum.add(_employee.allocationTokens[token]);\\n        }\\n        require(sum == 100, ERROR_DISTRIBUTION_NOT_FULL);\\n    }\\n\\n    /**\\n     * @dev Tell whether an employee is still active or not\\n     * @param _employee Employee struct in storage\\n     * @return True if the employee exists and has an end date that has not been reached yet, false otherwise\\n     */\\n    function _isEmployeeActive(Employee storage _employee) internal view returns (bool) {\\n        return _employee.endDate >= getTimestamp64();\\n    }\\n\\n    /**\\n     * @dev Tell whether an employee id is still active or not\\n     * @param _employeeId Employee's identifier\\n     * @return True if the employee exists and has an end date that has not been reached yet, false otherwise\\n     */\\n    function _isEmployeeIdActive(uint256 _employeeId) internal view returns (bool) {\\n        return _isEmployeeActive(employees[_employeeId]);\\n    }\\n\\n    /**\\n     * @dev Get exchange rate for a token based on the denomination token.\\n     *      As an example, if the denomination token was USD and ETH's price was 100USD,\\n     *      this would return 0.01 * precision rate for ETH.\\n     * @param _token Token to get price of in denomination tokens\\n     * @return Exchange rate (multiplied by the PPF rate precision)\\n     */\\n    function _getExchangeRateInDenominationToken(address _token) internal view returns (uint256) {\\n        // xrt is the number of `_token` that can be exchanged for one `denominationToken`\\n        (uint128 xrt, uint64 when) = feed.get(\\n            denominationToken,  // Base (e.g. USD)\\n            _token              // Quote (e.g. ETH)\\n        );\\n\\n        // Check the price feed is recent enough\\n        if (getTimestamp64().sub(when) >= rateExpiryTime) {\\n            return 0;\\n        }\\n\\n        return uint256(xrt);\\n    }\\n\\n    /**\\n     * @dev Get owed salary since last payroll for an employee\\n     * @param _employee Employee struct in storage\\n     * @param _capped Safely cap the owed salary at max uint\\n     * @return Owed salary in denomination tokens since last payroll for the employee.\\n     *         If _capped is false, it reverts in case of an overflow.\\n     */\\n    function _getOwedSalarySinceLastPayroll(Employee storage _employee, bool _capped) internal view returns (uint256) {\\n        uint256 timeDiff = _getOwedPayrollPeriod(_employee);\\n        if (timeDiff == 0) {\\n            return 0;\\n        }\\n        uint256 salary = _employee.denominationTokenSalary;\\n\\n        if (_capped) {\\n            // Return max uint if the result overflows\\n            uint256 result = salary * timeDiff;\\n            return (result / timeDiff != salary) ? MAX_UINT256 : result;\\n        } else {\\n            return salary.mul(timeDiff);\\n        }\\n    }\\n\\n    /**\\n     * @dev Get owed payroll period for an employee\\n     * @param _employee Employee struct in storage\\n     * @return Owed time in seconds since the employee's last payroll date\\n     */\\n    function _getOwedPayrollPeriod(Employee storage _employee) internal view returns (uint256) {\\n        // Get the min of current date and termination date\\n        uint64 date = _isEmployeeActive(_employee) ? getTimestamp64() : _employee.endDate;\\n\\n        // Make sure we don't revert if we try to get the owed salary for an employee whose last\\n        // payroll date is now or in the future\\n        // This can happen either by adding new employees with start dates in the future, to allow\\n        // us to change their salary before their start date, or by terminating an employee and\\n        // paying out their full owed salary\\n        if (date <= _employee.lastPayroll) {\\n            return 0;\\n        }\\n\\n        // Return time diff in seconds, no need to use SafeMath as the underflow was covered by the previous check\\n        return uint256(date - _employee.lastPayroll);\\n    }\\n\\n    /**\\n     * @dev Get owed salary since last payroll for an employee. It will take into account the accrued salary as well.\\n     *      The result will be capped to max uint256 to avoid having an overflow.\\n     * @param _employee Employee struct in storage\\n     * @return Employee's total owed salary: current owed payroll since the last payroll date, plus the accrued salary.\\n     */\\n    function _getTotalOwedCappedSalary(Employee storage _employee) internal view returns (uint256) {\\n        uint256 currentOwedSalary = _getOwedSalarySinceLastPayroll(_employee, true); // cap amount\\n        uint256 totalOwedSalary = currentOwedSalary + _employee.accruedSalary;\\n        if (totalOwedSalary < currentOwedSalary) {\\n            totalOwedSalary = MAX_UINT256;\\n        }\\n        return totalOwedSalary;\\n    }\\n\\n    /**\\n     * @dev Get payment reference for a given payment type\\n     * @param _type Payment type to query the reference of\\n     * @return Payment reference for the given payment type\\n     */\\n    function _paymentReferenceFor(PaymentType _type) internal pure returns (string memory) {\\n        if (_type == PaymentType.Payroll) {\\n            return \\\"Employee salary\\\";\\n        } else if (_type == PaymentType.Reimbursement) {\\n            return \\\"Employee reimbursement\\\";\\n        } if (_type == PaymentType.Bonus) {\\n            return \\\"Employee bonus\\\";\\n        }\\n        revert(ERROR_INVALID_PAYMENT_TYPE);\\n    }\\n\\n    function _ensurePaymentAmount(uint256 _owedAmount, uint256 _requestedAmount) private pure returns (uint256) {\\n        require(_owedAmount > 0, ERROR_NOTHING_PAID);\\n        require(_owedAmount >= _requestedAmount, ERROR_INVALID_REQUESTED_AMOUNT);\\n        return _requestedAmount > 0 ? _requestedAmount : _owedAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xd47a22903b2f0159b7002e3105d716311f8cb209e26c80c1ae26dc40c3ecebad\"},\"@aragon/apps-shared-minime/contracts/ITokenController.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n/// @dev The token controller contract must implement these functions\\n\\n\\ninterface ITokenController {\\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\\n    /// @param _owner The address that sent the ether to create tokens\\n    /// @return True if the ether is accepted, false if it throws\\n    function proxyPayment(address _owner) external payable returns(bool);\\n\\n    /// @notice Notifies the controller about a token transfer allowing the\\n    ///  controller to react if desired\\n    /// @param _from The origin of the transfer\\n    /// @param _to The destination of the transfer\\n    /// @param _amount The amount of the transfer\\n    /// @return False if the controller does not authorize the transfer\\n    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\\n\\n    /// @notice Notifies the controller about an approval allowing the\\n    ///  controller to react if desired\\n    /// @param _owner The address that calls `approve()`\\n    /// @param _spender The spender in the `approve()` call\\n    /// @param _amount The amount in the `approve()` call\\n    /// @return False if the controller does not authorize the approval\\n    function onApprove(address _owner, address _spender, uint _amount) external returns(bool);\\n}\\n\",\"keccak256\":\"0x030d1ea5543fd23d3c962cbf34b1c3b6e15d9bbfb711416e1cf4160c3bcdccaa\"},\"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n/*\\n    Copyright 2016, Jordi Baylina\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title MiniMeToken Contract\\n/// @author Jordi Baylina\\n/// @dev This token contract's goal is to make it easy for anyone to clone this\\n///  token using the token distribution at a given block, this will allow DAO's\\n///  and DApps to upgrade their features in a decentralized manner without\\n///  affecting the original token\\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\\n\\nimport \\\"./ITokenController.sol\\\";\\n\\ncontract Controlled {\\n    /// @notice The address of the controller is the only address that can call\\n    ///  a function with this modifier\\n    modifier onlyController {\\n        require(msg.sender == controller);\\n        _;\\n    }\\n\\n    address public controller;\\n\\n    function Controlled()  public { controller = msg.sender;}\\n\\n    /// @notice Changes the controller of the contract\\n    /// @param _newController The new controller of the contract\\n    function changeController(address _newController) onlyController  public {\\n        controller = _newController;\\n    }\\n}\\n\\ncontract ApproveAndCallFallBack {\\n    function receiveApproval(\\n        address from,\\n        uint256 _amount,\\n        address _token,\\n        bytes _data\\n    ) public;\\n}\\n\\n/// @dev The actual token contract, the default controller is the msg.sender\\n///  that deploys the contract, so usually this token will be deployed by a\\n///  token controller contract, which Giveth will call a \\\"Campaign\\\"\\ncontract MiniMeToken is Controlled {\\n\\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\\n    uint8 public decimals;             //Number of decimals of the smallest unit\\n    string public symbol;              //An identifier: e.g. REP\\n    string public version = \\\"MMT_0.1\\\"; //An arbitrary versioning scheme\\n\\n\\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\\n    ///  given value, the block number attached is the one that last changed the\\n    ///  value\\n    struct Checkpoint {\\n\\n        // `fromBlock` is the block number that the value was generated from\\n        uint128 fromBlock;\\n\\n        // `value` is the amount of tokens at a specific block number\\n        uint128 value;\\n    }\\n\\n    // `parentToken` is the Token address that was cloned to produce this token;\\n    //  it will be 0x0 for a token that was not cloned\\n    MiniMeToken public parentToken;\\n\\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\\n    //  used to determine the initial distribution of the Clone Token\\n    uint public parentSnapShotBlock;\\n\\n    // `creationBlock` is the block number that the Clone Token was created\\n    uint public creationBlock;\\n\\n    // `balances` is the map that tracks the balance of each address, in this\\n    //  contract when the balance changes the block number that the change\\n    //  occurred is also included in the map\\n    mapping (address => Checkpoint[]) balances;\\n\\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\\n    mapping (address => mapping (address => uint256)) allowed;\\n\\n    // Tracks the history of the `totalSupply` of the token\\n    Checkpoint[] totalSupplyHistory;\\n\\n    // Flag that determines if the token is transferable or not.\\n    bool public transfersEnabled;\\n\\n    // The factory used to create new clone tokens\\n    MiniMeTokenFactory public tokenFactory;\\n\\n////////////////\\n// Constructor\\n////////////////\\n\\n    /// @notice Constructor to create a MiniMeToken\\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\\n    ///  will create the Clone token contracts, the token factory needs to be\\n    ///  deployed first\\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\\n    ///  new token\\n    /// @param _parentSnapShotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token, set to 0 if it\\n    ///  is a new token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    function MiniMeToken(\\n        MiniMeTokenFactory _tokenFactory,\\n        MiniMeToken _parentToken,\\n        uint _parentSnapShotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    )  public\\n    {\\n        tokenFactory = _tokenFactory;\\n        name = _tokenName;                                 // Set the name\\n        decimals = _decimalUnits;                          // Set the decimals\\n        symbol = _tokenSymbol;                             // Set the symbol\\n        parentToken = _parentToken;\\n        parentSnapShotBlock = _parentSnapShotBlock;\\n        transfersEnabled = _transfersEnabled;\\n        creationBlock = block.number;\\n    }\\n\\n\\n///////////////////\\n// ERC20 Methods\\n///////////////////\\n\\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n        return doTransfer(msg.sender, _to, _amount);\\n    }\\n\\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\\n    ///  is approved by `_from`\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\\n\\n        // The controller of this contract can move tokens around at will,\\n        //  this is important to recognize! Confirm that you trust the\\n        //  controller of this contract, which in most situations should be\\n        //  another open source smart contract or 0x0\\n        if (msg.sender != controller) {\\n            require(transfersEnabled);\\n\\n            // The standard ERC 20 transferFrom functionality\\n            if (allowed[_from][msg.sender] < _amount)\\n                return false;\\n            allowed[_from][msg.sender] -= _amount;\\n        }\\n        return doTransfer(_from, _to, _amount);\\n    }\\n\\n    /// @dev This is the actual transfer function in the token contract, it can\\n    ///  only be called by other functions in this contract.\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\\n        if (_amount == 0) {\\n            return true;\\n        }\\n        require(parentSnapShotBlock < block.number);\\n        // Do not allow transfer to 0x0 or the token contract itself\\n        require((_to != 0) && (_to != address(this)));\\n        // If the amount being transfered is more than the balance of the\\n        //  account the transfer returns false\\n        var previousBalanceFrom = balanceOfAt(_from, block.number);\\n        if (previousBalanceFrom < _amount) {\\n            return false;\\n        }\\n        // Alerts the token controller of the transfer\\n        if (isContract(controller)) {\\n            // Adding the ` == true` makes the linter shut up so...\\n            require(ITokenController(controller).onTransfer(_from, _to, _amount) == true);\\n        }\\n        // First update the balance array with the new value for the address\\n        //  sending the tokens\\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\\n        // Then update the balance array with the new value for the address\\n        //  receiving the tokens\\n        var previousBalanceTo = balanceOfAt(_to, block.number);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\\n        // An event to make the transfer easy to find on the blockchain\\n        Transfer(_from, _to, _amount);\\n        return true;\\n    }\\n\\n    /// @param _owner The address that's balance is being requested\\n    /// @return The balance of `_owner` at the current block\\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\\n        return balanceOfAt(_owner, block.number);\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\\n    ///  its behalf. This is a modified version of the ERC20 approve function\\n    ///  to be a little bit safer\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the approval was successful\\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\\n\\n        // Alerts the token controller of the approve function call\\n        if (isContract(controller)) {\\n            // Adding the ` == true` makes the linter shut up so...\\n            require(ITokenController(controller).onApprove(msg.sender, _spender, _amount) == true);\\n        }\\n\\n        allowed[msg.sender][_spender] = _amount;\\n        Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to read the `allowed[]` map\\n    /// @param _owner The address of the account that owns the token\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\\n    ///  to spend\\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\\n    ///  its behalf, and then a function is triggered in the contract that is\\n    ///  being approved, `_spender`. This allows users to use their tokens to\\n    ///  interact with contracts in one function call instead of two\\n    /// @param _spender The address of the contract able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the function call was successful\\n    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\\n        require(approve(_spender, _amount));\\n\\n        _spender.receiveApproval(\\n            msg.sender,\\n            _amount,\\n            this,\\n            _extraData\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to get the total number of tokens\\n    /// @return The total number of tokens\\n    function totalSupply() public constant returns (uint) {\\n        return totalSupplyAt(block.number);\\n    }\\n\\n\\n////////////////\\n// Query balance and totalSupply in History\\n////////////////\\n\\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @param _blockNumber The block number when the balance is queried\\n    /// @return The balance at `_blockNumber`\\n    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {\\n\\n        // These next few lines are used when the balance of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.balanceOfAt` be queried at the\\n        //  genesis block for that token as this contains initial balance of\\n        //  this token\\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                // Has no parent\\n                return 0;\\n            }\\n\\n        // This will return the expected balance during normal situations\\n        } else {\\n            return getValueAt(balances[_owner], _blockNumber);\\n        }\\n    }\\n\\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\\n    /// @param _blockNumber The block number when the totalSupply is queried\\n    /// @return The total amount of tokens at `_blockNumber`\\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\\n\\n        // These next few lines are used when the totalSupply of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\\n        //  genesis block for this token as that contains totalSupply of this\\n        //  token at this block number.\\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                return 0;\\n            }\\n\\n        // This will return the expected totalSupply during normal situations\\n        } else {\\n            return getValueAt(totalSupplyHistory, _blockNumber);\\n        }\\n    }\\n\\n////////////////\\n// Clone Token Method\\n////////////////\\n\\n    /// @notice Creates a new clone token with the initial distribution being\\n    ///  this token at `_snapshotBlock`\\n    /// @param _cloneTokenName Name of the clone token\\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\\n    /// @param _cloneTokenSymbol Symbol of the clone token\\n    /// @param _snapshotBlock Block when the distribution of the parent token is\\n    ///  copied to set the initial distribution of the new clone token;\\n    ///  if the block is zero than the actual block, the current block is used\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    /// @return The address of the new MiniMeToken Contract\\n    function createCloneToken(\\n        string _cloneTokenName,\\n        uint8 _cloneDecimalUnits,\\n        string _cloneTokenSymbol,\\n        uint _snapshotBlock,\\n        bool _transfersEnabled\\n    ) public returns(MiniMeToken)\\n    {\\n        uint256 snapshot = _snapshotBlock == 0 ? block.number - 1 : _snapshotBlock;\\n\\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\\n            this,\\n            snapshot,\\n            _cloneTokenName,\\n            _cloneDecimalUnits,\\n            _cloneTokenSymbol,\\n            _transfersEnabled\\n        );\\n\\n        cloneToken.changeController(msg.sender);\\n\\n        // An event to make the token easy to find on the blockchain\\n        NewCloneToken(address(cloneToken), snapshot);\\n        return cloneToken;\\n    }\\n\\n////////////////\\n// Generate and destroy tokens\\n////////////////\\n\\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\\n    /// @param _owner The address that will be assigned the new tokens\\n    /// @param _amount The quantity of tokens generated\\n    /// @return True if the tokens are generated correctly\\n    function generateTokens(address _owner, uint _amount) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\\n        uint previousBalanceTo = balanceOf(_owner);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\\n        Transfer(0, _owner, _amount);\\n        return true;\\n    }\\n\\n\\n    /// @notice Burns `_amount` tokens from `_owner`\\n    /// @param _owner The address that will lose the tokens\\n    /// @param _amount The quantity of tokens to burn\\n    /// @return True if the tokens are burned correctly\\n    function destroyTokens(address _owner, uint _amount) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply >= _amount);\\n        uint previousBalanceFrom = balanceOf(_owner);\\n        require(previousBalanceFrom >= _amount);\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\\n        Transfer(_owner, 0, _amount);\\n        return true;\\n    }\\n\\n////////////////\\n// Enable tokens transfers\\n////////////////\\n\\n\\n    /// @notice Enables token holders to transfer their tokens freely if true\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    function enableTransfers(bool _transfersEnabled) onlyController public {\\n        transfersEnabled = _transfersEnabled;\\n    }\\n\\n////////////////\\n// Internal helper functions to query and set a value in a snapshot array\\n////////////////\\n\\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\\n    /// @param checkpoints The history of values being queried\\n    /// @param _block The block number to retrieve the value at\\n    /// @return The number of tokens being queried\\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) {\\n        if (checkpoints.length == 0)\\n            return 0;\\n\\n        // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock)\\n            return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1) / 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\\n    ///  `totalSupplyHistory`\\n    /// @param checkpoints The history of data being updated\\n    /// @param _value The new number of tokens\\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\\n            newCheckPoint.fromBlock = uint128(block.number);\\n            newCheckPoint.value = uint128(_value);\\n        } else {\\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\\n            oldCheckPoint.value = uint128(_value);\\n        }\\n    }\\n\\n    /// @dev Internal function to determine if an address is a contract\\n    /// @param _addr The address being queried\\n    /// @return True if `_addr` is a contract\\n    function isContract(address _addr) constant internal returns(bool) {\\n        uint size;\\n        if (_addr == 0)\\n            return false;\\n\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n\\n        return size>0;\\n    }\\n\\n    /// @dev Helper function to return a min betwen the two uints\\n    function min(uint a, uint b) pure internal returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice The fallback function: If the contract's controller has not been\\n    ///  set to 0, then the `proxyPayment` method is called which relays the\\n    ///  ether and creates tokens as described in the token controller contract\\n    function () external payable {\\n        require(isContract(controller));\\n        // Adding the ` == true` makes the linter shut up so...\\n        require(ITokenController(controller).proxyPayment.value(msg.value)(msg.sender) == true);\\n    }\\n\\n//////////\\n// Safety Methods\\n//////////\\n\\n    /// @notice This method can be used by the controller to extract mistakenly\\n    ///  sent tokens to this contract.\\n    /// @param _token The address of the token contract that you want to recover\\n    ///  set to 0 in case you want to extract ether.\\n    function claimTokens(address _token) onlyController public {\\n        if (_token == 0x0) {\\n            controller.transfer(this.balance);\\n            return;\\n        }\\n\\n        MiniMeToken token = MiniMeToken(_token);\\n        uint balance = token.balanceOf(this);\\n        token.transfer(controller, balance);\\n        ClaimedTokens(_token, controller, balance);\\n    }\\n\\n////////////////\\n// Events\\n////////////////\\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _amount\\n        );\\n\\n}\\n\\n\\n////////////////\\n// MiniMeTokenFactory\\n////////////////\\n\\n/// @dev This contract is used to generate clone contracts from a contract.\\n///  In solidity this is the way to create a contract from a contract of the\\n///  same class\\ncontract MiniMeTokenFactory {\\n\\n    /// @notice Update the DApp by creating a new token with new functionalities\\n    ///  the msg.sender becomes the controller of this clone token\\n    /// @param _parentToken Address of the token being cloned\\n    /// @param _snapshotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    /// @return The address of the new token contract\\n    function createCloneToken(\\n        MiniMeToken _parentToken,\\n        uint _snapshotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public returns (MiniMeToken)\\n    {\\n        MiniMeToken newToken = new MiniMeToken(\\n            this,\\n            _parentToken,\\n            _snapshotBlock,\\n            _tokenName,\\n            _decimalUnits,\\n            _tokenSymbol,\\n            _transfersEnabled\\n        );\\n\\n        newToken.changeController(msg.sender);\\n        return newToken;\\n    }\\n}\",\"keccak256\":\"0xae8693d9ccee144cfd4949f87d0994d12e7d232b0b39d3f2f72a7b5c1e54800c\"},\"@aragon/apps-survey/contracts/Survey.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    GPL-3.0-or-later\\n */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\n\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath64.sol\\\";\\n\\nimport \\\"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\\\";\\n\\n\\ncontract Survey is AragonApp {\\n    using SafeMath for uint256;\\n    using SafeMath64 for uint64;\\n\\n    bytes32 public constant CREATE_SURVEYS_ROLE = keccak256(\\\"CREATE_SURVEYS_ROLE\\\");\\n    bytes32 public constant MODIFY_PARTICIPATION_ROLE = keccak256(\\\"MODIFY_PARTICIPATION_ROLE\\\");\\n\\n    uint64 public constant PCT_BASE = 10 ** 18; // 0% = 0; 1% = 10^16; 100% = 10^18\\n    uint256 public constant ABSTAIN_VOTE = 0;\\n\\n    string private constant ERROR_MIN_PARTICIPATION = \\\"SURVEY_MIN_PARTICIPATION\\\";\\n    string private constant ERROR_NO_SURVEY = \\\"SURVEY_NO_SURVEY\\\";\\n    string private constant ERROR_NO_VOTING_POWER = \\\"SURVEY_NO_VOTING_POWER\\\";\\n    string private constant ERROR_CAN_NOT_VOTE = \\\"SURVEY_CAN_NOT_VOTE\\\";\\n    string private constant ERROR_VOTE_WRONG_INPUT = \\\"SURVEY_VOTE_WRONG_INPUT\\\";\\n    string private constant ERROR_VOTE_WRONG_OPTION = \\\"SURVEY_VOTE_WRONG_OPTION\\\";\\n    string private constant ERROR_NO_STAKE = \\\"SURVEY_NO_STAKE\\\";\\n    string private constant ERROR_OPTIONS_NOT_ORDERED = \\\"SURVEY_OPTIONS_NOT_ORDERED\\\";\\n    string private constant ERROR_NO_OPTION = \\\"SURVEY_NO_OPTION\\\";\\n\\n    struct OptionCast {\\n        uint256 optionId;\\n        uint256 stake;\\n    }\\n\\n    /* Allows for multiple option votes.\\n     * Index 0 is always used for the ABSTAIN_VOTE option, that's calculated automatically by the\\n     * contract.\\n     */\\n    struct MultiOptionVote {\\n        uint256 optionsCastedLength;\\n        // `castedVotes` simulates an array\\n        // Each OptionCast in `castedVotes` must be ordered by ascending option IDs\\n        mapping (uint256 => OptionCast) castedVotes;\\n    }\\n\\n    struct SurveyStruct {\\n        uint64 startDate;\\n        uint64 snapshotBlock;\\n        uint64 minParticipationPct;\\n        uint256 options;\\n        uint256 votingPower;                    // total tokens that can cast a vote\\n        uint256 participation;                  // tokens that casted a vote\\n\\n        // Note that option IDs are from 1 to `options`, due to ABSTAIN_VOTE taking 0\\n        mapping (uint256 => uint256) optionPower;       // option ID -> voting power for option\\n        mapping (address => MultiOptionVote) votes;     // voter -> options voted, with its stakes\\n    }\\n\\n    MiniMeToken public token;\\n    uint64 public minParticipationPct;\\n    uint64 public surveyTime;\\n\\n    // We are mimicing an array, we use a mapping instead to make app upgrade more graceful\\n    mapping (uint256 => SurveyStruct) internal surveys;\\n    uint256 public surveysLength;\\n\\n    event StartSurvey(uint256 indexed surveyId, address indexed creator, string metadata);\\n    event CastVote(uint256 indexed surveyId, address indexed voter, uint256 option, uint256 stake, uint256 optionPower);\\n    event ResetVote(uint256 indexed surveyId, address indexed voter, uint256 option, uint256 previousStake, uint256 optionPower);\\n    event ChangeMinParticipation(uint64 minParticipationPct);\\n\\n    modifier acceptableMinParticipationPct(uint64 _minParticipationPct) {\\n        require(_minParticipationPct > 0 && _minParticipationPct <= PCT_BASE, ERROR_MIN_PARTICIPATION);\\n        _;\\n    }\\n\\n    modifier surveyExists(uint256 _surveyId) {\\n        require(_surveyId < surveysLength, ERROR_NO_SURVEY);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Initialize Survey app with `_token.symbol(): string` for governance, minimum acceptance participation of `@formatPct(_minParticipationPct)`%, and a voting duration of `@transformTime(_surveyTime)`\\n    * @param _token MiniMeToken address that will be used as governance token\\n    * @param _minParticipationPct Percentage of total voting power that must participate in a survey for it to be taken into account (expressed as a 10^18 percentage, (eg 10^16 = 1%, 10^18 = 100%)\\n    * @param _surveyTime Seconds that a survey will be open for token holders to vote\\n    */\\n    function initialize(\\n        MiniMeToken _token,\\n        uint64 _minParticipationPct,\\n        uint64 _surveyTime\\n    )\\n        external\\n        onlyInit\\n        acceptableMinParticipationPct(_minParticipationPct)\\n    {\\n        initialized();\\n\\n        token = _token;\\n        minParticipationPct = _minParticipationPct;\\n        surveyTime = _surveyTime;\\n    }\\n\\n    /**\\n    * @notice Change minimum acceptance participation to `@formatPct(_minParticipationPct)`%\\n    * @param _minParticipationPct New acceptance participation\\n    */\\n    function changeMinAcceptParticipationPct(uint64 _minParticipationPct)\\n        external\\n        authP(MODIFY_PARTICIPATION_ROLE, arr(uint256(_minParticipationPct), uint256(minParticipationPct)))\\n        acceptableMinParticipationPct(_minParticipationPct)\\n    {\\n        minParticipationPct = _minParticipationPct;\\n\\n        emit ChangeMinParticipation(_minParticipationPct);\\n    }\\n\\n    /**\\n    * @notice Create a new non-binding survey about \\\"`_metadata`\\\"\\n    * @param _metadata Survey metadata\\n    * @param _options Number of options voters can decide between\\n    * @return surveyId id for newly created survey\\n    */\\n    function newSurvey(string _metadata, uint256 _options) external auth(CREATE_SURVEYS_ROLE) returns (uint256 surveyId) {\\n        uint64 snapshotBlock = getBlockNumber64() - 1; // avoid double voting in this very block\\n        uint256 votingPower = token.totalSupplyAt(snapshotBlock);\\n        require(votingPower > 0, ERROR_NO_VOTING_POWER);\\n\\n        surveyId = surveysLength++;\\n\\n        SurveyStruct storage survey = surveys[surveyId];\\n        survey.startDate = getTimestamp64();\\n        survey.snapshotBlock = snapshotBlock; // avoid double voting in this very block\\n        survey.minParticipationPct = minParticipationPct;\\n        survey.options = _options;\\n        survey.votingPower = votingPower;\\n\\n        emit StartSurvey(surveyId, msg.sender, _metadata);\\n    }\\n\\n    /**\\n    * @notice Reset previously casted vote in survey #`_surveyId`, if any.\\n    * @dev Initialization check is implicitly provided by `surveyExists()` as new surveys can only\\n    *      be created via `newSurvey(),` which requires initialization\\n    * @param _surveyId Id for survey\\n    */\\n    function resetVote(uint256 _surveyId) external surveyExists(_surveyId) {\\n        require(canVote(_surveyId, msg.sender), ERROR_CAN_NOT_VOTE);\\n\\n        _resetVote(_surveyId);\\n    }\\n\\n    /**\\n    * @notice Vote for multiple options in survey #`_surveyId`.\\n    * @dev Initialization check is implicitly provided by `surveyExists()` as new surveys can only\\n    *      be created via `newSurvey(),` which requires initialization\\n    * @param _surveyId Id for survey\\n    * @param _optionIds Array with indexes of supported options\\n    * @param _stakes Number of tokens assigned to each option\\n    */\\n    function voteOptions(uint256 _surveyId, uint256[] _optionIds, uint256[] _stakes)\\n        external\\n        surveyExists(_surveyId)\\n    {\\n        require(_optionIds.length == _stakes.length && _optionIds.length > 0, ERROR_VOTE_WRONG_INPUT);\\n        require(canVote(_surveyId, msg.sender), ERROR_CAN_NOT_VOTE);\\n\\n        _voteOptions(_surveyId, _optionIds, _stakes);\\n    }\\n\\n    /**\\n    * @notice Vote option #`_optionId` in survey #`_surveyId`.\\n    * @dev Initialization check is implicitly provided by `surveyExists()` as new surveys can only\\n    *      be created via `newSurvey(),` which requires initialization\\n    * @dev It will use the whole balance.\\n    * @param _surveyId Id for survey\\n    * @param _optionId Index of supported option\\n    */\\n    function voteOption(uint256 _surveyId, uint256 _optionId) external surveyExists(_surveyId) {\\n        require(canVote(_surveyId, msg.sender), ERROR_CAN_NOT_VOTE);\\n\\n        SurveyStruct storage survey = surveys[_surveyId];\\n        // This could re-enter, though we can asume the governance token is not maliciuous\\n        uint256 voterStake = token.balanceOfAt(msg.sender, survey.snapshotBlock);\\n        uint256[] memory options = new uint256[](1);\\n        uint256[] memory stakes = new uint256[](1);\\n        options[0] = _optionId;\\n        stakes[0] = voterStake;\\n\\n        _voteOptions(_surveyId, options, stakes);\\n    }\\n\\n    // Getter fns\\n\\n    function canVote(uint256 _surveyId, address _voter) public view surveyExists(_surveyId) returns (bool) {\\n        SurveyStruct storage survey = surveys[_surveyId];\\n\\n        return _isSurveyOpen(survey) && token.balanceOfAt(_voter, survey.snapshotBlock) > 0;\\n    }\\n\\n    function getSurvey(uint256 _surveyId)\\n        public\\n        view\\n        surveyExists(_surveyId)\\n        returns (\\n            bool open,\\n            uint64 startDate,\\n            uint64 snapshotBlock,\\n            uint64 minParticipation,\\n            uint256 votingPower,\\n            uint256 participation,\\n            uint256 options\\n        )\\n    {\\n        SurveyStruct storage survey = surveys[_surveyId];\\n\\n        open = _isSurveyOpen(survey);\\n        startDate = survey.startDate;\\n        snapshotBlock = survey.snapshotBlock;\\n        minParticipation = survey.minParticipationPct;\\n        votingPower = survey.votingPower;\\n        participation = survey.participation;\\n        options = survey.options;\\n    }\\n\\n    /**\\n    * @dev This is not meant to be used on-chain\\n    */\\n    /* solium-disable-next-line function-order */\\n    function getVoterState(uint256 _surveyId, address _voter)\\n        external\\n        view\\n        surveyExists(_surveyId)\\n        returns (uint256[] options, uint256[] stakes)\\n    {\\n        MultiOptionVote storage vote = surveys[_surveyId].votes[_voter];\\n\\n        if (vote.optionsCastedLength == 0) {\\n            return (new uint256[](0), new uint256[](0));\\n        }\\n\\n        options = new uint256[](vote.optionsCastedLength + 1);\\n        stakes = new uint256[](vote.optionsCastedLength + 1);\\n        for (uint256 i = 0; i <= vote.optionsCastedLength; i++) {\\n            options[i] = vote.castedVotes[i].optionId;\\n            stakes[i] = vote.castedVotes[i].stake;\\n        }\\n    }\\n\\n    function getOptionPower(uint256 _surveyId, uint256 _optionId) public view surveyExists(_surveyId) returns (uint256) {\\n        SurveyStruct storage survey = surveys[_surveyId];\\n        require(_optionId <= survey.options, ERROR_NO_OPTION);\\n\\n        return survey.optionPower[_optionId];\\n    }\\n\\n    function isParticipationAchieved(uint256 _surveyId) public view surveyExists(_surveyId) returns (bool) {\\n        SurveyStruct storage survey = surveys[_surveyId];\\n        // votingPower is always > 0\\n        uint256 participationPct = survey.participation.mul(PCT_BASE) / survey.votingPower;\\n        return participationPct >= survey.minParticipationPct;\\n    }\\n\\n    // Internal fns\\n\\n    /*\\n    * @dev Assumes the survey exists and that msg.sender can vote\\n    */\\n    function _resetVote(uint256 _surveyId) internal {\\n        SurveyStruct storage survey = surveys[_surveyId];\\n        MultiOptionVote storage previousVote = survey.votes[msg.sender];\\n        if (previousVote.optionsCastedLength > 0) {\\n            // Voter removes their vote (index 0 is the abstain vote)\\n            for (uint256 i = 1; i <= previousVote.optionsCastedLength; i++) {\\n                OptionCast storage previousOptionCast = previousVote.castedVotes[i];\\n                uint256 previousOptionPower = survey.optionPower[previousOptionCast.optionId];\\n                uint256 currentOptionPower = previousOptionPower.sub(previousOptionCast.stake);\\n                survey.optionPower[previousOptionCast.optionId] = currentOptionPower;\\n\\n                emit ResetVote(_surveyId, msg.sender, previousOptionCast.optionId, previousOptionCast.stake, currentOptionPower);\\n            }\\n\\n            // Compute previously casted votes (i.e. substract non-used tokens from stake)\\n            uint256 voterStake = token.balanceOfAt(msg.sender, survey.snapshotBlock);\\n            uint256 previousParticipation = voterStake.sub(previousVote.castedVotes[0].stake);\\n            // And remove it from total participation\\n            survey.participation = survey.participation.sub(previousParticipation);\\n\\n            // Reset previously voted options\\n            delete survey.votes[msg.sender];\\n        }\\n    }\\n\\n    /*\\n    * @dev Assumes the survey exists and that msg.sender can vote\\n    */\\n    function _voteOptions(uint256 _surveyId, uint256[] _optionIds, uint256[] _stakes) internal {\\n        SurveyStruct storage survey = surveys[_surveyId];\\n        MultiOptionVote storage senderVotes = survey.votes[msg.sender];\\n\\n        // Revert previous votes, if any\\n        _resetVote(_surveyId);\\n\\n        uint256 totalVoted = 0;\\n        // Reserve first index for ABSTAIN_VOTE\\n        senderVotes.castedVotes[0] = OptionCast({ optionId: ABSTAIN_VOTE, stake: 0 });\\n        for (uint256 optionIndex = 1; optionIndex <= _optionIds.length; optionIndex++) {\\n            // Voters don't specify that they're abstaining,\\n            // but we still keep track of this by reserving the first index of a survey's votes.\\n            // We subtract 1 from the indexes of the arrays passed in by the voter to account for this.\\n            uint256 optionId = _optionIds[optionIndex - 1];\\n            uint256 stake = _stakes[optionIndex - 1];\\n\\n            require(optionId != ABSTAIN_VOTE && optionId <= survey.options, ERROR_VOTE_WRONG_OPTION);\\n            require(stake > 0, ERROR_NO_STAKE);\\n            // Let's avoid repeating an option by making sure that ascending order is preserved in\\n            // the options array by checking that the current optionId is larger than the last one\\n            // we added\\n            require(senderVotes.castedVotes[optionIndex - 1].optionId < optionId, ERROR_OPTIONS_NOT_ORDERED);\\n\\n            // Register voter amount\\n            senderVotes.castedVotes[optionIndex] = OptionCast({ optionId: optionId, stake: stake });\\n\\n            // Add to total option support\\n            survey.optionPower[optionId] = survey.optionPower[optionId].add(stake);\\n\\n            // Keep track of stake used so far\\n            totalVoted = totalVoted.add(stake);\\n\\n            emit CastVote(_surveyId, msg.sender, optionId, stake, survey.optionPower[optionId]);\\n        }\\n\\n        // Compute and register non used tokens\\n        // Implictly we are doing require(totalVoted <= voterStake) too\\n        // (as stated before, index 0 is for ABSTAIN_VOTE option)\\n        uint256 voterStake = token.balanceOfAt(msg.sender, survey.snapshotBlock);\\n        senderVotes.castedVotes[0].stake = voterStake.sub(totalVoted);\\n\\n        // Register number of options voted\\n        senderVotes.optionsCastedLength = _optionIds.length;\\n\\n        // Add voter tokens to participation\\n        survey.participation = survey.participation.add(totalVoted);\\n        assert(survey.participation <= survey.votingPower);\\n    }\\n\\n    function _isSurveyOpen(SurveyStruct storage _survey) internal view returns (bool) {\\n        return getTimestamp64() < _survey.startDate.add(surveyTime);\\n    }\\n}\\n\",\"keccak256\":\"0x13b223a09b42c5c7b3ab2a4360fb71f2bb6c021ef59d315c0196ab269501698c\"},\"@aragon/apps-token-manager/contracts/TokenManager.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    GPL-3.0-or-later\\n */\\n\\n/* solium-disable function-order */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/IForwarder.sol\\\";\\n\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\n\\nimport \\\"@aragon/apps-shared-minime/contracts/ITokenController.sol\\\";\\nimport \\\"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\\\";\\n\\n\\ncontract TokenManager is ITokenController, IForwarder, AragonApp {\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant MINT_ROLE = keccak256(\\\"MINT_ROLE\\\");\\n    bytes32 public constant ISSUE_ROLE = keccak256(\\\"ISSUE_ROLE\\\");\\n    bytes32 public constant ASSIGN_ROLE = keccak256(\\\"ASSIGN_ROLE\\\");\\n    bytes32 public constant REVOKE_VESTINGS_ROLE = keccak256(\\\"REVOKE_VESTINGS_ROLE\\\");\\n    bytes32 public constant BURN_ROLE = keccak256(\\\"BURN_ROLE\\\");\\n\\n    uint256 public constant MAX_VESTINGS_PER_ADDRESS = 50;\\n\\n    string private constant ERROR_CALLER_NOT_TOKEN = \\\"TM_CALLER_NOT_TOKEN\\\";\\n    string private constant ERROR_NO_VESTING = \\\"TM_NO_VESTING\\\";\\n    string private constant ERROR_TOKEN_CONTROLLER = \\\"TM_TOKEN_CONTROLLER\\\";\\n    string private constant ERROR_MINT_RECEIVER_IS_TM = \\\"TM_MINT_RECEIVER_IS_TM\\\";\\n    string private constant ERROR_VESTING_TO_TM = \\\"TM_VESTING_TO_TM\\\";\\n    string private constant ERROR_TOO_MANY_VESTINGS = \\\"TM_TOO_MANY_VESTINGS\\\";\\n    string private constant ERROR_WRONG_CLIFF_DATE = \\\"TM_WRONG_CLIFF_DATE\\\";\\n    string private constant ERROR_VESTING_NOT_REVOKABLE = \\\"TM_VESTING_NOT_REVOKABLE\\\";\\n    string private constant ERROR_REVOKE_TRANSFER_FROM_REVERTED = \\\"TM_REVOKE_TRANSFER_FROM_REVERTED\\\";\\n    string private constant ERROR_CAN_NOT_FORWARD = \\\"TM_CAN_NOT_FORWARD\\\";\\n    string private constant ERROR_BALANCE_INCREASE_NOT_ALLOWED = \\\"TM_BALANCE_INC_NOT_ALLOWED\\\";\\n    string private constant ERROR_ASSIGN_TRANSFER_FROM_REVERTED = \\\"TM_ASSIGN_TRANSFER_FROM_REVERTED\\\";\\n\\n    struct TokenVesting {\\n        uint256 amount;\\n        uint64 start;\\n        uint64 cliff;\\n        uint64 vesting;\\n        bool revokable;\\n    }\\n\\n    // Note that we COMPLETELY trust this MiniMeToken to not be malicious for proper operation of this contract\\n    MiniMeToken public token;\\n    uint256 public maxAccountTokens;\\n\\n    // We are mimicing an array in the inner mapping, we use a mapping instead to make app upgrade more graceful\\n    mapping (address => mapping (uint256 => TokenVesting)) internal vestings;\\n    mapping (address => uint256) public vestingsLengths;\\n\\n    // Other token specific events can be watched on the token address directly (avoids duplication)\\n    event NewVesting(address indexed receiver, uint256 vestingId, uint256 amount);\\n    event RevokeVesting(address indexed receiver, uint256 vestingId, uint256 nonVestedAmount);\\n\\n    modifier onlyToken() {\\n        require(msg.sender == address(token), ERROR_CALLER_NOT_TOKEN);\\n        _;\\n    }\\n\\n    modifier vestingExists(address _holder, uint256 _vestingId) {\\n        // TODO: it's not checking for gaps that may appear because of deletes in revokeVesting function\\n        require(_vestingId < vestingsLengths[_holder], ERROR_NO_VESTING);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Initialize Token Manager for `_token.symbol(): string`, whose tokens are `transferable ? 'not' : ''` transferable`_maxAccountTokens > 0 ? ' and limited to a maximum of ' + @tokenAmount(_token, _maxAccountTokens, false) + ' per account' : ''`\\n    * @param _token MiniMeToken address for the managed token (Token Manager instance must be already set as the token controller)\\n    * @param _transferable whether the token can be transferred by holders\\n    * @param _maxAccountTokens Maximum amount of tokens an account can have (0 for infinite tokens)\\n    */\\n    function initialize(\\n        MiniMeToken _token,\\n        bool _transferable,\\n        uint256 _maxAccountTokens\\n    )\\n        external\\n        onlyInit\\n    {\\n        initialized();\\n\\n        require(_token.controller() == address(this), ERROR_TOKEN_CONTROLLER);\\n\\n        token = _token;\\n        maxAccountTokens = _maxAccountTokens == 0 ? uint256(-1) : _maxAccountTokens;\\n\\n        if (token.transfersEnabled() != _transferable) {\\n            token.enableTransfers(_transferable);\\n        }\\n    }\\n\\n    /**\\n    * @notice Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for `_receiver`\\n    * @param _receiver The address receiving the tokens, cannot be the Token Manager itself (use `issue()` instead)\\n    * @param _amount Number of tokens minted\\n    */\\n    function mint(address _receiver, uint256 _amount) external authP(MINT_ROLE, arr(_receiver, _amount)) {\\n        require(_receiver != address(this), ERROR_MINT_RECEIVER_IS_TM);\\n        _mint(_receiver, _amount);\\n    }\\n\\n    /**\\n    * @notice Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for the Token Manager\\n    * @param _amount Number of tokens minted\\n    */\\n    function issue(uint256 _amount) external authP(ISSUE_ROLE, arr(_amount)) {\\n        _mint(address(this), _amount);\\n    }\\n\\n    /**\\n    * @notice Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings\\n    * @param _receiver The address receiving the tokens\\n    * @param _amount Number of tokens transferred\\n    */\\n    function assign(address _receiver, uint256 _amount) external authP(ASSIGN_ROLE, arr(_receiver, _amount)) {\\n        _assign(_receiver, _amount);\\n    }\\n\\n    /**\\n    * @notice Burn `@tokenAmount(self.token(): address, _amount, false)` tokens from `_holder`\\n    * @param _holder Holder of tokens being burned\\n    * @param _amount Number of tokens being burned\\n    */\\n    function burn(address _holder, uint256 _amount) external authP(BURN_ROLE, arr(_holder, _amount)) {\\n        // minime.destroyTokens() never returns false, only reverts on failure\\n        token.destroyTokens(_holder, _amount);\\n    }\\n\\n    /**\\n    * @notice Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings with a `_revokable : 'revokable' : ''` vesting starting at `@formatDate(_start)`, cliff at `@formatDate(_cliff)` (first portion of tokens transferable), and completed vesting at `@formatDate(_vested)` (all tokens transferable)\\n    * @param _receiver The address receiving the tokens, cannot be Token Manager itself\\n    * @param _amount Number of tokens vested\\n    * @param _start Date the vesting calculations start\\n    * @param _cliff Date when the initial portion of tokens are transferable\\n    * @param _vested Date when all tokens are transferable\\n    * @param _revokable Whether the vesting can be revoked by the Token Manager\\n    */\\n    function assignVested(\\n        address _receiver,\\n        uint256 _amount,\\n        uint64 _start,\\n        uint64 _cliff,\\n        uint64 _vested,\\n        bool _revokable\\n    )\\n        external\\n        authP(ASSIGN_ROLE, arr(_receiver, _amount))\\n        returns (uint256)\\n    {\\n        require(_receiver != address(this), ERROR_VESTING_TO_TM);\\n        require(vestingsLengths[_receiver] < MAX_VESTINGS_PER_ADDRESS, ERROR_TOO_MANY_VESTINGS);\\n        require(_start <= _cliff && _cliff <= _vested, ERROR_WRONG_CLIFF_DATE);\\n\\n        uint256 vestingId = vestingsLengths[_receiver]++;\\n        vestings[_receiver][vestingId] = TokenVesting(\\n            _amount,\\n            _start,\\n            _cliff,\\n            _vested,\\n            _revokable\\n        );\\n\\n        _assign(_receiver, _amount);\\n\\n        emit NewVesting(_receiver, vestingId, _amount);\\n\\n        return vestingId;\\n    }\\n\\n    /**\\n    * @notice Revoke vesting #`_vestingId` from `_holder`, returning unvested tokens to the Token Manager\\n    * @param _holder Address whose vesting to revoke\\n    * @param _vestingId Numeric id of the vesting\\n    */\\n    function revokeVesting(address _holder, uint256 _vestingId)\\n        external\\n        authP(REVOKE_VESTINGS_ROLE, arr(_holder))\\n        vestingExists(_holder, _vestingId)\\n    {\\n        TokenVesting storage v = vestings[_holder][_vestingId];\\n        require(v.revokable, ERROR_VESTING_NOT_REVOKABLE);\\n\\n        uint256 nonVested = _calculateNonVestedTokens(\\n            v.amount,\\n            getTimestamp(),\\n            v.start,\\n            v.cliff,\\n            v.vesting\\n        );\\n\\n        // To make vestingIds immutable over time, we just zero out the revoked vesting\\n        // Clearing this out also allows the token transfer back to the Token Manager to succeed\\n        delete vestings[_holder][_vestingId];\\n\\n        // transferFrom always works as controller\\n        // onTransfer hook always allows if transfering to token controller\\n        require(token.transferFrom(_holder, address(this), nonVested), ERROR_REVOKE_TRANSFER_FROM_REVERTED);\\n\\n        emit RevokeVesting(_holder, _vestingId, nonVested);\\n    }\\n\\n    // ITokenController fns\\n    // `onTransfer()`, `onApprove()`, and `proxyPayment()` are callbacks from the MiniMe token\\n    // contract and are only meant to be called through the managed MiniMe token that gets assigned\\n    // during initialization.\\n\\n    /*\\n    * @dev Notifies the controller about a token transfer allowing the controller to decide whether\\n    *      to allow it or react if desired (only callable from the token).\\n    *      Initialization check is implicitly provided by `onlyToken()`.\\n    * @param _from The origin of the transfer\\n    * @param _to The destination of the transfer\\n    * @param _amount The amount of the transfer\\n    * @return False if the controller does not authorize the transfer\\n    */\\n    function onTransfer(address _from, address _to, uint256 _amount) external onlyToken returns (bool) {\\n        return _isBalanceIncreaseAllowed(_to, _amount) && _transferableBalance(_from, getTimestamp()) >= _amount;\\n    }\\n\\n    /**\\n    * @dev Notifies the controller about an approval allowing the controller to react if desired\\n    *      Initialization check is implicitly provided by `onlyToken()`.\\n    * @return False if the controller does not authorize the approval\\n    */\\n    function onApprove(address, address, uint) external onlyToken returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Called when ether is sent to the MiniMe Token contract\\n    *      Initialization check is implicitly provided by `onlyToken()`.\\n    * @return True if the ether is accepted, false for it to throw\\n    */\\n    function proxyPayment(address) external payable onlyToken returns (bool) {\\n        return false;\\n    }\\n\\n    // Forwarding fns\\n\\n    function isForwarder() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n    * @notice Execute desired action as a token holder\\n    * @dev IForwarder interface conformance. Forwards any token holder action.\\n    * @param _evmScript Script being executed\\n    */\\n    function forward(bytes _evmScript) public {\\n        require(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);\\n        bytes memory input = new bytes(0); // TODO: Consider input for this\\n\\n        // Add the managed token to the blacklist to disallow a token holder from executing actions\\n        // on the token controller's (this contract) behalf\\n        address[] memory blacklist = new address[](1);\\n        blacklist[0] = address(token);\\n\\n        runScript(_evmScript, input, blacklist);\\n    }\\n\\n    function canForward(address _sender, bytes) public view returns (bool) {\\n        return hasInitialized() && token.balanceOf(_sender) > 0;\\n    }\\n\\n    // Getter fns\\n\\n    function getVesting(\\n        address _recipient,\\n        uint256 _vestingId\\n    )\\n        public\\n        view\\n        vestingExists(_recipient, _vestingId)\\n        returns (\\n            uint256 amount,\\n            uint64 start,\\n            uint64 cliff,\\n            uint64 vesting,\\n            bool revokable\\n        )\\n    {\\n        TokenVesting storage tokenVesting = vestings[_recipient][_vestingId];\\n        amount = tokenVesting.amount;\\n        start = tokenVesting.start;\\n        cliff = tokenVesting.cliff;\\n        vesting = tokenVesting.vesting;\\n        revokable = tokenVesting.revokable;\\n    }\\n\\n    function spendableBalanceOf(address _holder) public view isInitialized returns (uint256) {\\n        return _transferableBalance(_holder, getTimestamp());\\n    }\\n\\n    function transferableBalance(address _holder, uint256 _time) public view isInitialized returns (uint256) {\\n        return _transferableBalance(_holder, _time);\\n    }\\n\\n    /**\\n    * @dev Disable recovery escape hatch for own token,\\n    *      as the it has the concept of issuing tokens without assigning them\\n    */\\n    function allowRecoverability(address _token) public view returns (bool) {\\n        return _token != address(token);\\n    }\\n\\n    // Internal fns\\n\\n    function _assign(address _receiver, uint256 _amount) internal {\\n        require(_isBalanceIncreaseAllowed(_receiver, _amount), ERROR_BALANCE_INCREASE_NOT_ALLOWED);\\n        // Must use transferFrom() as transfer() does not give the token controller full control\\n        require(token.transferFrom(address(this), _receiver, _amount), ERROR_ASSIGN_TRANSFER_FROM_REVERTED);\\n    }\\n\\n    function _mint(address _receiver, uint256 _amount) internal {\\n        require(_isBalanceIncreaseAllowed(_receiver, _amount), ERROR_BALANCE_INCREASE_NOT_ALLOWED);\\n        token.generateTokens(_receiver, _amount); // minime.generateTokens() never returns false\\n    }\\n\\n    function _isBalanceIncreaseAllowed(address _receiver, uint256 _inc) internal view returns (bool) {\\n        // Max balance doesn't apply to the token manager itself\\n        if (_receiver == address(this)) {\\n            return true;\\n        }\\n        return token.balanceOf(_receiver).add(_inc) <= maxAccountTokens;\\n    }\\n\\n    /**\\n    * @dev Calculate amount of non-vested tokens at a specifc time\\n    * @param tokens The total amount of tokens vested\\n    * @param time The time at which to check\\n    * @param start The date vesting started\\n    * @param cliff The cliff period\\n    * @param vested The fully vested date\\n    * @return The amount of non-vested tokens of a specific grant\\n    *  transferableTokens\\n    *   |                         _/--------   vestedTokens rect\\n    *   |                       _/\\n    *   |                     _/\\n    *   |                   _/\\n    *   |                 _/\\n    *   |                /\\n    *   |              .|\\n    *   |            .  |\\n    *   |          .    |\\n    *   |        .      |\\n    *   |      .        |\\n    *   |    .          |\\n    *   +===+===========+---------+----------> time\\n    *      Start       Cliff    Vested\\n    */\\n    function _calculateNonVestedTokens(\\n        uint256 tokens,\\n        uint256 time,\\n        uint256 start,\\n        uint256 cliff,\\n        uint256 vested\\n    )\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        // Shortcuts for before cliff and after vested cases.\\n        if (time >= vested) {\\n            return 0;\\n        }\\n        if (time < cliff) {\\n            return tokens;\\n        }\\n\\n        // Interpolate all vested tokens.\\n        // As before cliff the shortcut returns 0, we can just calculate a value\\n        // in the vesting rect (as shown in above's figure)\\n\\n        // vestedTokens = tokens * (time - start) / (vested - start)\\n        // In assignVesting we enforce start <= cliff <= vested\\n        // Here we shortcut time >= vested and time < cliff,\\n        // so no division by 0 is possible\\n        uint256 vestedTokens = tokens.mul(time.sub(start)) / vested.sub(start);\\n\\n        // tokens - vestedTokens\\n        return tokens.sub(vestedTokens);\\n    }\\n\\n    function _transferableBalance(address _holder, uint256 _time) internal view returns (uint256) {\\n        uint256 transferable = token.balanceOf(_holder);\\n\\n        // This check is not strictly necessary for the current version of this contract, as\\n        // Token Managers now cannot assign vestings to themselves.\\n        // However, this was a possibility in the past, so in case there were vestings assigned to\\n        // themselves, this will still return the correct value (entire balance, as the Token\\n        // Manager does not have a spending limit on its own balance).\\n        if (_holder != address(this)) {\\n            uint256 vestingsCount = vestingsLengths[_holder];\\n            for (uint256 i = 0; i < vestingsCount; i++) {\\n                TokenVesting storage v = vestings[_holder][i];\\n                uint256 nonTransferable = _calculateNonVestedTokens(\\n                    v.amount,\\n                    _time,\\n                    v.start,\\n                    v.cliff,\\n                    v.vesting\\n                );\\n                transferable = transferable.sub(nonTransferable);\\n            }\\n        }\\n\\n        return transferable;\\n    }\\n}\\n\",\"keccak256\":\"0x60fc91f7ffac56d5f897a6e1bfa08ae3fb42818a46262106fdf984532b7a9d40\"},\"@aragon/apps-vault/contracts/Vault.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/DepositableStorage.sol\\\";\\nimport \\\"@aragon/os/contracts/common/EtherTokenConstant.sol\\\";\\nimport \\\"@aragon/os/contracts/common/SafeERC20.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/token/ERC20.sol\\\";\\n\\n\\ncontract Vault is EtherTokenConstant, AragonApp, DepositableStorage {\\n    using SafeERC20 for ERC20;\\n\\n    bytes32 public constant TRANSFER_ROLE = keccak256(\\\"TRANSFER_ROLE\\\");\\n\\n    string private constant ERROR_DATA_NON_ZERO = \\\"VAULT_DATA_NON_ZERO\\\";\\n    string private constant ERROR_NOT_DEPOSITABLE = \\\"VAULT_NOT_DEPOSITABLE\\\";\\n    string private constant ERROR_DEPOSIT_VALUE_ZERO = \\\"VAULT_DEPOSIT_VALUE_ZERO\\\";\\n    string private constant ERROR_TRANSFER_VALUE_ZERO = \\\"VAULT_TRANSFER_VALUE_ZERO\\\";\\n    string private constant ERROR_SEND_REVERTED = \\\"VAULT_SEND_REVERTED\\\";\\n    string private constant ERROR_VALUE_MISMATCH = \\\"VAULT_VALUE_MISMATCH\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FROM_REVERTED = \\\"VAULT_TOKEN_TRANSFER_FROM_REVERT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_REVERTED = \\\"VAULT_TOKEN_TRANSFER_REVERTED\\\";\\n\\n    event VaultTransfer(address indexed token, address indexed to, uint256 amount);\\n    event VaultDeposit(address indexed token, address indexed sender, uint256 amount);\\n\\n    /**\\n    * @dev On a normal send() or transfer() this fallback is never executed as it will be\\n    *      intercepted by the Proxy (see aragonOS#281)\\n    */\\n    function () external payable isInitialized {\\n        require(msg.data.length == 0, ERROR_DATA_NON_ZERO);\\n        _deposit(ETH, msg.value);\\n    }\\n\\n    /**\\n    * @notice Initialize Vault app\\n    * @dev As an AragonApp it needs to be initialized in order for roles (`auth` and `authP`) to work\\n    */\\n    function initialize() external onlyInit {\\n        initialized();\\n        setDepositable(true);\\n    }\\n\\n    /**\\n    * @notice Deposit `_value` `_token` to the vault\\n    * @param _token Address of the token being transferred\\n    * @param _value Amount of tokens being transferred\\n    */\\n    function deposit(address _token, uint256 _value) external payable isInitialized {\\n        _deposit(_token, _value);\\n    }\\n\\n    /**\\n    * @notice Transfer `_value` `_token` from the Vault to `_to`\\n    * @param _token Address of the token being transferred\\n    * @param _to Address of the recipient of tokens\\n    * @param _value Amount of tokens being transferred\\n    */\\n    /* solium-disable-next-line function-order */\\n    function transfer(address _token, address _to, uint256 _value)\\n        external\\n        authP(TRANSFER_ROLE, arr(_token, _to, _value))\\n    {\\n        require(_value > 0, ERROR_TRANSFER_VALUE_ZERO);\\n\\n        if (_token == ETH) {\\n            require(_to.send(_value), ERROR_SEND_REVERTED);\\n        } else {\\n            require(ERC20(_token).safeTransfer(_to, _value), ERROR_TOKEN_TRANSFER_REVERTED);\\n        }\\n\\n        emit VaultTransfer(_token, _to, _value);\\n    }\\n\\n    function balance(address _token) public view returns (uint256) {\\n        if (_token == ETH) {\\n            return address(this).balance;\\n        } else {\\n            return ERC20(_token).staticBalanceOf(address(this));\\n        }\\n    }\\n\\n    /**\\n    * @dev Disable recovery escape hatch, as it could be used\\n    *      maliciously to transfer funds away from the vault\\n    */\\n    function allowRecoverability(address) public view returns (bool) {\\n        return false;\\n    }\\n\\n    function _deposit(address _token, uint256 _value) internal {\\n        require(isDepositable(), ERROR_NOT_DEPOSITABLE);\\n        require(_value > 0, ERROR_DEPOSIT_VALUE_ZERO);\\n\\n        if (_token == ETH) {\\n            // Deposit is implicit in this case\\n            require(msg.value == _value, ERROR_VALUE_MISMATCH);\\n        } else {\\n            require(\\n                ERC20(_token).safeTransferFrom(msg.sender, address(this), _value),\\n                ERROR_TOKEN_TRANSFER_FROM_REVERTED\\n            );\\n        }\\n\\n        emit VaultDeposit(_token, msg.sender, _value);\\n    }\\n}\\n\",\"keccak256\":\"0x760b4fd895153fd398391df3b27474d1913d792fadec2172dd10d3686d3416e6\"},\"@aragon/apps-voting/contracts/Voting.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    GPL-3.0-or-later\\n */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/IForwarder.sol\\\";\\n\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath64.sol\\\";\\n\\nimport \\\"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\\\";\\n\\n\\ncontract Voting is IForwarder, AragonApp {\\n    using SafeMath for uint256;\\n    using SafeMath64 for uint64;\\n\\n    bytes32 public constant CREATE_VOTES_ROLE = keccak256(\\\"CREATE_VOTES_ROLE\\\");\\n    bytes32 public constant MODIFY_SUPPORT_ROLE = keccak256(\\\"MODIFY_SUPPORT_ROLE\\\");\\n    bytes32 public constant MODIFY_QUORUM_ROLE = keccak256(\\\"MODIFY_QUORUM_ROLE\\\");\\n\\n    uint64 public constant PCT_BASE = 10 ** 18; // 0% = 0; 1% = 10^16; 100% = 10^18\\n\\n    string private constant ERROR_NO_VOTE = \\\"VOTING_NO_VOTE\\\";\\n    string private constant ERROR_INIT_PCTS = \\\"VOTING_INIT_PCTS\\\";\\n    string private constant ERROR_CHANGE_SUPPORT_PCTS = \\\"VOTING_CHANGE_SUPPORT_PCTS\\\";\\n    string private constant ERROR_CHANGE_QUORUM_PCTS = \\\"VOTING_CHANGE_QUORUM_PCTS\\\";\\n    string private constant ERROR_INIT_SUPPORT_TOO_BIG = \\\"VOTING_INIT_SUPPORT_TOO_BIG\\\";\\n    string private constant ERROR_CHANGE_SUPPORT_TOO_BIG = \\\"VOTING_CHANGE_SUPP_TOO_BIG\\\";\\n    string private constant ERROR_CAN_NOT_VOTE = \\\"VOTING_CAN_NOT_VOTE\\\";\\n    string private constant ERROR_CAN_NOT_EXECUTE = \\\"VOTING_CAN_NOT_EXECUTE\\\";\\n    string private constant ERROR_CAN_NOT_FORWARD = \\\"VOTING_CAN_NOT_FORWARD\\\";\\n    string private constant ERROR_NO_VOTING_POWER = \\\"VOTING_NO_VOTING_POWER\\\";\\n\\n    enum VoterState { Absent, Yea, Nay }\\n\\n    struct Vote {\\n        bool executed;\\n        uint64 startDate;\\n        uint64 snapshotBlock;\\n        uint64 supportRequiredPct;\\n        uint64 minAcceptQuorumPct;\\n        uint256 yea;\\n        uint256 nay;\\n        uint256 votingPower;\\n        bytes executionScript;\\n        mapping (address => VoterState) voters;\\n    }\\n\\n    MiniMeToken public token;\\n    uint64 public supportRequiredPct;\\n    uint64 public minAcceptQuorumPct;\\n    uint64 public voteTime;\\n\\n    // We are mimicing an array, we use a mapping instead to make app upgrade more graceful\\n    mapping (uint256 => Vote) internal votes;\\n    uint256 public votesLength;\\n\\n    event StartVote(uint256 indexed voteId, address indexed creator, string metadata);\\n    event CastVote(uint256 indexed voteId, address indexed voter, bool supports, uint256 stake);\\n    event ExecuteVote(uint256 indexed voteId);\\n    event ChangeSupportRequired(uint64 supportRequiredPct);\\n    event ChangeMinQuorum(uint64 minAcceptQuorumPct);\\n\\n    modifier voteExists(uint256 _voteId) {\\n        require(_voteId < votesLength, ERROR_NO_VOTE);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Initialize Voting app with `_token.symbol(): string` for governance, minimum support of `@formatPct(_supportRequiredPct)`%, minimum acceptance quorum of `@formatPct(_minAcceptQuorumPct)`%, and a voting duration of `@transformTime(_voteTime)`\\n    * @param _token MiniMeToken Address that will be used as governance token\\n    * @param _supportRequiredPct Percentage of yeas in casted votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)\\n    * @param _minAcceptQuorumPct Percentage of yeas in total possible votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)\\n    * @param _voteTime Seconds that a vote will be open for token holders to vote (unless enough yeas or nays have been cast to make an early decision)\\n    */\\n    function initialize(\\n        MiniMeToken _token,\\n        uint64 _supportRequiredPct,\\n        uint64 _minAcceptQuorumPct,\\n        uint64 _voteTime\\n    )\\n        external\\n        onlyInit\\n    {\\n        initialized();\\n\\n        require(_minAcceptQuorumPct <= _supportRequiredPct, ERROR_INIT_PCTS);\\n        require(_supportRequiredPct < PCT_BASE, ERROR_INIT_SUPPORT_TOO_BIG);\\n\\n        token = _token;\\n        supportRequiredPct = _supportRequiredPct;\\n        minAcceptQuorumPct = _minAcceptQuorumPct;\\n        voteTime = _voteTime;\\n    }\\n\\n    /**\\n    * @notice Change required support to `@formatPct(_supportRequiredPct)`%\\n    * @param _supportRequiredPct New required support\\n    */\\n    function changeSupportRequiredPct(uint64 _supportRequiredPct)\\n        external\\n        authP(MODIFY_SUPPORT_ROLE, arr(uint256(_supportRequiredPct), uint256(supportRequiredPct)))\\n    {\\n        require(minAcceptQuorumPct <= _supportRequiredPct, ERROR_CHANGE_SUPPORT_PCTS);\\n        require(_supportRequiredPct < PCT_BASE, ERROR_CHANGE_SUPPORT_TOO_BIG);\\n        supportRequiredPct = _supportRequiredPct;\\n\\n        emit ChangeSupportRequired(_supportRequiredPct);\\n    }\\n\\n    /**\\n    * @notice Change minimum acceptance quorum to `@formatPct(_minAcceptQuorumPct)`%\\n    * @param _minAcceptQuorumPct New acceptance quorum\\n    */\\n    function changeMinAcceptQuorumPct(uint64 _minAcceptQuorumPct)\\n        external\\n        authP(MODIFY_QUORUM_ROLE, arr(uint256(_minAcceptQuorumPct), uint256(minAcceptQuorumPct)))\\n    {\\n        require(_minAcceptQuorumPct <= supportRequiredPct, ERROR_CHANGE_QUORUM_PCTS);\\n        minAcceptQuorumPct = _minAcceptQuorumPct;\\n\\n        emit ChangeMinQuorum(_minAcceptQuorumPct);\\n    }\\n\\n    /**\\n    * @notice Create a new vote about \\\"`_metadata`\\\"\\n    * @param _executionScript EVM script to be executed on approval\\n    * @param _metadata Vote metadata\\n    * @return voteId Id for newly created vote\\n    */\\n    function newVote(bytes _executionScript, string _metadata) external auth(CREATE_VOTES_ROLE) returns (uint256 voteId) {\\n        return _newVote(_executionScript, _metadata, true, true);\\n    }\\n\\n    /**\\n    * @notice Create a new vote about \\\"`_metadata`\\\"\\n    * @param _executionScript EVM script to be executed on approval\\n    * @param _metadata Vote metadata\\n    * @param _castVote Whether to also cast newly created vote\\n    * @param _executesIfDecided Whether to also immediately execute newly created vote if decided\\n    * @return voteId id for newly created vote\\n    */\\n    function newVote(bytes _executionScript, string _metadata, bool _castVote, bool _executesIfDecided)\\n        external\\n        auth(CREATE_VOTES_ROLE)\\n        returns (uint256 voteId)\\n    {\\n        return _newVote(_executionScript, _metadata, _castVote, _executesIfDecided);\\n    }\\n\\n    /**\\n    * @notice Vote `_supports ? 'yes' : 'no'` in vote #`_voteId`\\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n    *      created via `newVote(),` which requires initialization\\n    * @param _voteId Id for vote\\n    * @param _supports Whether voter supports the vote\\n    * @param _executesIfDecided Whether the vote should execute its action if it becomes decided\\n    */\\n    function vote(uint256 _voteId, bool _supports, bool _executesIfDecided) external voteExists(_voteId) {\\n        require(_canVote(_voteId, msg.sender), ERROR_CAN_NOT_VOTE);\\n        _vote(_voteId, _supports, msg.sender, _executesIfDecided);\\n    }\\n\\n    /**\\n    * @notice Execute vote #`_voteId`\\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n    *      created via `newVote(),` which requires initialization\\n    * @param _voteId Id for vote\\n    */\\n    function executeVote(uint256 _voteId) external voteExists(_voteId) {\\n        _executeVote(_voteId);\\n    }\\n\\n    // Forwarding fns\\n\\n    function isForwarder() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n    * @notice Creates a vote to execute the desired action, and casts a support vote if possible\\n    * @dev IForwarder interface conformance\\n    * @param _evmScript Start vote with script\\n    */\\n    function forward(bytes _evmScript) public {\\n        require(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);\\n        _newVote(_evmScript, \\\"\\\", true, true);\\n    }\\n\\n    function canForward(address _sender, bytes) public view returns (bool) {\\n        // Note that `canPerform()` implicitly does an initialization check itself\\n        return canPerform(_sender, CREATE_VOTES_ROLE, arr());\\n    }\\n\\n    // Getter fns\\n\\n    /**\\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n    *      created via `newVote(),` which requires initialization\\n    */\\n    function canExecute(uint256 _voteId) public view voteExists(_voteId) returns (bool) {\\n        return _canExecute(_voteId);\\n    }\\n\\n    /**\\n    * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n    *      created via `newVote(),` which requires initialization\\n    */\\n    function canVote(uint256 _voteId, address _voter) public view voteExists(_voteId) returns (bool) {\\n        return _canVote(_voteId, _voter);\\n    }\\n\\n    function getVote(uint256 _voteId)\\n        public\\n        view\\n        voteExists(_voteId)\\n        returns (\\n            bool open,\\n            bool executed,\\n            uint64 startDate,\\n            uint64 snapshotBlock,\\n            uint64 supportRequired,\\n            uint64 minAcceptQuorum,\\n            uint256 yea,\\n            uint256 nay,\\n            uint256 votingPower,\\n            bytes script\\n        )\\n    {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        open = _isVoteOpen(vote_);\\n        executed = vote_.executed;\\n        startDate = vote_.startDate;\\n        snapshotBlock = vote_.snapshotBlock;\\n        supportRequired = vote_.supportRequiredPct;\\n        minAcceptQuorum = vote_.minAcceptQuorumPct;\\n        yea = vote_.yea;\\n        nay = vote_.nay;\\n        votingPower = vote_.votingPower;\\n        script = vote_.executionScript;\\n    }\\n\\n    function getVoterState(uint256 _voteId, address _voter) public view voteExists(_voteId) returns (VoterState) {\\n        return votes[_voteId].voters[_voter];\\n    }\\n\\n    // Internal fns\\n\\n    function _newVote(bytes _executionScript, string _metadata, bool _castVote, bool _executesIfDecided)\\n        internal\\n        returns (uint256 voteId)\\n    {\\n        uint64 snapshotBlock = getBlockNumber64() - 1; // avoid double voting in this very block\\n        uint256 votingPower = token.totalSupplyAt(snapshotBlock);\\n        require(votingPower > 0, ERROR_NO_VOTING_POWER);\\n\\n        voteId = votesLength++;\\n\\n        Vote storage vote_ = votes[voteId];\\n        vote_.startDate = getTimestamp64();\\n        vote_.snapshotBlock = snapshotBlock;\\n        vote_.supportRequiredPct = supportRequiredPct;\\n        vote_.minAcceptQuorumPct = minAcceptQuorumPct;\\n        vote_.votingPower = votingPower;\\n        vote_.executionScript = _executionScript;\\n\\n        emit StartVote(voteId, msg.sender, _metadata);\\n\\n        if (_castVote && _canVote(voteId, msg.sender)) {\\n            _vote(voteId, true, msg.sender, _executesIfDecided);\\n        }\\n    }\\n\\n    function _vote(\\n        uint256 _voteId,\\n        bool _supports,\\n        address _voter,\\n        bool _executesIfDecided\\n    ) internal\\n    {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        // This could re-enter, though we can assume the governance token is not malicious\\n        uint256 voterStake = token.balanceOfAt(_voter, vote_.snapshotBlock);\\n        VoterState state = vote_.voters[_voter];\\n\\n        // If voter had previously voted, decrease count\\n        if (state == VoterState.Yea) {\\n            vote_.yea = vote_.yea.sub(voterStake);\\n        } else if (state == VoterState.Nay) {\\n            vote_.nay = vote_.nay.sub(voterStake);\\n        }\\n\\n        if (_supports) {\\n            vote_.yea = vote_.yea.add(voterStake);\\n        } else {\\n            vote_.nay = vote_.nay.add(voterStake);\\n        }\\n\\n        vote_.voters[_voter] = _supports ? VoterState.Yea : VoterState.Nay;\\n\\n        emit CastVote(_voteId, _voter, _supports, voterStake);\\n\\n        if (_executesIfDecided && _canExecute(_voteId)) {\\n            // We've already checked if the vote can be executed with `_canExecute()`\\n            _unsafeExecuteVote(_voteId);\\n        }\\n    }\\n\\n    function _executeVote(uint256 _voteId) internal {\\n        require(_canExecute(_voteId), ERROR_CAN_NOT_EXECUTE);\\n        _unsafeExecuteVote(_voteId);\\n    }\\n\\n    /**\\n    * @dev Unsafe version of _executeVote that assumes you have already checked if the vote can be executed\\n    */\\n    function _unsafeExecuteVote(uint256 _voteId) internal {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        vote_.executed = true;\\n\\n        bytes memory input = new bytes(0); // TODO: Consider input for voting scripts\\n        runScript(vote_.executionScript, input, new address[](0));\\n\\n        emit ExecuteVote(_voteId);\\n    }\\n\\n    function _canExecute(uint256 _voteId) internal view returns (bool) {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        if (vote_.executed) {\\n            return false;\\n        }\\n\\n        // Voting is already decided\\n        if (_isValuePct(vote_.yea, vote_.votingPower, vote_.supportRequiredPct)) {\\n            return true;\\n        }\\n\\n        // Vote ended?\\n        if (_isVoteOpen(vote_)) {\\n            return false;\\n        }\\n        // Has enough support?\\n        uint256 totalVotes = vote_.yea.add(vote_.nay);\\n        if (!_isValuePct(vote_.yea, totalVotes, vote_.supportRequiredPct)) {\\n            return false;\\n        }\\n        // Has min quorum?\\n        if (!_isValuePct(vote_.yea, vote_.votingPower, vote_.minAcceptQuorumPct)) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    function _canVote(uint256 _voteId, address _voter) internal view returns (bool) {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        return _isVoteOpen(vote_) && token.balanceOfAt(_voter, vote_.snapshotBlock) > 0;\\n    }\\n\\n    function _isVoteOpen(Vote storage vote_) internal view returns (bool) {\\n        return getTimestamp64() < vote_.startDate.add(voteTime) && !vote_.executed;\\n    }\\n\\n    /**\\n    * @dev Calculates whether `_value` is more than a percentage `_pct` of `_total`\\n    */\\n    function _isValuePct(uint256 _value, uint256 _total, uint256 _pct) internal pure returns (bool) {\\n        if (_total == 0) {\\n            return false;\\n        }\\n\\n        uint256 computedPct = _value.mul(PCT_BASE) / _total;\\n        return computedPct > _pct;\\n    }\\n}\\n\",\"keccak256\":\"0x02d197def022067a0841bed3bbdfdf08403a43ab9ffa8e69cd6bf45318315b5f\"},\"@aragon/id/contracts/IFIFSResolvingRegistrar.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./ens/IPublicResolver.sol\\\";\\n\\n\\ninterface IFIFSResolvingRegistrar {\\n    function register(bytes32 _subnode, address _owner) external;\\n    function registerWithResolver(bytes32 _subnode, address _owner, IPublicResolver _resolver) public;\\n}\\n\",\"keccak256\":\"0x8814289dea9fc410164c2494929c38e289e42e69e7546833cf48b59b003d944f\"},\"@aragon/id/contracts/ens/IPublicResolver.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\n\\ninterface IPublicResolver {\\n    function supportsInterface(bytes4 interfaceID) constant returns (bool);\\n    function addr(bytes32 node) constant returns (address ret);\\n    function setAddr(bytes32 node, address addr);\\n    function hash(bytes32 node) constant returns (bytes32 ret);\\n    function setHash(bytes32 node, bytes32 hash);\\n}\\n\",\"keccak256\":\"0xd3cfaad61764512d8becada0f59d1a9db2a7349df2610e4a77f0fbf49750af03\"},\"@aragon/os/contracts/acl/ACL.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AragonApp.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/TimeHelpers.sol\\\";\\nimport \\\"./ACLSyntaxSugar.sol\\\";\\nimport \\\"./IACL.sol\\\";\\nimport \\\"./IACLOracle.sol\\\";\\n\\n\\n/* solium-disable function-order */\\n// Allow public initialize() to be first\\ncontract ACL is IACL, TimeHelpers, AragonApp, ACLHelpers {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = keccak256(\\\"CREATE_PERMISSIONS_ROLE\\\");\\n    */\\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = 0x0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a;\\n\\n    enum Op { NONE, EQ, NEQ, GT, LT, GTE, LTE, RET, NOT, AND, OR, XOR, IF_ELSE } // op types\\n\\n    struct Param {\\n        uint8 id;\\n        uint8 op;\\n        uint240 value; // even though value is an uint240 it can store addresses\\n        // in the case of 32 byte hashes losing 2 bytes precision isn't a huge deal\\n        // op and id take less than 1 byte each so it can be kept in 1 sstore\\n    }\\n\\n    uint8 internal constant BLOCK_NUMBER_PARAM_ID = 200;\\n    uint8 internal constant TIMESTAMP_PARAM_ID    = 201;\\n    // 202 is unused\\n    uint8 internal constant ORACLE_PARAM_ID       = 203;\\n    uint8 internal constant LOGIC_OP_PARAM_ID     = 204;\\n    uint8 internal constant PARAM_VALUE_PARAM_ID  = 205;\\n    // TODO: Add execution times param type?\\n\\n    /* Hardcoded constant to save gas\\n    bytes32 public constant EMPTY_PARAM_HASH = keccak256(uint256(0));\\n    */\\n    bytes32 public constant EMPTY_PARAM_HASH = 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\\n    bytes32 public constant NO_PERMISSION = bytes32(0);\\n    address public constant ANY_ENTITY = address(-1);\\n    address public constant BURN_ENTITY = address(1); // address(0) is already used as \\\"no permission manager\\\"\\n\\n    uint256 internal constant ORACLE_CHECK_GAS = 30000;\\n\\n    string private constant ERROR_AUTH_INIT_KERNEL = \\\"ACL_AUTH_INIT_KERNEL\\\";\\n    string private constant ERROR_AUTH_NO_MANAGER = \\\"ACL_AUTH_NO_MANAGER\\\";\\n    string private constant ERROR_EXISTENT_MANAGER = \\\"ACL_EXISTENT_MANAGER\\\";\\n\\n    // Whether someone has a permission\\n    mapping (bytes32 => bytes32) internal permissions; // permissions hash => params hash\\n    mapping (bytes32 => Param[]) internal permissionParams; // params hash => params\\n\\n    // Who is the manager of a permission\\n    mapping (bytes32 => address) internal permissionManager;\\n\\n    event SetPermission(address indexed entity, address indexed app, bytes32 indexed role, bool allowed);\\n    event SetPermissionParams(address indexed entity, address indexed app, bytes32 indexed role, bytes32 paramsHash);\\n    event ChangePermissionManager(address indexed app, bytes32 indexed role, address indexed manager);\\n\\n    modifier onlyPermissionManager(address _app, bytes32 _role) {\\n        require(msg.sender == getPermissionManager(_app, _role), ERROR_AUTH_NO_MANAGER);\\n        _;\\n    }\\n\\n    modifier noPermissionManager(address _app, bytes32 _role) {\\n        // only allow permission creation (or re-creation) when there is no manager\\n        require(getPermissionManager(_app, _role) == address(0), ERROR_EXISTENT_MANAGER);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\\n    * @notice Initialize an ACL instance and set `_permissionsCreator` as the entity that can create other permissions\\n    * @param _permissionsCreator Entity that will be given permission over createPermission\\n    */\\n    function initialize(address _permissionsCreator) public onlyInit {\\n        initialized();\\n        require(msg.sender == address(kernel()), ERROR_AUTH_INIT_KERNEL);\\n\\n        _createPermission(_permissionsCreator, this, CREATE_PERMISSIONS_ROLE, _permissionsCreator);\\n    }\\n\\n    /**\\n    * @dev Creates a permission that wasn't previously set and managed.\\n    *      If a created permission is removed it is possible to reset it with createPermission.\\n    *      This is the **ONLY** way to create permissions and set managers to permissions that don't\\n    *      have a manager.\\n    *      In terms of the ACL being initialized, this function implicitly protects all the other\\n    *      state-changing external functions, as they all require the sender to be a manager.\\n    * @notice Create a new permission granting `_entity` the ability to perform actions requiring `_role` on `_app`, setting `_manager` as the permission's manager\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n    * @param _role Identifier for the group of actions in app given access to perform\\n    * @param _manager Address of the entity that will be able to grant and revoke the permission further.\\n    */\\n    function createPermission(address _entity, address _app, bytes32 _role, address _manager)\\n        external\\n        auth(CREATE_PERMISSIONS_ROLE)\\n        noPermissionManager(_app, _role)\\n    {\\n        _createPermission(_entity, _app, _role, _manager);\\n    }\\n\\n    /**\\n    * @dev Grants permission if allowed. This requires `msg.sender` to be the permission manager\\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n    * @param _role Identifier for the group of actions in app given access to perform\\n    */\\n    function grantPermission(address _entity, address _app, bytes32 _role)\\n        external\\n    {\\n        grantPermissionP(_entity, _app, _role, new uint256[](0));\\n    }\\n\\n    /**\\n    * @dev Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager\\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n    * @param _role Identifier for the group of actions in app given access to perform\\n    * @param _params Permission parameters\\n    */\\n    function grantPermissionP(address _entity, address _app, bytes32 _role, uint256[] _params)\\n        public\\n        onlyPermissionManager(_app, _role)\\n    {\\n        bytes32 paramsHash = _params.length > 0 ? _saveParams(_params) : EMPTY_PARAM_HASH;\\n        _setPermission(_entity, _app, _role, paramsHash);\\n    }\\n\\n    /**\\n    * @dev Revokes permission if allowed. This requires `msg.sender` to be the the permission manager\\n    * @notice Revoke from `_entity` the ability to perform actions requiring `_role` on `_app`\\n    * @param _entity Address of the whitelisted entity to revoke access from\\n    * @param _app Address of the app in which the role will be revoked\\n    * @param _role Identifier for the group of actions in app being revoked\\n    */\\n    function revokePermission(address _entity, address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermission(_entity, _app, _role, NO_PERMISSION);\\n    }\\n\\n    /**\\n    * @notice Set `_newManager` as the manager of `_role` in `_app`\\n    * @param _newManager Address for the new manager\\n    * @param _app Address of the app in which the permission management is being transferred\\n    * @param _role Identifier for the group of actions being transferred\\n    */\\n    function setPermissionManager(address _newManager, address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(_newManager, _app, _role);\\n    }\\n\\n    /**\\n    * @notice Remove the manager of `_role` in `_app`\\n    * @param _app Address of the app in which the permission is being unmanaged\\n    * @param _role Identifier for the group of actions being unmanaged\\n    */\\n    function removePermissionManager(address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(address(0), _app, _role);\\n    }\\n\\n    /**\\n    * @notice Burn non-existent `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\\n    * @param _app Address of the app in which the permission is being burned\\n    * @param _role Identifier for the group of actions being burned\\n    */\\n    function createBurnedPermission(address _app, bytes32 _role)\\n        external\\n        auth(CREATE_PERMISSIONS_ROLE)\\n        noPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(BURN_ENTITY, _app, _role);\\n    }\\n\\n    /**\\n    * @notice Burn `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\\n    * @param _app Address of the app in which the permission is being burned\\n    * @param _role Identifier for the group of actions being burned\\n    */\\n    function burnPermissionManager(address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(BURN_ENTITY, _app, _role);\\n    }\\n\\n    /**\\n     * @notice Get parameters for permission array length\\n     * @param _entity Address of the whitelisted entity that will be able to perform the role\\n     * @param _app Address of the app\\n     * @param _role Identifier for a group of actions in app\\n     * @return Length of the array\\n     */\\n    function getPermissionParamsLength(address _entity, address _app, bytes32 _role) external view returns (uint) {\\n        return permissionParams[permissions[permissionHash(_entity, _app, _role)]].length;\\n    }\\n\\n    /**\\n    * @notice Get parameter for permission\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app\\n    * @param _role Identifier for a group of actions in app\\n    * @param _index Index of parameter in the array\\n    * @return Parameter (id, op, value)\\n    */\\n    function getPermissionParam(address _entity, address _app, bytes32 _role, uint _index)\\n        external\\n        view\\n        returns (uint8, uint8, uint240)\\n    {\\n        Param storage param = permissionParams[permissions[permissionHash(_entity, _app, _role)]][_index];\\n        return (param.id, param.op, param.value);\\n    }\\n\\n    /**\\n    * @dev Get manager for permission\\n    * @param _app Address of the app\\n    * @param _role Identifier for a group of actions in app\\n    * @return address of the manager for the permission\\n    */\\n    function getPermissionManager(address _app, bytes32 _role) public view returns (address) {\\n        return permissionManager[roleHash(_app, _role)];\\n    }\\n\\n    /**\\n    * @dev Function called by apps to check ACL on kernel or to check permission statu\\n    * @param _who Sender of the original call\\n    * @param _where Address of the app\\n    * @param _where Identifier for a group of actions in app\\n    * @param _how Permission parameters\\n    * @return boolean indicating whether the ACL allows the role or not\\n    */\\n    function hasPermission(address _who, address _where, bytes32 _what, bytes memory _how) public view returns (bool) {\\n        return hasPermission(_who, _where, _what, ConversionHelpers.dangerouslyCastBytesToUintArray(_how));\\n    }\\n\\n    function hasPermission(address _who, address _where, bytes32 _what, uint256[] memory _how) public view returns (bool) {\\n        bytes32 whoParams = permissions[permissionHash(_who, _where, _what)];\\n        if (whoParams != NO_PERMISSION && evalParams(whoParams, _who, _where, _what, _how)) {\\n            return true;\\n        }\\n\\n        bytes32 anyParams = permissions[permissionHash(ANY_ENTITY, _where, _what)];\\n        if (anyParams != NO_PERMISSION && evalParams(anyParams, ANY_ENTITY, _where, _what, _how)) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function hasPermission(address _who, address _where, bytes32 _what) public view returns (bool) {\\n        uint256[] memory empty = new uint256[](0);\\n        return hasPermission(_who, _where, _what, empty);\\n    }\\n\\n    function evalParams(\\n        bytes32 _paramsHash,\\n        address _who,\\n        address _where,\\n        bytes32 _what,\\n        uint256[] _how\\n    ) public view returns (bool)\\n    {\\n        if (_paramsHash == EMPTY_PARAM_HASH) {\\n            return true;\\n        }\\n\\n        return _evalParam(_paramsHash, 0, _who, _where, _what, _how);\\n    }\\n\\n    /**\\n    * @dev Internal createPermission for access inside the kernel (on instantiation)\\n    */\\n    function _createPermission(address _entity, address _app, bytes32 _role, address _manager) internal {\\n        _setPermission(_entity, _app, _role, EMPTY_PARAM_HASH);\\n        _setPermissionManager(_manager, _app, _role);\\n    }\\n\\n    /**\\n    * @dev Internal function called to actually save the permission\\n    */\\n    function _setPermission(address _entity, address _app, bytes32 _role, bytes32 _paramsHash) internal {\\n        permissions[permissionHash(_entity, _app, _role)] = _paramsHash;\\n        bool entityHasPermission = _paramsHash != NO_PERMISSION;\\n        bool permissionHasParams = entityHasPermission && _paramsHash != EMPTY_PARAM_HASH;\\n\\n        emit SetPermission(_entity, _app, _role, entityHasPermission);\\n        if (permissionHasParams) {\\n            emit SetPermissionParams(_entity, _app, _role, _paramsHash);\\n        }\\n    }\\n\\n    function _saveParams(uint256[] _encodedParams) internal returns (bytes32) {\\n        bytes32 paramHash = keccak256(abi.encodePacked(_encodedParams));\\n        Param[] storage params = permissionParams[paramHash];\\n\\n        if (params.length == 0) { // params not saved before\\n            for (uint256 i = 0; i < _encodedParams.length; i++) {\\n                uint256 encodedParam = _encodedParams[i];\\n                Param memory param = Param(decodeParamId(encodedParam), decodeParamOp(encodedParam), uint240(encodedParam));\\n                params.push(param);\\n            }\\n        }\\n\\n        return paramHash;\\n    }\\n\\n    function _evalParam(\\n        bytes32 _paramsHash,\\n        uint32 _paramId,\\n        address _who,\\n        address _where,\\n        bytes32 _what,\\n        uint256[] _how\\n    ) internal view returns (bool)\\n    {\\n        if (_paramId >= permissionParams[_paramsHash].length) {\\n            return false; // out of bounds\\n        }\\n\\n        Param memory param = permissionParams[_paramsHash][_paramId];\\n\\n        if (param.id == LOGIC_OP_PARAM_ID) {\\n            return _evalLogic(param, _paramsHash, _who, _where, _what, _how);\\n        }\\n\\n        uint256 value;\\n        uint256 comparedTo = uint256(param.value);\\n\\n        // get value\\n        if (param.id == ORACLE_PARAM_ID) {\\n            value = checkOracle(IACLOracle(param.value), _who, _where, _what, _how) ? 1 : 0;\\n            comparedTo = 1;\\n        } else if (param.id == BLOCK_NUMBER_PARAM_ID) {\\n            value = getBlockNumber();\\n        } else if (param.id == TIMESTAMP_PARAM_ID) {\\n            value = getTimestamp();\\n        } else if (param.id == PARAM_VALUE_PARAM_ID) {\\n            value = uint256(param.value);\\n        } else {\\n            if (param.id >= _how.length) {\\n                return false;\\n            }\\n            value = uint256(uint240(_how[param.id])); // force lost precision\\n        }\\n\\n        if (Op(param.op) == Op.RET) {\\n            return uint256(value) > 0;\\n        }\\n\\n        return compare(value, Op(param.op), comparedTo);\\n    }\\n\\n    function _evalLogic(Param _param, bytes32 _paramsHash, address _who, address _where, bytes32 _what, uint256[] _how)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (Op(_param.op) == Op.IF_ELSE) {\\n            uint32 conditionParam;\\n            uint32 successParam;\\n            uint32 failureParam;\\n\\n            (conditionParam, successParam, failureParam) = decodeParamsList(uint256(_param.value));\\n            bool result = _evalParam(_paramsHash, conditionParam, _who, _where, _what, _how);\\n\\n            return _evalParam(_paramsHash, result ? successParam : failureParam, _who, _where, _what, _how);\\n        }\\n\\n        uint32 param1;\\n        uint32 param2;\\n\\n        (param1, param2,) = decodeParamsList(uint256(_param.value));\\n        bool r1 = _evalParam(_paramsHash, param1, _who, _where, _what, _how);\\n\\n        if (Op(_param.op) == Op.NOT) {\\n            return !r1;\\n        }\\n\\n        if (r1 && Op(_param.op) == Op.OR) {\\n            return true;\\n        }\\n\\n        if (!r1 && Op(_param.op) == Op.AND) {\\n            return false;\\n        }\\n\\n        bool r2 = _evalParam(_paramsHash, param2, _who, _where, _what, _how);\\n\\n        if (Op(_param.op) == Op.XOR) {\\n            return r1 != r2;\\n        }\\n\\n        return r2; // both or and and depend on result of r2 after checks\\n    }\\n\\n    function compare(uint256 _a, Op _op, uint256 _b) internal pure returns (bool) {\\n        if (_op == Op.EQ)  return _a == _b;                              // solium-disable-line lbrace\\n        if (_op == Op.NEQ) return _a != _b;                              // solium-disable-line lbrace\\n        if (_op == Op.GT)  return _a > _b;                               // solium-disable-line lbrace\\n        if (_op == Op.LT)  return _a < _b;                               // solium-disable-line lbrace\\n        if (_op == Op.GTE) return _a >= _b;                              // solium-disable-line lbrace\\n        if (_op == Op.LTE) return _a <= _b;                              // solium-disable-line lbrace\\n        return false;\\n    }\\n\\n    function checkOracle(IACLOracle _oracleAddr, address _who, address _where, bytes32 _what, uint256[] _how) internal view returns (bool) {\\n        bytes4 sig = _oracleAddr.canPerform.selector;\\n\\n        // a raw call is required so we can return false if the call reverts, rather than reverting\\n        bytes memory checkCalldata = abi.encodeWithSelector(sig, _who, _where, _what, _how);\\n        uint256 oracleCheckGas = ORACLE_CHECK_GAS;\\n\\n        bool ok;\\n        assembly {\\n            ok := staticcall(oracleCheckGas, _oracleAddr, add(checkCalldata, 0x20), mload(checkCalldata), 0, 0)\\n        }\\n\\n        if (!ok) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := returndatasize }\\n        if (size != 32) {\\n            return false;\\n        }\\n\\n        bool result;\\n        assembly {\\n            let ptr := mload(0x40)       // get next free memory ptr\\n            returndatacopy(ptr, 0, size) // copy return from above `staticcall`\\n            result := mload(ptr)         // read data at ptr and set it to result\\n            mstore(ptr, 0)               // set pointer memory to 0 so it still is the next free ptr\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n    * @dev Internal function that sets management\\n    */\\n    function _setPermissionManager(address _newManager, address _app, bytes32 _role) internal {\\n        permissionManager[roleHash(_app, _role)] = _newManager;\\n        emit ChangePermissionManager(_app, _role, _newManager);\\n    }\\n\\n    function roleHash(address _where, bytes32 _what) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"ROLE\\\", _where, _what));\\n    }\\n\\n    function permissionHash(address _who, address _where, bytes32 _what) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"PERMISSION\\\", _who, _where, _what));\\n    }\\n}\\n\",\"keccak256\":\"0xcb2488421b22af099bafe210916d33c9b7c3a06c4290583ff74733a825860754\"},\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[]) {\\n        return new uint256[](0);\\n    }\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c, _d);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0x519915c14576b679b5ed5767d6b21b44a13aa7ae2fe7b33664ca364fafc33e00\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0xe3492bc29d2482e65d2e39c96487b5388f6181f6bcdc6fe6329b8206b84c0cf1\"},\"@aragon/os/contracts/acl/IACLOracle.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACLOracle {\\n    function canPerform(address who, address where, bytes32 what, uint256[] how) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xada5651af900192b440c9a7802d531846d9d4ce12338b53f3091257b4c2e9f28\"},\"@aragon/os/contracts/apm/APMNamehash.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract APMNamehash {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant APM_NODE = keccak256(abi.encodePacked(ETH_TLD_NODE, keccak256(abi.encodePacked(\\\"aragonpm\\\"))));\\n    */\\n    bytes32 internal constant APM_NODE = 0x9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba;\\n\\n    function apmNamehash(string name) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(APM_NODE, keccak256(bytes(name))));\\n    }\\n}\\n\",\"keccak256\":\"0x15fab5cd60bed163fa1234561ec86a04d88d8f54522d97dcbf39e1e6cfdb01d6\"},\"@aragon/os/contracts/apm/Repo.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AragonApp.sol\\\";\\n\\n\\n/* solium-disable function-order */\\n// Allow public initialize() to be first\\ncontract Repo is AragonApp {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant CREATE_VERSION_ROLE = keccak256(\\\"CREATE_VERSION_ROLE\\\");\\n    */\\n    bytes32 public constant CREATE_VERSION_ROLE = 0x1f56cfecd3595a2e6cc1a7e6cb0b20df84cdbd92eff2fee554e70e4e45a9a7d8;\\n\\n    string private constant ERROR_INVALID_BUMP = \\\"REPO_INVALID_BUMP\\\";\\n    string private constant ERROR_INVALID_VERSION = \\\"REPO_INVALID_VERSION\\\";\\n    string private constant ERROR_INEXISTENT_VERSION = \\\"REPO_INEXISTENT_VERSION\\\";\\n\\n    struct Version {\\n        uint16[3] semanticVersion;\\n        address contractAddress;\\n        bytes contentURI;\\n    }\\n\\n    uint256 internal versionsNextIndex;\\n    mapping (uint256 => Version) internal versions;\\n    mapping (bytes32 => uint256) internal versionIdForSemantic;\\n    mapping (address => uint256) internal latestVersionIdForContract;\\n\\n    event NewVersion(uint256 versionId, uint16[3] semanticVersion);\\n\\n    /**\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\\n    * @notice Initialize this Repo\\n    */\\n    function initialize() public onlyInit {\\n        initialized();\\n        versionsNextIndex = 1;\\n    }\\n\\n    /**\\n    * @notice Create new version with contract `_contractAddress` and content `@fromHex(_contentURI)`\\n    * @param _newSemanticVersion Semantic version for new repo version\\n    * @param _contractAddress address for smart contract logic for version (if set to 0, it uses last versions' contractAddress)\\n    * @param _contentURI External URI for fetching new version's content\\n    */\\n    function newVersion(\\n        uint16[3] _newSemanticVersion,\\n        address _contractAddress,\\n        bytes _contentURI\\n    ) public auth(CREATE_VERSION_ROLE)\\n    {\\n        address contractAddress = _contractAddress;\\n        uint256 lastVersionIndex = versionsNextIndex - 1;\\n\\n        uint16[3] memory lastSematicVersion;\\n\\n        if (lastVersionIndex > 0) {\\n            Version storage lastVersion = versions[lastVersionIndex];\\n            lastSematicVersion = lastVersion.semanticVersion;\\n\\n            if (contractAddress == address(0)) {\\n                contractAddress = lastVersion.contractAddress;\\n            }\\n            // Only allows smart contract change on major version bumps\\n            require(\\n                lastVersion.contractAddress == contractAddress || _newSemanticVersion[0] > lastVersion.semanticVersion[0],\\n                ERROR_INVALID_VERSION\\n            );\\n        }\\n\\n        require(isValidBump(lastSematicVersion, _newSemanticVersion), ERROR_INVALID_BUMP);\\n\\n        uint256 versionId = versionsNextIndex++;\\n        versions[versionId] = Version(_newSemanticVersion, contractAddress, _contentURI);\\n        versionIdForSemantic[semanticVersionHash(_newSemanticVersion)] = versionId;\\n        latestVersionIdForContract[contractAddress] = versionId;\\n\\n        emit NewVersion(versionId, _newSemanticVersion);\\n    }\\n\\n    function getLatest() public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\\n        return getByVersionId(versionsNextIndex - 1);\\n    }\\n\\n    function getLatestForContractAddress(address _contractAddress)\\n        public\\n        view\\n        returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI)\\n    {\\n        return getByVersionId(latestVersionIdForContract[_contractAddress]);\\n    }\\n\\n    function getBySemanticVersion(uint16[3] _semanticVersion)\\n        public\\n        view\\n        returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI)\\n    {\\n        return getByVersionId(versionIdForSemantic[semanticVersionHash(_semanticVersion)]);\\n    }\\n\\n    function getByVersionId(uint _versionId) public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\\n        require(_versionId > 0 && _versionId < versionsNextIndex, ERROR_INEXISTENT_VERSION);\\n        Version storage version = versions[_versionId];\\n        return (version.semanticVersion, version.contractAddress, version.contentURI);\\n    }\\n\\n    function getVersionsCount() public view returns (uint256) {\\n        return versionsNextIndex - 1;\\n    }\\n\\n    function isValidBump(uint16[3] _oldVersion, uint16[3] _newVersion) public pure returns (bool) {\\n        bool hasBumped;\\n        uint i = 0;\\n        while (i < 3) {\\n            if (hasBumped) {\\n                if (_newVersion[i] != 0) {\\n                    return false;\\n                }\\n            } else if (_newVersion[i] != _oldVersion[i]) {\\n                if (_oldVersion[i] > _newVersion[i] || _newVersion[i] - _oldVersion[i] != 1) {\\n                    return false;\\n                }\\n                hasBumped = true;\\n            }\\n            i++;\\n        }\\n        return hasBumped;\\n    }\\n\\n    function semanticVersionHash(uint16[3] version) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(version[0], version[1], version[2]));\\n    }\\n}\\n\",\"keccak256\":\"0x4df44671f92e5410aa0fca7f515b562784a8da63e21e8872fdf275835d5c2dd1\"},\"@aragon/os/contracts/apps/AppProxyBase.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../common/DepositableDelegateProxy.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppProxyBase is AppStorage, DepositableDelegateProxy, KernelNamespaceConstants {\\n    /**\\n    * @dev Initialize AppProxy\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public {\\n        setKernel(_kernel);\\n        setAppId(_appId);\\n\\n        // Implicit check that kernel is actually a Kernel\\n        // The EVM doesn't actually provide a way for us to make sure, but we can force a revert to\\n        // occur if the kernel is set to 0x0 or a non-code address when we try to call a method on\\n        // it.\\n        address appCode = getAppBase(_appId);\\n\\n        // If initialize payload is provided, it will be executed\\n        if (_initializePayload.length > 0) {\\n            require(isContract(appCode));\\n            // Cannot make delegatecall as a delegateproxy.delegatedFwd as it\\n            // returns ending execution context and halts contract deployment\\n            require(appCode.delegatecall(_initializePayload));\\n        }\\n    }\\n\\n    function getAppBase(bytes32 _appId) internal view returns (address) {\\n        return kernel().getApp(KERNEL_APP_BASES_NAMESPACE, _appId);\\n    }\\n}\\n\",\"keccak256\":\"0x6d591412d30dc3d5079f8c5cab04f83ad44be376a9e4143d4a3b2067cd7a4483\"},\"@aragon/os/contracts/apps/AppProxyPinned.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"./AppProxyBase.sol\\\";\\n\\n\\ncontract AppProxyPinned is IsContract, AppProxyBase {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.appStorage.pinnedCode\\\")\\n    bytes32 internal constant PINNED_CODE_POSITION = 0xdee64df20d65e53d7f51cb6ab6d921a0a6a638a91e942e1d8d02df28e31c038e;\\n\\n    /**\\n    * @dev Initialize AppProxyPinned (makes it an un-upgradeable Aragon app)\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\\n        AppProxyBase(_kernel, _appId, _initializePayload)\\n        public // solium-disable-line visibility-first\\n    {\\n        setPinnedCode(getAppBase(_appId));\\n        require(isContract(pinnedCode()));\\n    }\\n\\n    /**\\n     * @dev ERC897, the address the proxy would delegate calls to\\n     */\\n    function implementation() public view returns (address) {\\n        return pinnedCode();\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return FORWARDING;\\n    }\\n\\n    function setPinnedCode(address _pinnedCode) internal {\\n        PINNED_CODE_POSITION.setStorageAddress(_pinnedCode);\\n    }\\n\\n    function pinnedCode() internal view returns (address) {\\n        return PINNED_CODE_POSITION.getStorageAddress();\\n    }\\n}\\n\",\"keccak256\":\"0xbe6285bcc237c696e297948be02cfad8d48812ba52d67f8947b52c0546da53b1\"},\"@aragon/os/contracts/apps/AppProxyUpgradeable.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./AppProxyBase.sol\\\";\\n\\n\\ncontract AppProxyUpgradeable is AppProxyBase {\\n    /**\\n    * @dev Initialize AppProxyUpgradeable (makes it an upgradeable Aragon app)\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\\n        AppProxyBase(_kernel, _appId, _initializePayload)\\n        public // solium-disable-line visibility-first\\n    {\\n        // solium-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev ERC897, the address the proxy would delegate calls to\\n     */\\n    function implementation() public view returns (address) {\\n        return getAppBase(appId());\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return UPGRADEABLE;\\n    }\\n}\\n\",\"keccak256\":\"0xbcc626f70099c7e859b9c2bb8ca91e72b84f9e6783f91277e40737d51bd2c433\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_POSITION = keccak256(\\\"aragonOS.appStorage.kernel\\\");\\n    bytes32 internal constant APP_ID_POSITION = keccak256(\\\"aragonOS.appStorage.appId\\\");\\n    */\\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\\n\\n    function kernel() public view returns (IKernel) {\\n        return IKernel(KERNEL_POSITION.getStorageAddress());\\n    }\\n\\n    function appId() public view returns (bytes32) {\\n        return APP_ID_POSITION.getStorageBytes32();\\n    }\\n\\n    function setKernel(IKernel _kernel) internal {\\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\\n    }\\n\\n    function setAppId(bytes32 _appId) internal {\\n        APP_ID_POSITION.setStorageBytes32(_appId);\\n    }\\n}\\n\",\"keccak256\":\"0xb1c8eb71d1bdfe1241cc1714b280b46bbfc5bcb1e8499d42c24d3f5f5e8130f1\"},\"@aragon/os/contracts/apps/AragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/Autopetrified.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/ReentrancyGuard.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\n\\n\\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\\n// that they can never be initialized.\\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\\n// are included so that they are automatically usable by subclassing contracts\\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\\n    string private constant ERROR_AUTH_FAILED = \\\"APP_AUTH_FAILED\\\";\\n\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] _params) {\\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\\n    * @param _sender Sender of the call\\n    * @param _role Role on this app\\n    * @param _params Permission params for the role\\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\\n    *         Always returns false if the app hasn't been initialized yet.\\n    */\\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\\n        if (!hasInitialized()) {\\n            return false;\\n        }\\n\\n        IKernel linkedKernel = kernel();\\n        if (address(linkedKernel) == address(0)) {\\n            return false;\\n        }\\n\\n        return linkedKernel.hasPermission(\\n            _sender,\\n            address(this),\\n            _role,\\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\\n        );\\n    }\\n\\n    /**\\n    * @dev Get the recovery vault for the app\\n    * @return Recovery vault address for the app\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\\n    }\\n}\\n\",\"keccak256\":\"0xba456000d65bea8d9d82e9f1789086c3777df68fe364f8f397973b6d579f3a2a\"},\"@aragon/os/contracts/common/Autopetrified.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Petrifiable.sol\\\";\\n\\n\\ncontract Autopetrified is Petrifiable {\\n    constructor() public {\\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\\n        // This renders them uninitializable (and unusable without a proxy).\\n        petrify();\\n    }\\n}\\n\",\"keccak256\":\"0x216e6ecbdcf45d90e8846ab2773072bd82180558a7dcf0c5425ed13b0188c5f3\"},\"@aragon/os/contracts/common/ConversionHelpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary ConversionHelpers {\\n    string private constant ERROR_IMPROPER_LENGTH = \\\"CONVERSION_IMPROPER_LENGTH\\\";\\n\\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\\n        // Force cast the uint256[] into a bytes array, by overwriting its length\\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 byteLength = _input.length * 32;\\n        assembly {\\n            output := _input\\n            mstore(output, byteLength)\\n        }\\n    }\\n\\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\\n        // Force cast the bytes array into a uint256[], by overwriting its length\\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 intsLength = _input.length / 32;\\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\\n\\n        assembly {\\n            output := _input\\n            mstore(output, intsLength)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9872383d458352f5c68fa5afd1fc84ab6b172cbee33359cfa57655b8eda92416\"},\"@aragon/os/contracts/common/DelegateProxy.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"../lib/misc/ERCProxy.sol\\\";\\n\\n\\ncontract DelegateProxy is ERCProxy, IsContract {\\n    uint256 internal constant FWD_GAS_LIMIT = 10000;\\n\\n    /**\\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\\n    * @param _dst Destination address to perform the delegatecall\\n    * @param _calldata Calldata for the delegatecall\\n    */\\n    function delegatedFwd(address _dst, bytes _calldata) internal {\\n        require(isContract(_dst));\\n        uint256 fwdGasLimit = FWD_GAS_LIMIT;\\n\\n        assembly {\\n            let result := delegatecall(sub(gas, fwdGasLimit), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\\n            let size := returndatasize\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, size)\\n\\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\\n            // if the call returned error data, forward it\\n            switch result case 0 { revert(ptr, size) }\\n            default { return(ptr, size) }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x381a4ab9b57abf496b337146a52d533aaf6a8247941fbc19735cbde0e891e85b\"},\"@aragon/os/contracts/common/DepositableDelegateProxy.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./DelegateProxy.sol\\\";\\nimport \\\"./DepositableStorage.sol\\\";\\n\\n\\ncontract DepositableDelegateProxy is DepositableStorage, DelegateProxy {\\n    event ProxyDeposit(address sender, uint256 value);\\n\\n    function () external payable {\\n        uint256 forwardGasThreshold = FWD_GAS_LIMIT;\\n        bytes32 isDepositablePosition = DEPOSITABLE_POSITION;\\n\\n        // Optimized assembly implementation to prevent EIP-1884 from breaking deposits, reference code in Solidity:\\n        // https://github.com/aragon/aragonOS/blob/v4.2.1/contracts/common/DepositableDelegateProxy.sol#L10-L20\\n        assembly {\\n            // Continue only if the gas left is lower than the threshold for forwarding to the implementation code,\\n            // otherwise continue outside of the assembly block.\\n            if lt(gas, forwardGasThreshold) {\\n                // Only accept the deposit and emit an event if all of the following are true:\\n                // the proxy accepts deposits (isDepositable), msg.data.length == 0, and msg.value > 0\\n                if and(and(sload(isDepositablePosition), iszero(calldatasize)), gt(callvalue, 0)) {\\n                    // Equivalent Solidity code for emitting the event:\\n                    // emit ProxyDeposit(msg.sender, msg.value);\\n\\n                    let logData := mload(0x40) // free memory pointer\\n                    mstore(logData, caller) // add 'msg.sender' to the log data (first event param)\\n                    mstore(add(logData, 0x20), callvalue) // add 'msg.value' to the log data (second event param)\\n\\n                    // Emit an event with one topic to identify the event: keccak256('ProxyDeposit(address,uint256)') = 0x15ee...dee1\\n                    log1(logData, 0x40, 0x15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee1)\\n\\n                    stop() // Stop. Exits execution context\\n                }\\n\\n                // If any of above checks failed, revert the execution (if ETH was sent, it is returned to the sender)\\n                revert(0, 0)\\n            }\\n        }\\n\\n        address target = implementation();\\n        delegatedFwd(target, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0x80a08f88ca7051a248c6fd91283fef4b01b241d1dc97e13499f1460093ff3068\"},\"@aragon/os/contracts/common/DepositableStorage.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract DepositableStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.depositableStorage.depositable\\\")\\n    bytes32 internal constant DEPOSITABLE_POSITION = 0x665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea;\\n\\n    function isDepositable() public view returns (bool) {\\n        return DEPOSITABLE_POSITION.getStorageBool();\\n    }\\n\\n    function setDepositable(bool _depositable) internal {\\n        DEPOSITABLE_POSITION.setStorageBool(_depositable);\\n    }\\n}\\n\",\"keccak256\":\"0x67e1884ba4c91de1c6fe1fc2c1c632c29ed3e7894a434c049be9f1ed80539237\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address internal constant ETH = address(0);\\n}\\n\",\"keccak256\":\"0xb18d16ad5127519251d9759349bf0ce1e5cfc861a776c5297b91a625c84d0363\"},\"@aragon/os/contracts/common/IForwarder.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IForwarder {\\n    function isForwarder() external pure returns (bool);\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function canForward(address sender, bytes evmCallScript) public view returns (bool);\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function forward(bytes evmCallScript) public;\\n}\\n\",\"keccak256\":\"0xd862ca160ed12725de3044b1f1c90248e8c26ec764f64f2c06ac57279a7a712b\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IVaultRecoverable {\\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\\n\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) external view returns (bool);\\n    function getRecoveryVault() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd7cb66ee5d01be69a6abab04583cc86755bf63c2f1fd03b519a876162f52b323\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract Initializable is TimeHelpers {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.initializable.initializationBlock\\\")\\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\\n\\n    string private constant ERROR_ALREADY_INITIALIZED = \\\"INIT_ALREADY_INITIALIZED\\\";\\n    string private constant ERROR_NOT_INITIALIZED = \\\"INIT_NOT_INITIALIZED\\\";\\n\\n    modifier onlyInit {\\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n    * @return Whether the contract has been initialized by the time of the current block\\n    */\\n    function hasInitialized() public view returns (bool) {\\n        uint256 initializationBlock = getInitializationBlock();\\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization to enable the contract\\n    *      at a future block number rather than immediately.\\n    */\\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xc559fdbee1c0ee18b6f2f866c28ed6eb96859b2c88f75867ca11f25ebd00b090\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract IsContract {\\n    /*\\n    * NOTE: this should NEVER be used for authentication\\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\\n    *\\n    * This is only intended to be used as a sanity check that an address is actually a contract,\\n    * RATHER THAN an address not being a contract.\\n    */\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xb76e263e3532883fe32dfe4b1447eb487a570e121c5cce01cee604dd9e44a075\"},\"@aragon/os/contracts/common/Petrifiable.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n\\ncontract Petrifiable is Initializable {\\n    // Use block UINT256_MAX (which should be never) as the initializable date\\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\\n\\n    function isPetrified() public view returns (bool) {\\n        return getInitializationBlock() == PETRIFIED_BLOCK;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract to prevent being initialized.\\n    *      Useful for freezing base contracts when they're used behind proxies.\\n    */\\n    function petrify() internal onlyInit {\\n        initializedAt(PETRIFIED_BLOCK);\\n    }\\n}\\n\",\"keccak256\":\"0xb69f9d6de8ff6f2a084aca2e0228c9008a8776482a70bcab16f46a693ec77be6\"},\"@aragon/os/contracts/common/ReentrancyGuard.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\n\\n\\ncontract ReentrancyGuard {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\\\"aragonOS.reentrancyGuard.mutex\\\");\\n    */\\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\\n\\n    string private constant ERROR_REENTRANT = \\\"REENTRANCY_REENTRANT_CALL\\\";\\n\\n    modifier nonReentrant() {\\n        // Ensure mutex is unlocked\\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\\n\\n        // Lock mutex before function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\\n\\n        // Perform function call\\n        _;\\n\\n        // Unlock mutex after function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\\n    }\\n}\\n\",\"keccak256\":\"0x2b2014de57620aedded6365e742e17b9a23492d754e48dfeefa56f7e5bcf5645\"},\"@aragon/os/contracts/common/SafeERC20.sol\":{\"content\":\"// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\n\\n\\nlibrary SafeERC20 {\\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\\n    // https://github.com/ethereum/solidity/issues/3544\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\n\\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \\\"SAFE_ERC_20_BALANCE_REVERTED\\\";\\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \\\"SAFE_ERC_20_ALLOWANCE_REVERTED\\\";\\n\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\n        private\\n        returns (bool)\\n    {\\n        bool ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            let success := call(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                0,                    // no value\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                // Check number of bytes returned from last function call\\n                switch returndatasize\\n\\n                // No bytes returned: assume success\\n                case 0 {\\n                    ret := 1\\n                }\\n\\n                // 32 bytes returned: check if non-zero\\n                case 0x20 {\\n                    // Only return success if returned data was true\\n                    // Already have output in ptr\\n                    ret := eq(mload(ptr), 1)\\n                }\\n\\n                // Not sure what was returned: don't mark as success\\n                default { }\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    function staticInvoke(address _addr, bytes memory _calldata)\\n        private\\n        view\\n        returns (bool, uint256)\\n    {\\n        bool success;\\n        uint256 ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            success := staticcall(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                ret := mload(ptr)\\n            }\\n        }\\n        return (success, ret);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferCallData = abi.encodeWithSelector(\\n            TRANSFER_SELECTOR,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\n            _token.transferFrom.selector,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferFromCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\n        bytes memory approveCallData = abi.encodeWithSelector(\\n            _token.approve.selector,\\n            _spender,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, approveCallData);\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.balanceOf().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\\n            _token.balanceOf.selector,\\n            _owner\\n        );\\n\\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\\n\\n        return tokenBalance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.allowance().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\\n        bytes memory allowanceCallData = abi.encodeWithSelector(\\n            _token.allowance.selector,\\n            _owner,\\n            _spender\\n        );\\n\\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return allowance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.totalSupply().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\\n\\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return totalSupply;\\n    }\\n}\\n\",\"keccak256\":\"0xd251a1207e1faa4c41500bf927310bb739b1fbc0bf880f236f8e0a9236d6a03a\"},\"@aragon/os/contracts/common/TimeHelpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Uint256Helpers.sol\\\";\\n\\n\\ncontract TimeHelpers {\\n    using Uint256Helpers for uint256;\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n    * @dev Returns the current block number, converted to uint64.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber64() internal view returns (uint64) {\\n        return getBlockNumber().toUint64();\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp() internal view returns (uint256) {\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp, converted to uint64.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp64() internal view returns (uint64) {\\n        return getTimestamp().toUint64();\\n    }\\n}\\n\",\"keccak256\":\"0x95b785dc4319f6ce5255c9adf5e68a469a0f837f7b02e01b6bc974b4921d4024\"},\"@aragon/os/contracts/common/Uint256Helpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT64 = uint64(-1);\\n\\n    string private constant ERROR_NUMBER_TOO_BIG = \\\"UINT64_NUMBER_TOO_BIG\\\";\\n\\n    function toUint64(uint256 a) internal pure returns (uint64) {\\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\\n        return uint64(a);\\n    }\\n}\\n\",\"keccak256\":\"0x83033025a3f4402be3b7bcc9a23ce96ae4fadc7f251da8f139d73a13a3400b0c\"},\"@aragon/os/contracts/common/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n}\\n\",\"keccak256\":\"0xe0d627fc7a7716409389f34cfe49366ba7871309d3a73262ec9608ef73e47591\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    using SafeERC20 for ERC20;\\n\\n    string private constant ERROR_DISALLOWED = \\\"RECOVER_DISALLOWED\\\";\\n    string private constant ERROR_VAULT_NOT_CONTRACT = \\\"RECOVER_VAULT_NOT_CONTRACT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \\\"RECOVER_TOKEN_TRANSFER_FAILED\\\";\\n\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\\n        address vault = getRecoveryVault();\\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\\n\\n        uint256 balance;\\n        if (_token == ETH) {\\n            balance = address(this).balance;\\n            vault.transfer(balance);\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            balance = token.staticBalanceOf(this);\\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\\n        }\\n\\n        emit RecoverToVault(vault, _token, balance);\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n\\n    // Cast non-implemented interface to be public so we can use it internally\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0x4f4de2c27ea7df731ad7d9babc37965a805282fed16b422f46a35d9d2ef931a1\"},\"@aragon/os/contracts/evmscript/EVMScriptRegistry.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AragonApp.sol\\\";\\nimport \\\"./ScriptHelpers.sol\\\";\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\n\\n/* solium-disable function-order */\\n// Allow public initialize() to be first\\ncontract EVMScriptRegistry is IEVMScriptRegistry, EVMScriptRegistryConstants, AragonApp {\\n    using ScriptHelpers for bytes;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant REGISTRY_ADD_EXECUTOR_ROLE = keccak256(\\\"REGISTRY_ADD_EXECUTOR_ROLE\\\");\\n    bytes32 public constant REGISTRY_MANAGER_ROLE = keccak256(\\\"REGISTRY_MANAGER_ROLE\\\");\\n    */\\n    bytes32 public constant REGISTRY_ADD_EXECUTOR_ROLE = 0xc4e90f38eea8c4212a009ca7b8947943ba4d4a58d19b683417f65291d1cd9ed2;\\n    // WARN: Manager can censor all votes and the like happening in an org\\n    bytes32 public constant REGISTRY_MANAGER_ROLE = 0xf7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa3;\\n\\n    uint256 internal constant SCRIPT_START_LOCATION = 4;\\n\\n    string private constant ERROR_INEXISTENT_EXECUTOR = \\\"EVMREG_INEXISTENT_EXECUTOR\\\";\\n    string private constant ERROR_EXECUTOR_ENABLED = \\\"EVMREG_EXECUTOR_ENABLED\\\";\\n    string private constant ERROR_EXECUTOR_DISABLED = \\\"EVMREG_EXECUTOR_DISABLED\\\";\\n    string private constant ERROR_SCRIPT_LENGTH_TOO_SHORT = \\\"EVMREG_SCRIPT_LENGTH_TOO_SHORT\\\";\\n\\n    struct ExecutorEntry {\\n        IEVMScriptExecutor executor;\\n        bool enabled;\\n    }\\n\\n    uint256 private executorsNextIndex;\\n    mapping (uint256 => ExecutorEntry) public executors;\\n\\n    event EnableExecutor(uint256 indexed executorId, address indexed executorAddress);\\n    event DisableExecutor(uint256 indexed executorId, address indexed executorAddress);\\n\\n    modifier executorExists(uint256 _executorId) {\\n        require(_executorId > 0 && _executorId < executorsNextIndex, ERROR_INEXISTENT_EXECUTOR);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Initialize the registry\\n    */\\n    function initialize() public onlyInit {\\n        initialized();\\n        // Create empty record to begin executor IDs at 1\\n        executorsNextIndex = 1;\\n    }\\n\\n    /**\\n    * @notice Add a new script executor with address `_executor` to the registry\\n    * @param _executor Address of the IEVMScriptExecutor that will be added to the registry\\n    * @return id Identifier of the executor in the registry\\n    */\\n    function addScriptExecutor(IEVMScriptExecutor _executor) external auth(REGISTRY_ADD_EXECUTOR_ROLE) returns (uint256 id) {\\n        uint256 executorId = executorsNextIndex++;\\n        executors[executorId] = ExecutorEntry(_executor, true);\\n        emit EnableExecutor(executorId, _executor);\\n        return executorId;\\n    }\\n\\n    /**\\n    * @notice Disable script executor with ID `_executorId`\\n    * @param _executorId Identifier of the executor in the registry\\n    */\\n    function disableScriptExecutor(uint256 _executorId)\\n        external\\n        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\\n    {\\n        // Note that we don't need to check for an executor's existence in this case, as only\\n        // existing executors can be enabled\\n        ExecutorEntry storage executorEntry = executors[_executorId];\\n        require(executorEntry.enabled, ERROR_EXECUTOR_DISABLED);\\n        executorEntry.enabled = false;\\n        emit DisableExecutor(_executorId, executorEntry.executor);\\n    }\\n\\n    /**\\n    * @notice Enable script executor with ID `_executorId`\\n    * @param _executorId Identifier of the executor in the registry\\n    */\\n    function enableScriptExecutor(uint256 _executorId)\\n        external\\n        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\\n        executorExists(_executorId)\\n    {\\n        ExecutorEntry storage executorEntry = executors[_executorId];\\n        require(!executorEntry.enabled, ERROR_EXECUTOR_ENABLED);\\n        executorEntry.enabled = true;\\n        emit EnableExecutor(_executorId, executorEntry.executor);\\n    }\\n\\n    /**\\n    * @dev Get the script executor that can execute a particular script based on its first 4 bytes\\n    * @param _script EVMScript being inspected\\n    */\\n    function getScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        require(_script.length >= SCRIPT_START_LOCATION, ERROR_SCRIPT_LENGTH_TOO_SHORT);\\n        uint256 id = _script.getSpecId();\\n\\n        // Note that we don't need to check for an executor's existence in this case, as only\\n        // existing executors can be enabled\\n        ExecutorEntry storage entry = executors[id];\\n        return entry.enabled ? entry.executor : IEVMScriptExecutor(0);\\n    }\\n}\\n\",\"keccak256\":\"0x0a8a940995af70625b926c4a70f3d847841f7da2601087436e3bae9b41af76c4\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \\\"EVMRUN_EXECUTOR_UNAVAILABLE\\\";\\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \\\"EVMRUN_PROTECTED_STATE_MODIFIED\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\";\\n    */\\n\\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\\n\\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\\n    }\\n\\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\\n        internal\\n        isInitialized\\n        protectState\\n        returns (bytes)\\n    {\\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\\n\\n        bytes4 sig = executor.execScript.selector;\\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\\n\\n        bytes memory output;\\n        assembly {\\n            let success := delegatecall(\\n                gas,                // forward all gas\\n                executor,           // address\\n                add(data, 0x20),    // calldata start\\n                mload(data),        // calldata length\\n                0,                  // don't write output (we'll handle this ourselves)\\n                0                   // don't write output\\n            )\\n\\n            output := mload(0x40) // free mem ptr get\\n\\n            switch success\\n            case 0 {\\n                // If the call errored, forward its full error data\\n                returndatacopy(output, 0, returndatasize)\\n                revert(output, returndatasize)\\n            }\\n            default {\\n                switch gt(returndatasize, 0x3f)\\n                case 0 {\\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\\n                    // revert with \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\"\\n                    // See remix: doing a `revert(\\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\")` always results in\\n                    // this memory layout\\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\\n\\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                }\\n                default {\\n                    // Copy result\\n                    //\\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\\n                    //    [ output length (32 bytes) ]\\n                    //    [ output content (N bytes) ]\\n                    //\\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\\n                    let copysize := sub(returndatasize, 0x20)\\n                    returndatacopy(output, 0x20, copysize)\\n\\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\\n                }\\n            }\\n        }\\n\\n        emit ScriptResult(address(executor), _script, _input, output);\\n\\n        return output;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = address(kernel());\\n        bytes32 preAppId = appId();\\n        _; // exec\\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\\n    }\\n}\\n\",\"keccak256\":\"0xcb6b5f7d2610321882cdc86819f1a51341c33b510fff7c60936ac7d7a015d7be\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n    function executorType() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9cab64cd2f10148d4e20433ecd11679e69be1fbde112892c48db94f92e48c571\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    */\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\\n}\\n\",\"keccak256\":\"0x00d98507ec160cb7cc814cc9bdebd01a414353636d6045720fe6d1592277694b\"},\"@aragon/os/contracts/evmscript/ScriptHelpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary ScriptHelpers {\\n    function getSpecId(bytes _script) internal pure returns (uint32) {\\n        return uint32At(_script, 0);\\n    }\\n\\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mload(add(_data, add(0x20, _location)))\\n        }\\n    }\\n\\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\\n            0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\\n            0x100000000000000000000000000000000000000000000000000000000)\\n        }\\n    }\\n\\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := add(_data, add(0x20, _location))\\n        }\\n    }\\n\\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\\n        bytes memory payload = new bytes(4);\\n        assembly { mstore(add(payload, 0x20), _sig) }\\n        return payload;\\n    }\\n}\\n\",\"keccak256\":\"0xb602b537d0a349e3b461b40dee544a13214cc2a69b3dd7dcc58a8992c5c7ff91\"},\"@aragon/os/contracts/evmscript/executors/BaseEVMScriptExecutor.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../../common/Autopetrified.sol\\\";\\nimport \\\"../IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract BaseEVMScriptExecutor is IEVMScriptExecutor, Autopetrified {\\n    uint256 internal constant SCRIPT_START_LOCATION = 4;\\n}\\n\",\"keccak256\":\"0x753b306dd5db5193cffe28207b5580795dbf282a58a86b230af8260e6130b9ed\"},\"@aragon/os/contracts/evmscript/executors/CallsScript.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n// Inspired by https://github.com/reverendus/tx-manager\\n\\nimport \\\"../ScriptHelpers.sol\\\";\\nimport \\\"./BaseEVMScriptExecutor.sol\\\";\\n\\n\\ncontract CallsScript is BaseEVMScriptExecutor {\\n    using ScriptHelpers for bytes;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EXECUTOR_TYPE = keccak256(\\\"CALLS_SCRIPT\\\");\\n    */\\n    bytes32 internal constant EXECUTOR_TYPE = 0x2dc858a00f3e417be1394b87c07158e989ec681ce8cc68a9093680ac1a870302;\\n\\n    string private constant ERROR_BLACKLISTED_CALL = \\\"EVMCALLS_BLACKLISTED_CALL\\\";\\n    string private constant ERROR_INVALID_LENGTH = \\\"EVMCALLS_INVALID_LENGTH\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_CALL_REVERTED = \\\"EVMCALLS_CALL_REVERTED\\\";\\n    */\\n\\n    event LogScriptCall(address indexed sender, address indexed src, address indexed dst);\\n\\n    /**\\n    * @notice Executes a number of call scripts\\n    * @param _script [ specId (uint32) ] many calls with this structure ->\\n    *    [ to (address: 20 bytes) ] [ calldataLength (uint32: 4 bytes) ] [ calldata (calldataLength bytes) ]\\n    * @param _blacklist Addresses the script cannot call to, or will revert.\\n    * @return Always returns empty byte array\\n    */\\n    function execScript(bytes _script, bytes, address[] _blacklist) external isInitialized returns (bytes) {\\n        uint256 location = SCRIPT_START_LOCATION; // first 32 bits are spec id\\n        while (location < _script.length) {\\n            // Check there's at least address + calldataLength available\\n            require(_script.length - location >= 0x18, ERROR_INVALID_LENGTH);\\n\\n            address contractAddress = _script.addressAt(location);\\n            // Check address being called is not blacklist\\n            for (uint256 i = 0; i < _blacklist.length; i++) {\\n                require(contractAddress != _blacklist[i], ERROR_BLACKLISTED_CALL);\\n            }\\n\\n            // logged before execution to ensure event ordering in receipt\\n            // if failed entire execution is reverted regardless\\n            emit LogScriptCall(msg.sender, address(this), contractAddress);\\n\\n            uint256 calldataLength = uint256(_script.uint32At(location + 0x14));\\n            uint256 startOffset = location + 0x14 + 0x04;\\n            uint256 calldataStart = _script.locationOf(startOffset);\\n\\n            // compute end of script / next location\\n            location = startOffset + calldataLength;\\n            require(location <= _script.length, ERROR_INVALID_LENGTH);\\n\\n            bool success;\\n            assembly {\\n                success := call(\\n                    sub(gas, 5000),       // forward gas left - 5000\\n                    contractAddress,      // address\\n                    0,                    // no value\\n                    calldataStart,        // calldata start\\n                    calldataLength,       // calldata length\\n                    0,                    // don't write output\\n                    0                     // don't write output\\n                )\\n\\n                switch success\\n                case 0 {\\n                    let ptr := mload(0x40)\\n\\n                    switch returndatasize\\n                    case 0 {\\n                        // No error data was returned, revert with \\\"EVMCALLS_CALL_REVERTED\\\"\\n                        // See remix: doing a `revert(\\\"EVMCALLS_CALL_REVERTED\\\")` always results in\\n                        // this memory layout\\n                        mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                        mstore(add(ptr, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                        mstore(add(ptr, 0x24), 0x0000000000000000000000000000000000000000000000000000000000000016) // reason length\\n                        mstore(add(ptr, 0x44), 0x45564d43414c4c535f43414c4c5f524556455254454400000000000000000000) // reason\\n\\n                        revert(ptr, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                    }\\n                    default {\\n                        // Forward the full error data\\n                        returndatacopy(ptr, 0, returndatasize)\\n                        revert(ptr, returndatasize)\\n                    }\\n                }\\n                default { }\\n            }\\n        }\\n        // No need to allocate empty bytes for the return as this can only be called via an delegatecall\\n        // (due to the isInitialized modifier)\\n    }\\n\\n    function executorType() external pure returns (bytes32) {\\n        return EXECUTOR_TYPE;\\n    }\\n}\\n\",\"keccak256\":\"0xc7078b505c6e458b5d4d7d47df87245b3bdb96f8c21d2b93669d6b5251456a2c\"},\"@aragon/os/contracts/factory/AppProxyFactory.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AppProxyUpgradeable.sol\\\";\\nimport \\\"../apps/AppProxyPinned.sol\\\";\\n\\n\\ncontract AppProxyFactory {\\n    event NewAppProxy(address proxy, bool isUpgradeable, bytes32 appId);\\n\\n    /**\\n    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @return AppProxyUpgradeable\\n    */\\n    function newAppProxy(IKernel _kernel, bytes32 _appId) public returns (AppProxyUpgradeable) {\\n        return newAppProxy(_kernel, _appId, new bytes(0));\\n    }\\n\\n    /**\\n    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @return AppProxyUpgradeable\\n    */\\n    function newAppProxy(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyUpgradeable) {\\n        AppProxyUpgradeable proxy = new AppProxyUpgradeable(_kernel, _appId, _initializePayload);\\n        emit NewAppProxy(address(proxy), true, _appId);\\n        return proxy;\\n    }\\n\\n    /**\\n    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @return AppProxyPinned\\n    */\\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId) public returns (AppProxyPinned) {\\n        return newAppProxyPinned(_kernel, _appId, new bytes(0));\\n    }\\n\\n    /**\\n    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Proxy initialization payload\\n    * @return AppProxyPinned\\n    */\\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyPinned) {\\n        AppProxyPinned proxy = new AppProxyPinned(_kernel, _appId, _initializePayload);\\n        emit NewAppProxy(address(proxy), false, _appId);\\n        return proxy;\\n    }\\n}\\n\",\"keccak256\":\"0x94e88f4e8747be9487e32069eb22c1455ffc49cfd1299ef1eba212049c2db115\"},\"@aragon/os/contracts/factory/DAOFactory.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\nimport \\\"../kernel/Kernel.sol\\\";\\nimport \\\"../kernel/KernelProxy.sol\\\";\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../acl/ACL.sol\\\";\\n\\nimport \\\"./EVMScriptRegistryFactory.sol\\\";\\n\\n\\ncontract DAOFactory {\\n    IKernel public baseKernel;\\n    IACL public baseACL;\\n    EVMScriptRegistryFactory public regFactory;\\n\\n    event DeployDAO(address dao);\\n    event DeployEVMScriptRegistry(address reg);\\n\\n    /**\\n    * @notice Create a new DAOFactory, creating DAOs with Kernels proxied to `_baseKernel`, ACLs proxied to `_baseACL`, and new EVMScriptRegistries created from `_regFactory`.\\n    * @param _baseKernel Base Kernel\\n    * @param _baseACL Base ACL\\n    * @param _regFactory EVMScriptRegistry factory\\n    */\\n    constructor(IKernel _baseKernel, IACL _baseACL, EVMScriptRegistryFactory _regFactory) public {\\n        // No need to init as it cannot be killed by devops199\\n        if (address(_regFactory) != address(0)) {\\n            regFactory = _regFactory;\\n        }\\n\\n        baseKernel = _baseKernel;\\n        baseACL = _baseACL;\\n    }\\n\\n    /**\\n    * @notice Create a new DAO with `_root` set as the initial admin\\n    * @param _root Address that will be granted control to setup DAO permissions\\n    * @return Newly created DAO\\n    */\\n    function newDAO(address _root) public returns (Kernel) {\\n        Kernel dao = Kernel(new KernelProxy(baseKernel));\\n\\n        if (address(regFactory) == address(0)) {\\n            dao.initialize(baseACL, _root);\\n        } else {\\n            dao.initialize(baseACL, this);\\n\\n            ACL acl = ACL(dao.acl());\\n            bytes32 permRole = acl.CREATE_PERMISSIONS_ROLE();\\n            bytes32 appManagerRole = dao.APP_MANAGER_ROLE();\\n\\n            acl.grantPermission(regFactory, acl, permRole);\\n\\n            acl.createPermission(regFactory, dao, appManagerRole, this);\\n\\n            EVMScriptRegistry reg = regFactory.newEVMScriptRegistry(dao);\\n            emit DeployEVMScriptRegistry(address(reg));\\n\\n            // Clean up permissions\\n            // First, completely reset the APP_MANAGER_ROLE\\n            acl.revokePermission(regFactory, dao, appManagerRole);\\n            acl.removePermissionManager(dao, appManagerRole);\\n\\n            // Then, make root the only holder and manager of CREATE_PERMISSIONS_ROLE\\n            acl.revokePermission(regFactory, acl, permRole);\\n            acl.revokePermission(this, acl, permRole);\\n            acl.grantPermission(_root, acl, permRole);\\n            acl.setPermissionManager(_root, acl, permRole);\\n        }\\n\\n        emit DeployDAO(address(dao));\\n\\n        return dao;\\n    }\\n}\\n\",\"keccak256\":\"0x606c9813487fba0c479b0e5b2bc077bab428d6c24b480936c5172bfb9d5598b6\"},\"@aragon/os/contracts/factory/EVMScriptRegistryFactory.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../evmscript/IEVMScriptExecutor.sol\\\";\\nimport \\\"../evmscript/EVMScriptRegistry.sol\\\";\\n\\nimport \\\"../evmscript/executors/CallsScript.sol\\\";\\n\\nimport \\\"../kernel/Kernel.sol\\\";\\nimport \\\"../acl/ACL.sol\\\";\\n\\n\\ncontract EVMScriptRegistryFactory is EVMScriptRegistryConstants {\\n    EVMScriptRegistry public baseReg;\\n    IEVMScriptExecutor public baseCallScript;\\n\\n    /**\\n    * @notice Create a new EVMScriptRegistryFactory.\\n    */\\n    constructor() public {\\n        baseReg = new EVMScriptRegistry();\\n        baseCallScript = IEVMScriptExecutor(new CallsScript());\\n    }\\n\\n    /**\\n    * @notice Install a new pinned instance of EVMScriptRegistry on `_dao`.\\n    * @param _dao Kernel\\n    * @return Installed EVMScriptRegistry\\n    */\\n    function newEVMScriptRegistry(Kernel _dao) public returns (EVMScriptRegistry reg) {\\n        bytes memory initPayload = abi.encodeWithSelector(reg.initialize.selector);\\n        reg = EVMScriptRegistry(_dao.newPinnedAppInstance(EVMSCRIPT_REGISTRY_APP_ID, baseReg, initPayload, true));\\n\\n        ACL acl = ACL(_dao.acl());\\n\\n        acl.createPermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE(), this);\\n\\n        reg.addScriptExecutor(baseCallScript);     // spec 1 = CallsScript\\n\\n        // Clean up the permissions\\n        acl.revokePermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\\n        acl.removePermissionManager(reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\\n\\n        return reg;\\n    }\\n}\\n\",\"keccak256\":\"0xf879b2069ae82e266b79c48bde64a6f1f051bdc5c566cf01e0cc2e8844c381a7\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\ninterface IKernelEvents {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\\n}\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IKernelEvents, IVaultRecoverable {\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\\n}\\n\",\"keccak256\":\"0xd02b98282ccd271b0caa86f2c249986f1619dcf41811f5dadce520b32610b68e\"},\"@aragon/os/contracts/kernel/Kernel.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./IKernel.sol\\\";\\nimport \\\"./KernelConstants.sol\\\";\\nimport \\\"./KernelStorage.sol\\\";\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"../common/Petrifiable.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../factory/AppProxyFactory.sol\\\";\\nimport \\\"../lib/misc/ERCProxy.sol\\\";\\n\\n\\n// solium-disable-next-line max-len\\ncontract Kernel is IKernel, KernelStorage, KernelAppIds, KernelNamespaceConstants, Petrifiable, IsContract, VaultRecoverable, AppProxyFactory, ACLSyntaxSugar {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant APP_MANAGER_ROLE = keccak256(\\\"APP_MANAGER_ROLE\\\");\\n    */\\n    bytes32 public constant APP_MANAGER_ROLE = 0xb6d92708f3d4817afc106147d969e229ced5c46e65e0a5002a0d391287762bd0;\\n\\n    string private constant ERROR_APP_NOT_CONTRACT = \\\"KERNEL_APP_NOT_CONTRACT\\\";\\n    string private constant ERROR_INVALID_APP_CHANGE = \\\"KERNEL_INVALID_APP_CHANGE\\\";\\n    string private constant ERROR_AUTH_FAILED = \\\"KERNEL_AUTH_FAILED\\\";\\n\\n    /**\\n    * @dev Constructor that allows the deployer to choose if the base instance should be petrified immediately.\\n    * @param _shouldPetrify Immediately petrify this instance so that it can never be initialized\\n    */\\n    constructor(bool _shouldPetrify) public {\\n        if (_shouldPetrify) {\\n            petrify();\\n        }\\n    }\\n\\n    /**\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\\n    * @notice Initialize this kernel instance along with its ACL and set `_permissionsCreator` as the entity that can create other permissions\\n    * @param _baseAcl Address of base ACL app\\n    * @param _permissionsCreator Entity that will be given permission over createPermission\\n    */\\n    function initialize(IACL _baseAcl, address _permissionsCreator) public onlyInit {\\n        initialized();\\n\\n        // Set ACL base\\n        _setApp(KERNEL_APP_BASES_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, _baseAcl);\\n\\n        // Create ACL instance and attach it as the default ACL app\\n        IACL acl = IACL(newAppProxy(this, KERNEL_DEFAULT_ACL_APP_ID));\\n        acl.initialize(_permissionsCreator);\\n        _setApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, acl);\\n\\n        recoveryVaultAppId = KERNEL_DEFAULT_VAULT_APP_ID;\\n    }\\n\\n    /**\\n    * @dev Create a new instance of an app linked to this kernel\\n    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @return AppProxy instance\\n    */\\n    function newAppInstance(bytes32 _appId, address _appBase)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        return newAppInstance(_appId, _appBase, new bytes(0), false);\\n    }\\n\\n    /**\\n    * @dev Create a new instance of an app linked to this kernel and set its base\\n    *      implementation if it was not already set\\n    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\\n    * @param _setDefault Whether the app proxy app is the default one.\\n    *        Useful when the Kernel needs to know of an instance of a particular app,\\n    *        like Vault for escape hatch mechanism.\\n    * @return AppProxy instance\\n    */\\n    function newAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\\n        appProxy = newAppProxy(this, _appId, _initializePayload);\\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\\n        // and it will only succeed if sender has permissions to set something to the namespace.\\n        if (_setDefault) {\\n            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\\n        }\\n    }\\n\\n    /**\\n    * @dev Create a new pinned instance of an app linked to this kernel\\n    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`.\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @return AppProxy instance\\n    */\\n    function newPinnedAppInstance(bytes32 _appId, address _appBase)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        return newPinnedAppInstance(_appId, _appBase, new bytes(0), false);\\n    }\\n\\n    /**\\n    * @dev Create a new pinned instance of an app linked to this kernel and set\\n    *      its base implementation if it was not already set\\n    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\\n    * @param _setDefault Whether the app proxy app is the default one.\\n    *        Useful when the Kernel needs to know of an instance of a particular app,\\n    *        like Vault for escape hatch mechanism.\\n    * @return AppProxy instance\\n    */\\n    function newPinnedAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\\n        appProxy = newAppProxyPinned(this, _appId, _initializePayload);\\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\\n        // and it will only succeed if sender has permissions to set something to the namespace.\\n        if (_setDefault) {\\n            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\\n        }\\n    }\\n\\n    /**\\n    * @dev Set the resolving address of an app instance or base implementation\\n    * @notice Set the resolving address of `_appId` in namespace `_namespace` to `_app`\\n    * @param _namespace App namespace to use\\n    * @param _appId Identifier for app\\n    * @param _app Address of the app instance or base implementation\\n    * @return ID of app\\n    */\\n    function setApp(bytes32 _namespace, bytes32 _appId, address _app)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(_namespace, _appId))\\n    {\\n        _setApp(_namespace, _appId, _app);\\n    }\\n\\n    /**\\n    * @dev Set the default vault id for the escape hatch mechanism\\n    * @param _recoveryVaultAppId Identifier of the recovery vault app\\n    */\\n    function setRecoveryVaultAppId(bytes32 _recoveryVaultAppId)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_ADDR_NAMESPACE, _recoveryVaultAppId))\\n    {\\n        recoveryVaultAppId = _recoveryVaultAppId;\\n    }\\n\\n    // External access to default app id and namespace constants to mimic default getters for constants\\n    /* solium-disable function-order, mixedcase */\\n    function CORE_NAMESPACE() external pure returns (bytes32) { return KERNEL_CORE_NAMESPACE; }\\n    function APP_BASES_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_BASES_NAMESPACE; }\\n    function APP_ADDR_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_ADDR_NAMESPACE; }\\n    function KERNEL_APP_ID() external pure returns (bytes32) { return KERNEL_CORE_APP_ID; }\\n    function DEFAULT_ACL_APP_ID() external pure returns (bytes32) { return KERNEL_DEFAULT_ACL_APP_ID; }\\n    /* solium-enable function-order, mixedcase */\\n\\n    /**\\n    * @dev Get the address of an app instance or base implementation\\n    * @param _namespace App namespace to use\\n    * @param _appId Identifier for app\\n    * @return Address of the app\\n    */\\n    function getApp(bytes32 _namespace, bytes32 _appId) public view returns (address) {\\n        return apps[_namespace][_appId];\\n    }\\n\\n    /**\\n    * @dev Get the address of the recovery Vault instance (to recover funds)\\n    * @return Address of the Vault\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        return apps[KERNEL_APP_ADDR_NAMESPACE][recoveryVaultAppId];\\n    }\\n\\n    /**\\n    * @dev Get the installed ACL app\\n    * @return ACL app\\n    */\\n    function acl() public view returns (IACL) {\\n        return IACL(getApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID));\\n    }\\n\\n    /**\\n    * @dev Function called by apps to check ACL on kernel or to check permission status\\n    * @param _who Sender of the original call\\n    * @param _where Address of the app\\n    * @param _what Identifier for a group of actions in app\\n    * @param _how Extra data for ACL auth\\n    * @return Boolean indicating whether the ACL allows the role or not.\\n    *         Always returns false if the kernel hasn't been initialized yet.\\n    */\\n    function hasPermission(address _who, address _where, bytes32 _what, bytes _how) public view returns (bool) {\\n        IACL defaultAcl = acl();\\n        return address(defaultAcl) != address(0) && // Poor man's initialization check (saves gas)\\n            defaultAcl.hasPermission(_who, _where, _what, _how);\\n    }\\n\\n    function _setApp(bytes32 _namespace, bytes32 _appId, address _app) internal {\\n        require(isContract(_app), ERROR_APP_NOT_CONTRACT);\\n        apps[_namespace][_appId] = _app;\\n        emit SetApp(_namespace, _appId, _app);\\n    }\\n\\n    function _setAppIfNew(bytes32 _namespace, bytes32 _appId, address _app) internal {\\n        address app = getApp(_namespace, _appId);\\n        if (app != address(0)) {\\n            // The only way to set an app is if it passes the isContract check, so no need to check it again\\n            require(app == _app, ERROR_INVALID_APP_CHANGE);\\n        } else {\\n            _setApp(_namespace, _appId, _app);\\n        }\\n    }\\n\\n    modifier auth(bytes32 _role, uint256[] memory _params) {\\n        require(\\n            hasPermission(msg.sender, address(this), _role, ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)),\\n            ERROR_AUTH_FAILED\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x117b1e169c984a4ad9070d5d7784bf91f8b1b16d3e695694cde253181b5ade3e\"},\"@aragon/os/contracts/kernel/KernelConstants.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract KernelAppIds {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\\\"vault\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\\n}\\n\\n\\ncontract KernelNamespaceConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n}\\n\",\"keccak256\":\"0x95e46be2becfb4c8952880909cd32adf5dcfa8c2e0fdf4ae054bbf83ef7f53cd\"},\"@aragon/os/contracts/kernel/KernelProxy.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./IKernel.sol\\\";\\nimport \\\"./KernelConstants.sol\\\";\\nimport \\\"./KernelStorage.sol\\\";\\nimport \\\"../common/DepositableDelegateProxy.sol\\\";\\nimport \\\"../common/IsContract.sol\\\";\\n\\n\\ncontract KernelProxy is IKernelEvents, KernelStorage, KernelAppIds, KernelNamespaceConstants, IsContract, DepositableDelegateProxy {\\n    /**\\n    * @dev KernelProxy is a proxy contract to a kernel implementation. The implementation\\n    *      can update the reference, which effectively upgrades the contract\\n    * @param _kernelImpl Address of the contract used as implementation for kernel\\n    */\\n    constructor(IKernel _kernelImpl) public {\\n        require(isContract(address(_kernelImpl)));\\n        apps[KERNEL_CORE_NAMESPACE][KERNEL_CORE_APP_ID] = _kernelImpl;\\n\\n        // Note that emitting this event is important for verifying that a KernelProxy instance\\n        // was never upgraded to a malicious Kernel logic contract over its lifespan.\\n        // This starts the \\\"chain of trust\\\", that can be followed through later SetApp() events\\n        // emitted during kernel upgrades.\\n        emit SetApp(KERNEL_CORE_NAMESPACE, KERNEL_CORE_APP_ID, _kernelImpl);\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return UPGRADEABLE;\\n    }\\n\\n    /**\\n    * @dev ERC897, the address the proxy would delegate calls to\\n    */\\n    function implementation() public view returns (address) {\\n        return apps[KERNEL_CORE_NAMESPACE][KERNEL_CORE_APP_ID];\\n    }\\n}\\n\",\"keccak256\":\"0xb60dea1ebaf0e3e634b0782ef98fdd854b3de5bb639f56c2937ca34b676940ba\"},\"@aragon/os/contracts/kernel/KernelStorage.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n\\ncontract KernelStorage {\\n    // namespace => app id => address\\n    mapping (bytes32 => mapping (bytes32 => address)) public apps;\\n    bytes32 public recoveryVaultAppId;\\n}\\n\",\"keccak256\":\"0x682eac86f7a617281098c15cadbaeec72a50cbe49101861a1454519df1718a4c\"},\"@aragon/os/contracts/lib/ens/AbstractENS.sol\":{\"content\":\"// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/AbstractENS.sol\\n\\npragma solidity ^0.4.15;\\n\\n\\ninterface AbstractENS {\\n    function owner(bytes32 _node) public constant returns (address);\\n    function resolver(bytes32 _node) public constant returns (address);\\n    function ttl(bytes32 _node) public constant returns (uint64);\\n    function setOwner(bytes32 _node, address _owner) public;\\n    function setSubnodeOwner(bytes32 _node, bytes32 label, address _owner) public;\\n    function setResolver(bytes32 _node, address _resolver) public;\\n    function setTTL(bytes32 _node, uint64 _ttl) public;\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed _node, bytes32 indexed _label, address _owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed _node, address _owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed _node, address _resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed _node, uint64 _ttl);\\n}\\n\",\"keccak256\":\"0x8deaa274dfc550c8251576dfa0dde1e58933728ced575de4f5b12391fd358c95\"},\"@aragon/os/contracts/lib/ens/ENS.sol\":{\"content\":\"// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/ENS.sol\\n\\npragma solidity ^0.4.0;\\n\\n\\nimport \\\"./AbstractENS.sol\\\";\\n\\n/**\\n * The ENS registry contract.\\n */\\ncontract ENS is AbstractENS {\\n    struct Record {\\n        address owner;\\n        address resolver;\\n        uint64 ttl;\\n    }\\n\\n    mapping(bytes32=>Record) records;\\n\\n    // Permits modifications only by the owner of the specified node.\\n    modifier only_owner(bytes32 node) {\\n        if (records[node].owner != msg.sender) throw;\\n        _;\\n    }\\n\\n    /**\\n     * Constructs a new ENS registrar.\\n     */\\n    function ENS() public {\\n        records[0].owner = msg.sender;\\n    }\\n\\n    /**\\n     * Returns the address that owns the specified node.\\n     */\\n    function owner(bytes32 node) public constant returns (address) {\\n        return records[node].owner;\\n    }\\n\\n    /**\\n     * Returns the address of the resolver for the specified node.\\n     */\\n    function resolver(bytes32 node) public constant returns (address) {\\n        return records[node].resolver;\\n    }\\n\\n    /**\\n     * Returns the TTL of a node, and any records associated with it.\\n     */\\n    function ttl(bytes32 node) public constant returns (uint64) {\\n        return records[node].ttl;\\n    }\\n\\n    /**\\n     * Transfers ownership of a node to a new address. May only be called by the current\\n     * owner of the node.\\n     * @param node The node to transfer ownership of.\\n     * @param owner The address of the new owner.\\n     */\\n    function setOwner(bytes32 node, address owner) only_owner(node) public {\\n        Transfer(node, owner);\\n        records[node].owner = owner;\\n    }\\n\\n    /**\\n     * Transfers ownership of a subnode keccak256(node, label) to a new address. May only be\\n     * called by the owner of the parent node.\\n     * @param node The parent node.\\n     * @param label The hash of the label specifying the subnode.\\n     * @param owner The address of the new owner.\\n     */\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) only_owner(node) public {\\n        var subnode = keccak256(node, label);\\n        NewOwner(node, label, owner);\\n        records[subnode].owner = owner;\\n    }\\n\\n    /**\\n     * Sets the resolver address for the specified node.\\n     * @param node The node to update.\\n     * @param resolver The address of the resolver.\\n     */\\n    function setResolver(bytes32 node, address resolver) only_owner(node) public {\\n        NewResolver(node, resolver);\\n        records[node].resolver = resolver;\\n    }\\n\\n    /**\\n     * Sets the TTL for the specified node.\\n     * @param node The node to update.\\n     * @param ttl The TTL in seconds.\\n     */\\n    function setTTL(bytes32 node, uint64 ttl) only_owner(node) public {\\n        NewTTL(node, ttl);\\n        records[node].ttl = ttl;\\n    }\\n}\\n\",\"keccak256\":\"0x919b4beefbead7971bfe6a2a01025919d10091fd412b4e7ffaccc8661d7e2863\"},\"@aragon/os/contracts/lib/ens/PublicResolver.sol\":{\"content\":\"// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/PublicResolver.sol\\n\\npragma solidity ^0.4.0;\\n\\nimport \\\"./AbstractENS.sol\\\";\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver {\\n    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\\n    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n    bytes4 constant CONTENT_INTERFACE_ID = 0xd8389dc5;\\n    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\\n    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\\n    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\\n    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n    event AddrChanged(bytes32 indexed node, address a);\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n    event NameChanged(bytes32 indexed node, string name);\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\n\\n    struct PublicKey {\\n        bytes32 x;\\n        bytes32 y;\\n    }\\n\\n    struct Record {\\n        address addr;\\n        bytes32 content;\\n        string name;\\n        PublicKey pubkey;\\n        mapping(string=>string) text;\\n        mapping(uint256=>bytes) abis;\\n    }\\n\\n    AbstractENS ens;\\n    mapping(bytes32=>Record) records;\\n\\n    modifier only_owner(bytes32 node) {\\n        if (ens.owner(node) != msg.sender) throw;\\n        _;\\n    }\\n\\n    /**\\n     * Constructor.\\n     * @param ensAddr The ENS registrar contract.\\n     */\\n    function PublicResolver(AbstractENS ensAddr) public {\\n        ens = ensAddr;\\n    }\\n\\n    /**\\n     * Returns true if the resolver implements the interface specified by the provided hash.\\n     * @param interfaceID The ID of the interface to check for.\\n     * @return True if the contract implements the requested interface.\\n     */\\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n        return interfaceID == ADDR_INTERFACE_ID ||\\n               interfaceID == CONTENT_INTERFACE_ID ||\\n               interfaceID == NAME_INTERFACE_ID ||\\n               interfaceID == ABI_INTERFACE_ID ||\\n               interfaceID == PUBKEY_INTERFACE_ID ||\\n               interfaceID == TEXT_INTERFACE_ID ||\\n               interfaceID == INTERFACE_META_ID;\\n    }\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) public constant returns (address ret) {\\n        ret = records[node].addr;\\n    }\\n\\n    /**\\n     * Sets the address associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param addr The address to set.\\n     */\\n    function setAddr(bytes32 node, address addr) only_owner(node) public {\\n        records[node].addr = addr;\\n        AddrChanged(node, addr);\\n    }\\n\\n    /**\\n     * Returns the content hash associated with an ENS node.\\n     * Note that this resource type is not standardized, and will likely change\\n     * in future to a resource type based on multihash.\\n     * @param node The ENS node to query.\\n     * @return The associated content hash.\\n     */\\n    function content(bytes32 node) public constant returns (bytes32 ret) {\\n        ret = records[node].content;\\n    }\\n\\n    /**\\n     * Sets the content hash associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * Note that this resource type is not standardized, and will likely change\\n     * in future to a resource type based on multihash.\\n     * @param node The node to update.\\n     * @param hash The content hash to set\\n     */\\n    function setContent(bytes32 node, bytes32 hash) only_owner(node) public {\\n        records[node].content = hash;\\n        ContentChanged(node, hash);\\n    }\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) public constant returns (string ret) {\\n        ret = records[node].name;\\n    }\\n\\n    /**\\n     * Sets the name associated with an ENS node, for reverse records.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param name The name to set.\\n     */\\n    function setName(bytes32 node, string name) only_owner(node) public {\\n        records[node].name = name;\\n        NameChanged(node, name);\\n    }\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(bytes32 node, uint256 contentTypes) public constant returns (uint256 contentType, bytes data) {\\n        var record = records[node];\\n        for(contentType = 1; contentType <= contentTypes; contentType <<= 1) {\\n            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\\n                data = record.abis[contentType];\\n                return;\\n            }\\n        }\\n        contentType = 0;\\n    }\\n\\n    /**\\n     * Sets the ABI associated with an ENS node.\\n     * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n     * the empty string.\\n     * @param node The node to update.\\n     * @param contentType The content type of the ABI\\n     * @param data The ABI data.\\n     */\\n    function setABI(bytes32 node, uint256 contentType, bytes data) only_owner(node) public {\\n        // Content types must be powers of 2\\n        if (((contentType - 1) & contentType) != 0) throw;\\n\\n        records[node].abis[contentType] = data;\\n        ABIChanged(node, contentType);\\n    }\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x, y the X and Y coordinates of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) public constant returns (bytes32 x, bytes32 y) {\\n        return (records[node].pubkey.x, records[node].pubkey.y);\\n    }\\n\\n    /**\\n     * Sets the SECP256k1 public key associated with an ENS node.\\n     * @param node The ENS node to query\\n     * @param x the X coordinate of the curve point for the public key.\\n     * @param y the Y coordinate of the curve point for the public key.\\n     */\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) only_owner(node) public {\\n        records[node].pubkey = PublicKey(x, y);\\n        PubkeyChanged(node, x, y);\\n    }\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(bytes32 node, string key) public constant returns (string ret) {\\n        ret = records[node].text[key];\\n    }\\n\\n    /**\\n     * Sets the text data associated with an ENS node and key.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param key The key to set.\\n     * @param value The text data value to set.\\n     */\\n    function setText(bytes32 node, string key, string value) only_owner(node) public {\\n        records[node].text[key] = value;\\n        TextChanged(node, key, key);\\n    }\\n}\\n\",\"keccak256\":\"0x8c538f586fdf66528c5c6e2e916c79f00762a2fba3ec0e7be78dc0e3fda4ac2c\"},\"@aragon/os/contracts/lib/math/SafeMath.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = _a * _b;\\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint256 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        uint256 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x2e11c8dcead82c452ef452f4dbced40e20ae105fa4145d920dac6e077b31d846\"},\"@aragon/os/contracts/lib/math/SafeMath64.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\\n// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath64\\n * @dev Math operations for uint64 with safety checks that revert on error\\n */\\nlibrary SafeMath64 {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH64_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH64_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH64_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH64_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint256 c = uint256(_a) * uint256(_b);\\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\\n\\n        return uint64(c);\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint64 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint64 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint64 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x34f18573e7b2180645c67faaff60ebc713ab22c697606d3b3ce4fe0e745955f4\"},\"@aragon/os/contracts/lib/misc/ERCProxy.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ERCProxy {\\n    uint256 internal constant FORWARDING = 1;\\n    uint256 internal constant UPGRADEABLE = 2;\\n\\n    function proxyType() public pure returns (uint256 proxyTypeId);\\n    function implementation() public view returns (address codeAddr);\\n}\\n\",\"keccak256\":\"0x7ede022292e2e9b7042b933e9ced7213f1e5c6c76fdd02c078a3abbbc03c7ee3\"},\"@aragon/os/contracts/lib/token/ERC20.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function approve(address _spender, uint256 _value)\\n        public returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        public returns (bool);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xa2e319fde92f9e70912f09bf6e99bbf8b9b798961d54ffcba59d347d37bde1b7\"},\"@aragon/ppf-contracts/contracts/IFeed.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\ninterface IFeed {\\n    function ratePrecision() external pure returns (uint256);\\n    function get(address base, address quote) external view returns (uint128 xrt, uint64 when);\\n}\\n\",\"keccak256\":\"0x707f55678685f2fb757158fc0cd986e865768bc23782d1a5691b2ec734d6845f\"},\"@aragon/templates-shared/contracts/BaseTemplate.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"@aragon/apps-agent/contracts/Agent.sol\\\";\\nimport \\\"@aragon/apps-vault/contracts/Vault.sol\\\";\\nimport \\\"@aragon/apps-voting/contracts/Voting.sol\\\";\\nimport \\\"@aragon/apps-payroll/contracts/Payroll.sol\\\";\\nimport \\\"@aragon/apps-finance/contracts/Finance.sol\\\";\\nimport \\\"@aragon/apps-token-manager/contracts/TokenManager.sol\\\";\\nimport \\\"@aragon/apps-survey/contracts/Survey.sol\\\";\\nimport \\\"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\\\";\\n\\nimport \\\"@aragon/os/contracts/acl/ACL.sol\\\";\\nimport \\\"@aragon/os/contracts/apm/Repo.sol\\\";\\nimport \\\"@aragon/os/contracts/apm/APMNamehash.sol\\\";\\nimport \\\"@aragon/os/contracts/kernel/Kernel.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/ens/ENS.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/ens/PublicResolver.sol\\\";\\nimport \\\"@aragon/os/contracts/factory/DAOFactory.sol\\\";\\nimport \\\"@aragon/os/contracts/common/IsContract.sol\\\";\\nimport \\\"@aragon/os/contracts/common/Uint256Helpers.sol\\\";\\nimport \\\"@aragon/id/contracts/IFIFSResolvingRegistrar.sol\\\";\\n\\n\\ncontract BaseTemplate is APMNamehash, IsContract {\\n    using Uint256Helpers for uint256;\\n\\n    /* Hardcoded constant to save gas\\n    * bytes32 constant internal AGENT_APP_ID = apmNamehash(\\\"agent\\\");                  // agent.aragonpm.eth\\n    * bytes32 constant internal VAULT_APP_ID = apmNamehash(\\\"vault\\\");                  // vault.aragonpm.eth\\n    * bytes32 constant internal VOTING_APP_ID = apmNamehash(\\\"voting\\\");                // voting.aragonpm.eth\\n    * bytes32 constant internal SURVEY_APP_ID = apmNamehash(\\\"survey\\\");                // survey.aragonpm.eth\\n    * bytes32 constant internal PAYROLL_APP_ID = apmNamehash(\\\"payroll\\\");              // payroll.aragonpm.eth\\n    * bytes32 constant internal FINANCE_APP_ID = apmNamehash(\\\"finance\\\");              // finance.aragonpm.eth\\n    * bytes32 constant internal TOKEN_MANAGER_APP_ID = apmNamehash(\\\"token-manager\\\");  // token-manager.aragonpm.eth\\n    */\\n    bytes32 constant internal AGENT_APP_ID = 0x9ac98dc5f995bf0211ed589ef022719d1487e5cb2bab505676f0d084c07cf89a;\\n    bytes32 constant internal VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\\n    bytes32 constant internal VOTING_APP_ID = 0x9fa3927f639745e587912d4b0fea7ef9013bf93fb907d29faeab57417ba6e1d4;\\n    bytes32 constant internal PAYROLL_APP_ID = 0x463f596a96d808cb28b5d080181e4a398bc793df2c222f6445189eb801001991;\\n    bytes32 constant internal FINANCE_APP_ID = 0xbf8491150dafc5dcaee5b861414dca922de09ccffa344964ae167212e8c673ae;\\n    bytes32 constant internal TOKEN_MANAGER_APP_ID = 0x6b20a3010614eeebf2138ccec99f028a61c811b3b1a3343b6ff635985c75c91f;\\n    bytes32 constant internal SURVEY_APP_ID = 0x030b2ab880b88e228f2da5a3d19a2a31bc10dbf91fb1143776a6de489389471e;\\n\\n    string constant private ERROR_ENS_NOT_CONTRACT = \\\"TEMPLATE_ENS_NOT_CONTRACT\\\";\\n    string constant private ERROR_DAO_FACTORY_NOT_CONTRACT = \\\"TEMPLATE_DAO_FAC_NOT_CONTRACT\\\";\\n    string constant private ERROR_ARAGON_ID_NOT_PROVIDED = \\\"TEMPLATE_ARAGON_ID_NOT_PROVIDED\\\";\\n    string constant private ERROR_ARAGON_ID_NOT_CONTRACT = \\\"TEMPLATE_ARAGON_ID_NOT_CONTRACT\\\";\\n    string constant private ERROR_MINIME_FACTORY_NOT_PROVIDED = \\\"TEMPLATE_MINIME_FAC_NOT_PROVIDED\\\";\\n    string constant private ERROR_MINIME_FACTORY_NOT_CONTRACT = \\\"TEMPLATE_MINIME_FAC_NOT_CONTRACT\\\";\\n    string constant private ERROR_CANNOT_CAST_VALUE_TO_ADDRESS = \\\"TEMPLATE_CANNOT_CAST_VALUE_TO_ADDRESS\\\";\\n    string constant private ERROR_INVALID_ID = \\\"TEMPLATE_INVALID_ID\\\";\\n\\n    ENS internal ens;\\n    DAOFactory internal daoFactory;\\n    MiniMeTokenFactory internal miniMeFactory;\\n    IFIFSResolvingRegistrar internal aragonID;\\n\\n    event DeployDao(address dao);\\n    event SetupDao(address dao);\\n    event DeployToken(address token);\\n    event InstalledApp(address appProxy, bytes32 appId);\\n\\n    constructor(DAOFactory _daoFactory, ENS _ens, MiniMeTokenFactory _miniMeFactory, IFIFSResolvingRegistrar _aragonID) public {\\n        require(isContract(address(_ens)), ERROR_ENS_NOT_CONTRACT);\\n        require(isContract(address(_daoFactory)), ERROR_DAO_FACTORY_NOT_CONTRACT);\\n\\n        ens = _ens;\\n        aragonID = _aragonID;\\n        daoFactory = _daoFactory;\\n        miniMeFactory = _miniMeFactory;\\n    }\\n\\n    /**\\n    * @dev Create a DAO using the DAO Factory and grant the template root permissions so it has full\\n    *      control during setup. Once the DAO setup has finished, it is recommended to call the\\n    *      `_transferRootPermissionsFromTemplateAndFinalizeDAO()` helper to transfer the root\\n    *      permissions to the end entity in control of the organization.\\n    */\\n    function _createDAO() internal returns (Kernel dao, ACL acl) {\\n        dao = daoFactory.newDAO(this);\\n        emit DeployDao(address(dao));\\n        acl = ACL(dao.acl());\\n        _createPermissionForTemplate(acl, dao, dao.APP_MANAGER_ROLE());\\n    }\\n\\n    /* ACL */\\n\\n    function _createPermissions(ACL _acl, address[] memory _grantees, address _app, bytes32 _permission, address _manager) internal {\\n        _acl.createPermission(_grantees[0], _app, _permission, address(this));\\n        for (uint256 i = 1; i < _grantees.length; i++) {\\n            _acl.grantPermission(_grantees[i], _app, _permission);\\n        }\\n        _acl.revokePermission(address(this), _app, _permission);\\n        _acl.setPermissionManager(_manager, _app, _permission);\\n    }\\n\\n    function _createPermissionForTemplate(ACL _acl, address _app, bytes32 _permission) internal {\\n        _acl.createPermission(address(this), _app, _permission, address(this));\\n    }\\n\\n    function _removePermissionFromTemplate(ACL _acl, address _app, bytes32 _permission) internal {\\n        _acl.revokePermission(address(this), _app, _permission);\\n        _acl.removePermissionManager(_app, _permission);\\n    }\\n\\n    function _transferRootPermissionsFromTemplateAndFinalizeDAO(Kernel _dao, address _to) internal {\\n        _transferRootPermissionsFromTemplateAndFinalizeDAO(_dao, _to, _to);\\n    }\\n\\n    function _transferRootPermissionsFromTemplateAndFinalizeDAO(Kernel _dao, address _to, address _manager) internal {\\n        ACL _acl = ACL(_dao.acl());\\n        _transferPermissionFromTemplate(_acl, _dao, _to, _dao.APP_MANAGER_ROLE(), _manager);\\n        _transferPermissionFromTemplate(_acl, _acl, _to, _acl.CREATE_PERMISSIONS_ROLE(), _manager);\\n        emit SetupDao(_dao);\\n    }\\n\\n    function _transferPermissionFromTemplate(ACL _acl, address _app, address _to, bytes32 _permission, address _manager) internal {\\n        _acl.grantPermission(_to, _app, _permission);\\n        _acl.revokePermission(address(this), _app, _permission);\\n        _acl.setPermissionManager(_manager, _app, _permission);\\n    }\\n\\n    /* AGENT */\\n\\n    function _installDefaultAgentApp(Kernel _dao) internal returns (Agent) {\\n        bytes memory initializeData = abi.encodeWithSelector(Agent(0).initialize.selector);\\n        Agent agent = Agent(_installDefaultApp(_dao, AGENT_APP_ID, initializeData));\\n        // We assume that installing the Agent app as a default app means the DAO should have its\\n        // Vault replaced by the Agent. Thus, we also set the DAO's recovery app to the Agent.\\n        _dao.setRecoveryVaultAppId(AGENT_APP_ID);\\n        return agent;\\n    }\\n\\n    function _installNonDefaultAgentApp(Kernel _dao) internal returns (Agent) {\\n        bytes memory initializeData = abi.encodeWithSelector(Agent(0).initialize.selector);\\n        return Agent(_installNonDefaultApp(_dao, AGENT_APP_ID, initializeData));\\n    }\\n\\n    function _createAgentPermissions(ACL _acl, Agent _agent, address _grantee, address _manager) internal {\\n        _acl.createPermission(_grantee, _agent, _agent.EXECUTE_ROLE(), _manager);\\n        _acl.createPermission(_grantee, _agent, _agent.RUN_SCRIPT_ROLE(), _manager);\\n    }\\n\\n    /* VAULT */\\n\\n    function _installVaultApp(Kernel _dao) internal returns (Vault) {\\n        bytes memory initializeData = abi.encodeWithSelector(Vault(0).initialize.selector);\\n        return Vault(_installDefaultApp(_dao, VAULT_APP_ID, initializeData));\\n    }\\n\\n    function _createVaultPermissions(ACL _acl, Vault _vault, address _grantee, address _manager) internal {\\n        _acl.createPermission(_grantee, _vault, _vault.TRANSFER_ROLE(), _manager);\\n    }\\n\\n    /* VOTING */\\n\\n    function _installVotingApp(Kernel _dao, MiniMeToken _token, uint64[3] memory _votingSettings) internal returns (Voting) {\\n        return _installVotingApp(_dao, _token, _votingSettings[0], _votingSettings[1], _votingSettings[2]);\\n    }\\n\\n    function _installVotingApp(\\n        Kernel _dao,\\n        MiniMeToken _token,\\n        uint64 _support,\\n        uint64 _acceptance,\\n        uint64 _duration\\n    )\\n        internal returns (Voting)\\n    {\\n        bytes memory initializeData = abi.encodeWithSelector(Voting(0).initialize.selector, _token, _support, _acceptance, _duration);\\n        return Voting(_installNonDefaultApp(_dao, VOTING_APP_ID, initializeData));\\n    }\\n\\n    function _createVotingPermissions(\\n        ACL _acl,\\n        Voting _voting,\\n        address _settingsGrantee,\\n        address _createVotesGrantee,\\n        address _manager\\n    )\\n        internal\\n    {\\n        _acl.createPermission(_settingsGrantee, _voting, _voting.MODIFY_QUORUM_ROLE(), _manager);\\n        _acl.createPermission(_settingsGrantee, _voting, _voting.MODIFY_SUPPORT_ROLE(), _manager);\\n        _acl.createPermission(_createVotesGrantee, _voting, _voting.CREATE_VOTES_ROLE(), _manager);\\n    }\\n\\n    /* SURVEY */\\n\\n    function _installSurveyApp(Kernel _dao, MiniMeToken _token, uint64 _minParticipationPct, uint64 _surveyTime) internal returns (Survey) {\\n        bytes memory initializeData = abi.encodeWithSelector(Survey(0).initialize.selector, _token, _minParticipationPct, _surveyTime);\\n        return Survey(_installNonDefaultApp(_dao, SURVEY_APP_ID, initializeData));\\n    }\\n\\n    function _createSurveyPermissions(ACL _acl, Survey _survey, address _grantee, address _manager) internal {\\n        _acl.createPermission(_grantee, _survey, _survey.CREATE_SURVEYS_ROLE(), _manager);\\n        _acl.createPermission(_grantee, _survey, _survey.MODIFY_PARTICIPATION_ROLE(), _manager);\\n    }\\n\\n    /* PAYROLL */\\n\\n    function _installPayrollApp(\\n        Kernel _dao,\\n        Finance _finance,\\n        address _denominationToken,\\n        IFeed _priceFeed,\\n        uint64 _rateExpiryTime\\n    )\\n        internal returns (Payroll)\\n    {\\n        bytes memory initializeData = abi.encodeWithSelector(\\n            Payroll(0).initialize.selector,\\n            _finance,\\n            _denominationToken,\\n            _priceFeed,\\n            _rateExpiryTime\\n        );\\n        return Payroll(_installNonDefaultApp(_dao, PAYROLL_APP_ID, initializeData));\\n    }\\n\\n    /**\\n    * @dev Internal function to configure payroll permissions. Note that we allow defining different managers for\\n    *      payroll since it may be useful to have one control the payroll settings (rate expiration, price feed,\\n    *      and allowed tokens), and another one to control the employee functionality (bonuses, salaries,\\n    *      reimbursements, employees, etc).\\n    * @param _acl ACL instance being configured\\n    * @param _acl Payroll app being configured\\n    * @param _employeeManager Address that will receive permissions to handle employee payroll functionality\\n    * @param _settingsManager Address that will receive permissions to manage payroll settings\\n    * @param _permissionsManager Address that will be the ACL manager for the payroll permissions\\n    */\\n    function _createPayrollPermissions(\\n        ACL _acl,\\n        Payroll _payroll,\\n        address _employeeManager,\\n        address _settingsManager,\\n        address _permissionsManager\\n    )\\n        internal\\n    {\\n        _acl.createPermission(_employeeManager, _payroll, _payroll.ADD_BONUS_ROLE(), _permissionsManager);\\n        _acl.createPermission(_employeeManager, _payroll, _payroll.ADD_EMPLOYEE_ROLE(), _permissionsManager);\\n        _acl.createPermission(_employeeManager, _payroll, _payroll.ADD_REIMBURSEMENT_ROLE(), _permissionsManager);\\n        _acl.createPermission(_employeeManager, _payroll, _payroll.TERMINATE_EMPLOYEE_ROLE(), _permissionsManager);\\n        _acl.createPermission(_employeeManager, _payroll, _payroll.SET_EMPLOYEE_SALARY_ROLE(), _permissionsManager);\\n\\n        _acl.createPermission(_settingsManager, _payroll, _payroll.MODIFY_PRICE_FEED_ROLE(), _permissionsManager);\\n        _acl.createPermission(_settingsManager, _payroll, _payroll.MODIFY_RATE_EXPIRY_ROLE(), _permissionsManager);\\n        _acl.createPermission(_settingsManager, _payroll, _payroll.MANAGE_ALLOWED_TOKENS_ROLE(), _permissionsManager);\\n    }\\n\\n    function _unwrapPayrollSettings(\\n        uint256[4] memory _payrollSettings\\n    )\\n        internal pure returns (address denominationToken, IFeed priceFeed, uint64 rateExpiryTime, address employeeManager)\\n    {\\n        denominationToken = _toAddress(_payrollSettings[0]);\\n        priceFeed = IFeed(_toAddress(_payrollSettings[1]));\\n        rateExpiryTime = _payrollSettings[2].toUint64();\\n        employeeManager = _toAddress(_payrollSettings[3]);\\n    }\\n\\n    /* FINANCE */\\n\\n    function _installFinanceApp(Kernel _dao, Vault _vault, uint64 _periodDuration) internal returns (Finance) {\\n        bytes memory initializeData = abi.encodeWithSelector(Finance(0).initialize.selector, _vault, _periodDuration);\\n        return Finance(_installNonDefaultApp(_dao, FINANCE_APP_ID, initializeData));\\n    }\\n\\n    function _createFinancePermissions(ACL _acl, Finance _finance, address _grantee, address _manager) internal {\\n        _acl.createPermission(_grantee, _finance, _finance.EXECUTE_PAYMENTS_ROLE(), _manager);\\n        _acl.createPermission(_grantee, _finance, _finance.MANAGE_PAYMENTS_ROLE(), _manager);\\n    }\\n\\n    function _createFinanceCreatePaymentsPermission(ACL _acl, Finance _finance, address _grantee, address _manager) internal {\\n        _acl.createPermission(_grantee, _finance, _finance.CREATE_PAYMENTS_ROLE(), _manager);\\n    }\\n\\n    function _grantCreatePaymentPermission(ACL _acl, Finance _finance, address _to) internal {\\n        _acl.grantPermission(_to, _finance, _finance.CREATE_PAYMENTS_ROLE());\\n    }\\n\\n    function _transferCreatePaymentManagerFromTemplate(ACL _acl, Finance _finance, address _manager) internal {\\n        _acl.setPermissionManager(_manager, _finance, _finance.CREATE_PAYMENTS_ROLE());\\n    }\\n\\n    /* TOKEN MANAGER */\\n\\n    function _installTokenManagerApp(\\n        Kernel _dao,\\n        MiniMeToken _token,\\n        bool _transferable,\\n        uint256 _maxAccountTokens\\n    )\\n        internal returns (TokenManager)\\n    {\\n        TokenManager tokenManager = TokenManager(_installNonDefaultApp(_dao, TOKEN_MANAGER_APP_ID));\\n        _token.changeController(tokenManager);\\n        tokenManager.initialize(_token, _transferable, _maxAccountTokens);\\n        return tokenManager;\\n    }\\n\\n    function _createTokenManagerPermissions(ACL _acl, TokenManager _tokenManager, address _grantee, address _manager) internal {\\n        _acl.createPermission(_grantee, _tokenManager, _tokenManager.MINT_ROLE(), _manager);\\n        _acl.createPermission(_grantee, _tokenManager, _tokenManager.BURN_ROLE(), _manager);\\n    }\\n\\n    function _mintTokens(ACL _acl, TokenManager _tokenManager, address[] memory _holders, uint256[] memory _stakes) internal {\\n        _createPermissionForTemplate(_acl, _tokenManager, _tokenManager.MINT_ROLE());\\n        for (uint256 i = 0; i < _holders.length; i++) {\\n            _tokenManager.mint(_holders[i], _stakes[i]);\\n        }\\n        _removePermissionFromTemplate(_acl, _tokenManager, _tokenManager.MINT_ROLE());\\n    }\\n\\n    function _mintTokens(ACL _acl, TokenManager _tokenManager, address[] memory _holders, uint256 _stake) internal {\\n        _createPermissionForTemplate(_acl, _tokenManager, _tokenManager.MINT_ROLE());\\n        for (uint256 i = 0; i < _holders.length; i++) {\\n            _tokenManager.mint(_holders[i], _stake);\\n        }\\n        _removePermissionFromTemplate(_acl, _tokenManager, _tokenManager.MINT_ROLE());\\n    }\\n\\n    function _mintTokens(ACL _acl, TokenManager _tokenManager, address _holder, uint256 _stake) internal {\\n        _createPermissionForTemplate(_acl, _tokenManager, _tokenManager.MINT_ROLE());\\n        _tokenManager.mint(_holder, _stake);\\n        _removePermissionFromTemplate(_acl, _tokenManager, _tokenManager.MINT_ROLE());\\n    }\\n\\n    /* EVM SCRIPTS */\\n\\n    function _createEvmScriptsRegistryPermissions(ACL _acl, address _grantee, address _manager) internal {\\n        EVMScriptRegistry registry = EVMScriptRegistry(_acl.getEVMScriptRegistry());\\n        _acl.createPermission(_grantee, registry, registry.REGISTRY_MANAGER_ROLE(), _manager);\\n        _acl.createPermission(_grantee, registry, registry.REGISTRY_ADD_EXECUTOR_ROLE(), _manager);\\n    }\\n\\n    /* APPS */\\n\\n    function _installNonDefaultApp(Kernel _dao, bytes32 _appId) internal returns (address) {\\n        return _installNonDefaultApp(_dao, _appId, new bytes(0));\\n    }\\n\\n    function _installNonDefaultApp(Kernel _dao, bytes32 _appId, bytes memory _initializeData) internal returns (address) {\\n        return _installApp(_dao, _appId, _initializeData, false);\\n    }\\n\\n    function _installDefaultApp(Kernel _dao, bytes32 _appId) internal returns (address) {\\n        return _installDefaultApp(_dao, _appId, new bytes(0));\\n    }\\n\\n    function _installDefaultApp(Kernel _dao, bytes32 _appId, bytes memory _initializeData) internal returns (address) {\\n        return _installApp(_dao, _appId, _initializeData, true);\\n    }\\n\\n    function _installApp(Kernel _dao, bytes32 _appId, bytes memory _initializeData, bool _setDefault) internal returns (address) {\\n        address latestBaseAppAddress = _latestVersionAppBase(_appId);\\n        address instance = address(_dao.newAppInstance(_appId, latestBaseAppAddress, _initializeData, _setDefault));\\n        emit InstalledApp(instance, _appId);\\n        return instance;\\n    }\\n\\n    function _latestVersionAppBase(bytes32 _appId) internal view returns (address base) {\\n        Repo repo = Repo(PublicResolver(ens.resolver(_appId)).addr(_appId));\\n        (,base,) = repo.getLatest();\\n    }\\n\\n    /* TOKEN */\\n\\n    function _createToken(string memory _name, string memory _symbol, uint8 _decimals) internal returns (MiniMeToken) {\\n        require(address(miniMeFactory) != address(0), ERROR_MINIME_FACTORY_NOT_PROVIDED);\\n        MiniMeToken token = miniMeFactory.createCloneToken(MiniMeToken(address(0)), 0, _name, _decimals, _symbol, true);\\n        emit DeployToken(address(token));\\n        return token;\\n    }\\n\\n    function _ensureMiniMeFactoryIsValid(address _miniMeFactory) internal view {\\n        require(isContract(address(_miniMeFactory)), ERROR_MINIME_FACTORY_NOT_CONTRACT);\\n    }\\n\\n    /* IDS */\\n\\n    function _validateId(string memory _id) internal pure {\\n        require(bytes(_id).length > 0, ERROR_INVALID_ID);\\n    }\\n\\n    function _registerID(string memory _name, address _owner) internal {\\n        require(address(aragonID) != address(0), ERROR_ARAGON_ID_NOT_PROVIDED);\\n        aragonID.register(keccak256(abi.encodePacked(_name)), _owner);\\n    }\\n\\n    function _ensureAragonIdIsValid(address _aragonID) internal view {\\n        require(isContract(address(_aragonID)), ERROR_ARAGON_ID_NOT_CONTRACT);\\n    }\\n\\n    /* HELPERS */\\n\\n    function _toAddress(uint256 _value) private pure returns (address) {\\n        require(_value <= uint160(-1), ERROR_CANNOT_CAST_VALUE_TO_ADDRESS);\\n        return address(_value);\\n    }\\n}\\n\",\"keccak256\":\"0x32646b1fda277dce031b9d2531561da31e0f056f8ef4eba1ccc6c8e6c25278c6\"},\"contracts/GardensTemplate.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"@aragon/templates-shared/contracts/BaseTemplate.sol\\\";\\nimport \\\"@aragon/os/contracts/common/SafeERC20.sol\\\";\\nimport \\\"@1hive/funds-manager/contracts/FundsManager.sol\\\";\\nimport \\\"@1hive/funds-manager/contracts/AragonVaultFundsManager.sol\\\";\\nimport \\\"@1hive/funds-manager/contracts/GnosisSafeFundsManager.sol\\\";\\nimport \\\"@1hive/funds-manager/contracts/GnosisSafe.sol\\\";\\nimport \\\"./external/IMiniMeWithPermit.sol\\\";\\nimport \\\"./external/IMiniMeWithPermitFactory.sol\\\";\\nimport \\\"./external/IHookedTokenManager.sol\\\";\\nimport \\\"./external/IIssuance.sol\\\";\\nimport \\\"./external/IConvictionVoting.sol\\\";\\nimport \\\"./external/Agreement.sol\\\";\\nimport \\\"./external/DisputableVoting.sol\\\";\\nimport \\\"./external/IPriceOracle.sol\\\";\\nimport \\\"./external/IIncentivisedPriceOracleFactory.sol\\\"; // This lives in the uniswap-v2-periphery/contracts/examples repo (it should be moved to its own repo)\\nimport \\\"./external/ICollateralRequirementUpdaterFactory.sol\\\"; // This lives in the agreements repo\\nimport \\\"./external/ICollateralRequirementUpdater.sol\\\"; // This lives in the agreements repo\\nimport \\\"./external/IUnipoolFactory.sol\\\"; // This lives in the unipool repo\\nimport \\\"./external/IUniswapV2Factory.sol\\\";\\nimport \\\"./external/IVotingAggregator.sol\\\";\\nimport \\\"./appIds/AppIdsXDai.sol\\\";\\nimport \\\"./appIds/AppIdsRinkeby.sol\\\";\\nimport \\\"./appIds/AppIdsMumbai.sol\\\";\\nimport \\\"./external/Erc721Adapter.sol\\\";\\nimport \\\"./external/Erc721AdapterFactory.sol\\\";\\n\\ncontract GardensTemplate is BaseTemplate, AppIdsMumbai {\\n\\n    using SafeERC20 for ERC20;\\n\\n    string private constant ERROR_BAD_VOTE_SETTINGS = \\\"BAD_SETTINGS\\\";\\n    string private constant ERROR_HONEY_DEPOSIT_TOO_LOW = \\\"BAD_HONEY_DEPOSIT_TOO_LOW\\\";\\n    string private constant ERROR_NO_CACHE = \\\"NO_CACHE\\\";\\n    string constant private ERROR_MINIME_FACTORY_NOT_PROVIDED = \\\"TEMPLATE_MINIME_FAC_NOT_PROVIDED\\\";\\n\\n    bool private constant TOKEN_TRANSFERABLE = true;\\n    uint8 private constant TOKEN_DECIMALS = uint8(18);\\n    uint256 private constant TOKEN_MAX_PER_ACCOUNT = uint256(-1);\\n    address private constant ANY_ENTITY = address(-1);\\n    uint256 public constant AVERAGE_PRICE_PERIOD = 86400; // 24 hours\\n    uint8 public constant UPDATE_FREQUENCY = 8; // 8 times within price period, once every 3 hours\\n    uint256 public constant UPDATE_PERCENT_REWARD = 2e16; // 2% reward per update call\\n    address private constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n    uint256 public constant MIN_XDAI_IN_HNY_REQUIRED_FOR_NEW_GARDEN = 100e18;\\n    string public constant AGGREGATE_TOKEN_PREPEND_NAME = \\\"Aggregated\\\";\\n    string public constant AGGREGATE_TOKEN_PREPEND_SYMBOL = \\\"a\\\";\\n    uint256 public constant GARDEN_TOKEN_AGGREGATOR_WEIGHT = 1;\\n\\n    struct DeployedContracts {\\n        Kernel dao;\\n        ACL acl;\\n        DisputableVoting disputableVoting;\\n        FundsManager commonPoolFundsManager;\\n        IHookedTokenManager hookedTokenManager;\\n        IConvictionVoting convictionVoting;\\n    }\\n\\n    address[] private disputables; // Used to prevent stack too deep error\\n    address[] private collateralTokens; // Used to prevent stack too deep error\\n\\n    mapping(address => DeployedContracts) internal senderDeployedContracts;\\n    IMiniMeWithPermitFactory public miniMeWithPermitFactory;\\n    address public stableToken;\\n    IPriceOracle public honeyPriceOracle;\\n    IIncentivisedPriceOracleFactory public incentivisedPriceOracleFactory;\\n    ICollateralRequirementUpdaterFactory public collateralRequirementUpdaterFactory;\\n    IUniswapV2Factory public uniswapFactory;\\n    address public arbitrator;\\n    address public stakingFactory;\\n    Erc721AdapterFactory public erc721AdapterFactory;\\n\\n    event GardenTransactionOne(address fundsManager);\\n    event GardenTransactionTwo(address dao, address incentivisedPriceOracle, address convictionVoting, address erc721Adapter);\\n    event GardenDeployed(address gardenAddress, address collateralRequirementUpdater);\\n\\n    constructor(\\n        DAOFactory _daoFactory,\\n        ENS _ens,\\n        IMiniMeWithPermitFactory _miniMeWithPermitFactory,\\n        IFIFSResolvingRegistrar _aragonID,\\n        address _stableToken,\\n        IIncentivisedPriceOracleFactory _incentivisedPriceOracleFactory,\\n        ICollateralRequirementUpdaterFactory _collateralRequirementUpdaterFactory,\\n        IUniswapV2Factory _uniswapFactory,\\n        address _arbitrator,\\n        address _stakingFactory,\\n        Erc721AdapterFactory _erc721AdapterFactory\\n    ) public BaseTemplate(_daoFactory, _ens, MiniMeTokenFactory(0), _aragonID) {\\n        _ensureAragonIdIsValid(_aragonID);\\n        _ensureMiniMeFactoryIsValid(_miniMeWithPermitFactory);\\n        miniMeWithPermitFactory = _miniMeWithPermitFactory;\\n        stableToken = _stableToken;\\n        incentivisedPriceOracleFactory = _incentivisedPriceOracleFactory;\\n        collateralRequirementUpdaterFactory = _collateralRequirementUpdaterFactory;\\n        uniswapFactory = _uniswapFactory;\\n        arbitrator = _arbitrator;\\n        stakingFactory = _stakingFactory;\\n        erc721AdapterFactory = _erc721AdapterFactory;\\n    }\\n\\n    // New Garden functions //\\n\\n    /**\\n     * @dev Create the DAO and initialise the basic apps necessary for gardens\\n     * @param _addresses Array of [existingToken, gnosisSafe]\\n     *      existingToken An existing token used for the common pool token. Set to address(0) to create a new token.\\n     *      gnosisSafe Gnosis Safe used to hold common pools funds. Set to address(0) to use an Aragon Agent instead.\\n     * @param _gardenTokenName DAO governance new token name\\n     * @param _gardenTokenSymbol DAO governance new token symbol\\n     * @param _disputableVotingSettings Array of [voteDuration, voteSupportRequired, voteMinAcceptanceQuorum, voteDelegatedVotingPeriod,\\n     *    voteQuietEndingPeriod, voteQuietEndingExtension, voteExecutionDelay] to set up the voting app of the organization\\n     */\\n    function createGardenTxOne(\\n        address[2] _addresses,\\n        string _gardenTokenName,\\n        string _gardenTokenSymbol,\\n        uint64[7] _disputableVotingSettings\\n    ) public {\\n        require(_disputableVotingSettings.length == 7, ERROR_BAD_VOTE_SETTINGS);\\n\\n        (Kernel dao, ACL acl) = _createDAO();\\n\\n        ERC20 existingToken = ERC20(_addresses[0]); // Prevents stack too deep error\\n        IMiniMeWithPermit gardenToken = _createToken(_gardenTokenName, _gardenTokenSymbol, TOKEN_DECIMALS, existingToken == address(0));\\n\\n        IHookedTokenManager hookedTokenManager = _installHookedTokenManagerApp(dao, gardenToken, existingToken);\\n        IVotingAggregator votingAggregator = _installVotingAggregatorApp(dao, _gardenTokenName, _gardenTokenSymbol);\\n        DisputableVoting disputableVoting = _installDisputableVotingApp(dao, votingAggregator, _disputableVotingSettings);\\n        FundsManager fundsManager = _addresses[1] == address(0) ? _createAgentFundsManager(dao, acl, disputableVoting) : _createGnosisFundsManager(_addresses[1]);\\n\\n        _createPermissionForTemplate(acl, votingAggregator, votingAggregator.ADD_POWER_SOURCE_ROLE());\\n        votingAggregator.addPowerSource(gardenToken, IVotingAggregator.PowerSourceType.ERC20WithCheckpointing, GARDEN_TOKEN_AGGREGATOR_WEIGHT);\\n        _removePermissionFromTemplate(acl, votingAggregator, votingAggregator.ADD_POWER_SOURCE_ROLE());\\n\\n        _createDisputableVotingPermissions(acl, disputableVoting);\\n        _createEvmScriptsRegistryPermissions(acl, disputableVoting, disputableVoting);\\n        _createPermissionForTemplate(acl, hookedTokenManager, hookedTokenManager.MINT_ROLE());\\n\\n        _storeDeployedContractsTxOne(dao, acl, disputableVoting, fundsManager, hookedTokenManager);\\n\\n        emit GardenTransactionOne(fundsManager);\\n    }\\n\\n    /**\\n     * @dev Add tokenholders, only accessible between the first and second createDao transactions and if no existing\\n     *      token was specified. Note will fail if called incorrectly due to missing mint permission.\\n     * @param _holders List of initial tokenholder addresses\\n     * @param _stakes List of intial tokenholder amounts\\n     */\\n    function createTokenHolders(address[] _holders, uint256[] _stakes) public {\\n        (,,,, IHookedTokenManager hookedTokenManager) = _getDeployedContractsTxOne();\\n        for (uint256 i = 0; i < _holders.length; i++) {\\n            hookedTokenManager.mint(_holders[i], _stakes[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Add and initialise issuance and conviction voting\\n     * @param _erc721Adapter The Conviction Voting stake token. Set to address(0) to create a new one.\\n     * @param _convictionSettings Array of conviction settings: [decay, max_ratio, weight, min_threshold_stake_percentage]\\n     * @param _convictionVotingRequestToken The Garden's common pool token, requested using conviction voting. If set to\\n     *        address(0) the Garden will use it's main token.\\n     */\\n    function createGardenTxTwo(\\n        Erc721Adapter _erc721Adapter,\\n        uint64[4] _convictionSettings,\\n        address _convictionVotingRequestToken\\n    ) public {\\n        require(senderDeployedContracts[msg.sender].dao != address(0), ERROR_NO_CACHE);\\n\\n        (\\n            Kernel dao,,,\\n            FundsManager commonPoolFundsManager,\\n            IHookedTokenManager hookedTokenManager\\n        ) = _getDeployedContractsTxOne();\\n\\n        _removePermissionFromTemplate(_getAcl(), hookedTokenManager, hookedTokenManager.MINT_ROLE());\\n\\n        address incentivisedPriceOracle = incentivisedPriceOracleFactory.newIncentivisedPriceOracle(\\n            uniswapFactory,\\n            AVERAGE_PRICE_PERIOD,\\n            UPDATE_FREQUENCY,\\n            _convictionVotingRequestToken,\\n            UPDATE_PERCENT_REWARD,\\n            uniswapFactory.getPair(stableToken, _convictionVotingRequestToken)\\n        );\\n\\n        _erc721Adapter = _erc721Adapter == address(0) ? erc721AdapterFactory.newErc721Adapter(address(this)) : _erc721Adapter;\\n\\n        IConvictionVoting convictionVoting = _installConvictionVoting(\\n            dao,\\n            IMiniMeWithPermit(_erc721Adapter),\\n            _convictionVotingRequestToken,\\n            stableToken,\\n            incentivisedPriceOracle,\\n            commonPoolFundsManager,\\n            _convictionSettings\\n        );\\n        _createConvictionVotingPermissions(_getAcl(), convictionVoting, _getDisputableVoting());\\n        commonPoolFundsManager.addFundsUser(convictionVoting);\\n        commonPoolFundsManager.setOwner(_getDisputableVoting());\\n\\n        _erc721Adapter.setConvictionVoting(convictionVoting);\\n        _erc721Adapter.setOwner(msg.sender);\\n\\n        _storeDeployedContractsTxTwo(convictionVoting);\\n\\n        emit GardenTransactionTwo(dao, incentivisedPriceOracle, convictionVoting, _erc721Adapter);\\n    }\\n\\n    /**\\n     * @dev Add, initialise and activate the agreement\\n     * @param _daoId The ENS ID assigned to this DAO\\n     * @param _agreementTitle String indicating a short description\\n     * @param _agreementContent Link to a human-readable text that describes the initial rules for the Agreement\\n     * @param _challengeDuration Challenge duration, during which the submitter can raise a dispute\\n     * @param _initialFees Array of fees settings: [actionFee, challangeFee]\\n     * @param _actionAmountsStable The action amount specified as a stable value (eg in xdai)\\n     * @param _challengeAmountsStable The challenge amount specified as a stable value (eg in xdai)\\n     */\\n    function createGardenTxThree(\\n        string _daoId,\\n        string _agreementTitle,\\n        bytes memory _agreementContent,\\n        uint64 _challengeDuration,\\n        uint256[2] _initialFees,\\n        uint256[] _actionAmountsStable,\\n        uint256[] _challengeAmountsStable\\n    ) public {\\n        require(senderDeployedContracts[msg.sender].hookedTokenManager.hasInitialized(), ERROR_NO_CACHE);\\n\\n        (Kernel dao, ACL acl, DisputableVoting disputableVoting,, IHookedTokenManager hookedTokenManager) = _getDeployedContractsTxOne();\\n        IConvictionVoting convictionVoting = _getDeployedContractsTxTwo();\\n\\n        // Create app and permissions for non common pool agent, in a separate transaction to first agent due to gas limits\\n        _createAgentPermissions(acl, _installDefaultAgentApp(dao), disputableVoting, disputableVoting);\\n\\n        Agreement agreement =\\n            _installAgreementApp(dao, arbitrator, _agreementTitle, _agreementContent, stakingFactory);\\n        _createAgreementPermissions(acl, agreement, disputableVoting, disputableVoting);\\n        acl.createPermission(agreement, disputableVoting, disputableVoting.SET_AGREEMENT_ROLE(), disputableVoting);\\n        acl.createPermission(agreement, convictionVoting, convictionVoting.SET_AGREEMENT_ROLE(), disputableVoting);\\n\\n        agreement.activate(disputableVoting, _getMainToken(hookedTokenManager), _challengeDuration, _initialFees[0], _initialFees[1]);\\n        agreement.activate(convictionVoting, _getMainToken(hookedTokenManager), _challengeDuration, _initialFees[0], _initialFees[1]);\\n        _removePermissionFromTemplate(acl, agreement, agreement.MANAGE_DISPUTABLE_ROLE());\\n\\n        delete disputables;\\n        disputables.push(disputableVoting);\\n        disputables.push(convictionVoting);\\n\\n        delete collateralTokens;\\n        collateralTokens.push(_getMainToken(hookedTokenManager));\\n        collateralTokens.push(_getMainToken(hookedTokenManager));\\n\\n        ICollateralRequirementUpdater collateralRequirementUpdater = collateralRequirementUpdaterFactory.newCollateralRequirementUpdater(\\n            agreement,\\n            disputables,\\n            collateralTokens,\\n            _actionAmountsStable,\\n            _challengeAmountsStable,\\n            convictionVoting.stableTokenOracle(),\\n            stableToken\\n        );\\n        collateralRequirementUpdater.transferOwnership(disputableVoting);\\n        // Permission necessary to allow collateralRequirementUpdater to update collateral requirements on the agreement\\n        acl.createPermission(collateralRequirementUpdater, agreement, agreement.MANAGE_DISPUTABLE_ROLE(), disputableVoting);\\n\\n        _transferRootPermissionsFromTemplateAndFinalizeDAO(dao, address(disputableVoting));\\n//        _validateId(_daoId);\\n//        _registerID(_daoId, dao);\\n\\n        _deleteStoredContracts();\\n\\n        emit GardenDeployed(dao, collateralRequirementUpdater);\\n    }\\n\\n    // App installation/setup functions //\\n\\n    function _createToken(string memory _name, string memory _symbol, uint8 _decimals, bool _transfersEnabled) internal returns (IMiniMeWithPermit) {\\n        require(address(miniMeWithPermitFactory) != address(0), ERROR_MINIME_FACTORY_NOT_PROVIDED);\\n        IMiniMeWithPermit token = miniMeWithPermitFactory.createCloneToken(IMiniMeWithPermit(address(0)), 0, _name, _decimals, _symbol, _transfersEnabled);\\n        emit DeployToken(address(token));\\n        return token;\\n    }\\n\\n    function _createAgentFundsManager(Kernel _dao, ACL _acl, DisputableVoting _disputableVoting) internal returns (FundsManager) {\\n        Agent commonPoolAgent = _installDefaultAgentApp(_dao);\\n        FundsManager fundsManager = new AragonVaultFundsManager(commonPoolAgent);\\n        _createAgentPermissions(_acl, commonPoolAgent, _disputableVoting, _disputableVoting);\\n        _createVaultPermissions(_acl, commonPoolAgent, fundsManager, _disputableVoting);\\n        return fundsManager;\\n    }\\n\\n    function _createGnosisFundsManager(address _gnosisSafe) internal returns (FundsManager) {\\n        FundsManager fundsManager = new GnosisSafeFundsManager(GnosisSafe(_gnosisSafe));\\n        // The GnosisSafe owner must allow the above FundsManager permission to execute functions on it\\n        return fundsManager;\\n    }\\n\\n    function _installHookedTokenManagerApp(Kernel _dao, IMiniMeWithPermit _gardenToken, ERC20 _wrappableToken)\\n        internal\\n        returns (IHookedTokenManager)\\n    {\\n        IHookedTokenManager hookedTokenManager = IHookedTokenManager(_installDefaultApp(_dao, HOOKED_TOKEN_MANAGER_APP_ID));\\n        _gardenToken.changeController(hookedTokenManager);\\n        hookedTokenManager.initialize(_gardenToken, _wrappableToken, TOKEN_TRANSFERABLE, TOKEN_MAX_PER_ACCOUNT);\\n        return hookedTokenManager;\\n    }\\n\\n    function _installVotingAggregatorApp(Kernel _dao, string _gardenTokenName, string _gardenTokenSymbol)\\n        internal returns (IVotingAggregator)\\n    {\\n        IVotingAggregator votingAggregator = IVotingAggregator(_installNonDefaultApp(_dao, VOTING_AGGREGATOR_APP_ID));\\n        string memory votingTokenName = string(abi.encodePacked(AGGREGATE_TOKEN_PREPEND_NAME, _gardenTokenName));\\n        string memory votingTokenSymbol = string(abi.encodePacked(AGGREGATE_TOKEN_PREPEND_SYMBOL, _gardenTokenSymbol));\\n        votingAggregator.initialize(votingTokenName, votingTokenSymbol, 18);\\n        return votingAggregator;\\n    }\\n\\n    function _installDisputableVotingApp(Kernel _dao, address _token, uint64[7] memory _disputableVotingSettings)\\n        internal returns (DisputableVoting)\\n    {\\n        uint64 duration = _disputableVotingSettings[0];\\n        uint64 support = _disputableVotingSettings[1];\\n        uint64 acceptance = _disputableVotingSettings[2];\\n        uint64 delegatedVotingPeriod = _disputableVotingSettings[3];\\n        uint64 quietEndingPeriod = _disputableVotingSettings[4];\\n        uint64 quietEndingExtension = _disputableVotingSettings[5];\\n        uint64 executionDelay = _disputableVotingSettings[6];\\n\\n        bytes memory initializeData =\\n            abi.encodeWithSelector(\\n                DisputableVoting(0).initialize.selector,\\n                _token,\\n                duration,\\n                support,\\n                acceptance,\\n                delegatedVotingPeriod,\\n                quietEndingPeriod,\\n                quietEndingExtension,\\n                executionDelay\\n            );\\n        return DisputableVoting(_installNonDefaultApp(_dao, DISPUTABLE_VOTING_APP_ID, initializeData));\\n    }\\n\\n    function _installIssuance(\\n        Kernel _dao,\\n        IHookedTokenManager _hookedTokenManager,\\n        FundsManager _commonPoolFundsManager,\\n        uint256[2] _issuanceSettings\\n    ) internal returns (IIssuance) {\\n        IIssuance issuance = IIssuance(_installNonDefaultApp(_dao, DYNAMIC_ISSUANCE_APP_ID));\\n        issuance.initialize(_hookedTokenManager, _commonPoolFundsManager, _issuanceSettings[0], _issuanceSettings[1]);\\n        return issuance;\\n    }\\n\\n    function _installConvictionVoting(\\n        Kernel _dao,\\n        IMiniMeWithPermit _stakeToken,\\n        address _requestToken,\\n        address _stableToken,\\n        address _stableTokenOracle,\\n        FundsManager _fundsManager,\\n        uint64[4] _convictionSettings\\n    ) internal returns (IConvictionVoting) {\\n        IConvictionVoting convictionVoting = IConvictionVoting(_installNonDefaultApp(_dao, CONVICTION_VOTING_APP_ID));\\n        convictionVoting.initialize(\\n            _stakeToken,\\n            _requestToken,\\n            _stableToken,\\n            _stableTokenOracle,\\n            _fundsManager,\\n            _convictionSettings[0],\\n            _convictionSettings[1],\\n            _convictionSettings[2],\\n            _convictionSettings[3]\\n        );\\n        return convictionVoting;\\n    }\\n\\n    function _installAgreementApp(\\n        Kernel _dao,\\n        address _arbitrator,\\n        string _title,\\n        bytes _content,\\n        address _stakingFactory\\n    ) internal returns (Agreement) {\\n        bytes memory initializeData =\\n            abi.encodeWithSelector(\\n                Agreement(0).initialize.selector,\\n                _arbitrator,\\n                false,\\n                _title,\\n                _content,\\n                _stakingFactory\\n            );\\n        return Agreement(_installNonDefaultApp(_dao, AGREEMENT_APP_ID, initializeData));\\n    }\\n\\n    // Permission setting functions //\\n\\n    function _createDisputableVotingPermissions(ACL _acl, DisputableVoting _disputableVoting) internal {\\n        _acl.createPermission(ANY_ENTITY, _disputableVoting, _disputableVoting.CHALLENGE_ROLE(), _disputableVoting);\\n        _acl.createPermission(ANY_ENTITY, _disputableVoting, _disputableVoting.CREATE_VOTES_ROLE(), _disputableVoting);\\n    }\\n\\n    function _createIssuancePermissions(ACL _acl, IIssuance _issuance, DisputableVoting _disputableVoting) internal {\\n        _acl.createPermission(_disputableVoting, _issuance, _issuance.UPDATE_SETTINGS_ROLE(), _disputableVoting);\\n    }\\n\\n    function _createConvictionVotingPermissions(\\n        ACL _acl,\\n        IConvictionVoting _convictionVoting,\\n        DisputableVoting _disputableVoting\\n    ) internal {\\n        _acl.createPermission(ANY_ENTITY, _convictionVoting, _convictionVoting.CHALLENGE_ROLE(), _disputableVoting);\\n        _acl.createPermission(ANY_ENTITY, _convictionVoting, _convictionVoting.CREATE_PROPOSALS_ROLE(), _disputableVoting);\\n        _acl.createPermission(_disputableVoting, _convictionVoting, _convictionVoting.CANCEL_PROPOSALS_ROLE(), _disputableVoting);\\n        _acl.createPermission(_disputableVoting, _convictionVoting, _convictionVoting.UPDATE_SETTINGS_ROLE(), _disputableVoting);\\n    }\\n\\n    function _createHookedTokenManagerPermissions(\\n        ACL acl,\\n        DisputableVoting disputableVoting,\\n        IHookedTokenManager hookedTokenManager,\\n        IIssuance issuance\\n    ) internal {\\n        acl.createPermission(issuance, hookedTokenManager, hookedTokenManager.MINT_ROLE(), disputableVoting);\\n        acl.createPermission(issuance, hookedTokenManager, hookedTokenManager.BURN_ROLE(), disputableVoting);\\n    }\\n\\n    function _createAgreementPermissions(ACL _acl, Agreement _agreement, address _grantee, address _manager) internal {\\n        _acl.createPermission(_grantee, _agreement, _agreement.CHANGE_AGREEMENT_ROLE(), _manager);\\n        _acl.createPermission(address(this), _agreement, _agreement.MANAGE_DISPUTABLE_ROLE(), address(this));\\n    }\\n\\n    // Temporary Storage functions //\\n\\n    function _storeDeployedContractsTxOne(\\n        Kernel _dao,\\n        ACL _acl,\\n        DisputableVoting _disputableVoting,\\n        FundsManager _fundsManager,\\n        IHookedTokenManager _hookedTokenManager\\n    ) internal {\\n        DeployedContracts storage deployedContracts = senderDeployedContracts[msg.sender];\\n        deployedContracts.dao = _dao;\\n        deployedContracts.acl = _acl;\\n        deployedContracts.disputableVoting = _disputableVoting;\\n        deployedContracts.commonPoolFundsManager = _fundsManager;\\n        deployedContracts.hookedTokenManager = _hookedTokenManager;\\n    }\\n\\n    function _getDeployedContractsTxOne() internal view\\n        returns (\\n            Kernel,\\n            ACL,\\n            DisputableVoting,\\n            FundsManager,\\n            IHookedTokenManager\\n        )\\n    {\\n        DeployedContracts storage deployedContracts = senderDeployedContracts[msg.sender];\\n        return (\\n            deployedContracts.dao,\\n            deployedContracts.acl,\\n            deployedContracts.disputableVoting,\\n            deployedContracts.commonPoolFundsManager,\\n            deployedContracts.hookedTokenManager\\n        );\\n    }\\n\\n    function _storeDeployedContractsTxTwo(IConvictionVoting _convictionVoting) internal {\\n        DeployedContracts storage deployedContracts = senderDeployedContracts[msg.sender];\\n        deployedContracts.convictionVoting = _convictionVoting;\\n    }\\n\\n    function _getDeployedContractsTxTwo() internal view returns (IConvictionVoting) {\\n        DeployedContracts storage deployedContracts = senderDeployedContracts[msg.sender];\\n        return deployedContracts.convictionVoting;\\n    }\\n\\n    function _deleteStoredContracts() internal {\\n        delete senderDeployedContracts[msg.sender];\\n    }\\n\\n    // Misc functions //\\n\\n    function _creatingGardenWithExistingToken(IHookedTokenManager _hookedTokenManager) internal returns (bool) {\\n        return _hookedTokenManager.wrappableToken() != address(0);\\n    }\\n\\n    function _getMainToken(IHookedTokenManager hookedTokenManager) internal returns (address) {\\n        return hookedTokenManager.wrappableToken() == address(0) ? hookedTokenManager.token() : hookedTokenManager.wrappableToken();\\n    }\\n\\n    function _getAcl() internal returns (ACL) {\\n        return senderDeployedContracts[msg.sender].acl;\\n    }\\n\\n    function _getDisputableVoting() internal returns (DisputableVoting) {\\n        return senderDeployedContracts[msg.sender].disputableVoting;\\n    }\\n}\\n\",\"keccak256\":\"0x1117c13bfc697e59a3eff0ca5eb32b97dbc2b3442e7d848c6a7f17601ed019bc\"},\"contracts/appIds/AppIdsMumbai.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apm/APMNamehash.sol\\\";\\n\\ncontract AppIdsMumbai is APMNamehash {\\n    bytes32 public constant CONVICTION_VOTING_APP_ID = 0x589851b3734f6578a92f33bfc26877a1166b95238be1f484deeaac6383d14c38; // conviction-voting.open.aragonpm.eth\\n    bytes32 public constant HOOKED_TOKEN_MANAGER_APP_ID = 0x3ccad1fc11d5b14e58c1c53a5138a51f4da8d509831bc505e60bb74d88f8bef5; // wrappable-hooked-token-manager.open.aragonpm.eth\\n    bytes32 public constant DYNAMIC_ISSUANCE_APP_ID = 0xb4534ca120beef0055b5bd2dbbfe396de7648f1c13a4f7bdfd5a9bd9b40fe824; // dynamic-issuance.open.aragonpm.eth\\n    bytes32 public constant AGREEMENT_APP_ID = 0x41dd0b999b443a19321f2f34fe8078d1af95a1487b49af4c2ca57fb9e3e5331e; // agreement-1hive.open.aragonpm.eth\\n    bytes32 public constant DISPUTABLE_VOTING_APP_ID = 0x705b5084c67966bb8e4640b28bab7a1e51e03d209d84e3a04d2a4f7415f93b34; // disputable-voting.open.aragonpm.eth\\n    bytes32 public constant VOTING_AGGREGATOR_APP_ID = 0x956b8eeee6100c059c6e68ccf3f3ed9483796128e80f458bc52ad1e6ef246fe6; // vote-token-aggregator.open.aragonpm.eth\\n}\\n\",\"keccak256\":\"0xce762f2abefda416ef7bdad9129dc0fa8be9cce3341991b80300f72e12ceca02\"},\"contracts/appIds/AppIdsRinkeby.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apm/APMNamehash.sol\\\";\\n\\ncontract AppIdsRinkeby is APMNamehash {\\n    bytes32 public constant CONVICTION_VOTING_APP_ID = 0xca60629a22f03bcad7738fee1a6f0c5863eb89463621b40566a6799b82cbe184; // disputable-conviction-voting.open.aragonpm.eth\\n    bytes32 public constant HOOKED_TOKEN_MANAGER_APP_ID = 0x3ccad1fc11d5b14e58c1c53a5138a51f4da8d509831bc505e60bb74d88f8bef5; // wrappable-hooked-token-manager.open.aragonpm.eth\\n    bytes32 public constant DYNAMIC_ISSUANCE_APP_ID = 0xb4534ca120beef0055b5bd2dbbfe396de7648f1c13a4f7bdfd5a9bd9b40fe824; // dynamic-issuance.open.aragonpm.eth\\n    bytes32 public constant AGREEMENT_APP_ID = 0x41dd0b999b443a19321f2f34fe8078d1af95a1487b49af4c2ca57fb9e3e5331e; // agreement-1hive.open.aragonpm.eth\\n    bytes32 public constant DISPUTABLE_VOTING_APP_ID = 0x705b5084c67966bb8e4640b28bab7a1e51e03d209d84e3a04d2a4f7415f93b34; // disputable-voting.open.aragonpm.eth\\n    bytes32 public constant VOTING_AGGREGATOR_APP_ID = 0x956b8eeee6100c059c6e68ccf3f3ed9483796128e80f458bc52ad1e6ef246fe6; // vote-token-aggregator.open.aragonpm.eth\\n}\\n\",\"keccak256\":\"0x5ae04b588b58de6a3e63a1ba20e352384f975bd8b686b6adaa5c500bb2a5045d\"},\"contracts/appIds/AppIdsXDai.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apm/APMNamehash.sol\\\";\\n\\ncontract AppIdsXDai is APMNamehash {\\n    bytes32 public constant CONVICTION_VOTING_APP_ID = 0xca60629a22f03bcad7738fee1a6f0c5863eb89463621b40566a6799b82cbe184; // disputable-conviction-voting.open.aragonpm.eth\\n    bytes32 public constant HOOKED_TOKEN_MANAGER_APP_ID = 0x3ccad1fc11d5b14e58c1c53a5138a51f4da8d509831bc505e60bb74d88f8bef5; // wrappable-hooked-token-manager.open.aragonpm.eth\\n    bytes32 public constant DYNAMIC_ISSUANCE_APP_ID = 0xb4534ca120beef0055b5bd2dbbfe396de7648f1c13a4f7bdfd5a9bd9b40fe824; // dynamic-issuance.open.aragonpm.eth\\n    bytes32 public constant AGREEMENT_APP_ID = 0x34c62f3aec3073826f39c2c35e9a1297d9dbf3cc77472283106f09eee9cf47bf; // agreement.open.aragonpm.eth\\n    bytes32 public constant DISPUTABLE_VOTING_APP_ID = 0x705b5084c67966bb8e4640b28bab7a1e51e03d209d84e3a04d2a4f7415f93b34; // disputable-voting.open.aragonpm.eth\\n    bytes32 public constant VOTING_AGGREGATOR_APP_ID = 0x956b8eeee6100c059c6e68ccf3f3ed9483796128e80f458bc52ad1e6ef246fe6; // vote-token-aggregator.open.aragonpm.eth\\n}\\n\",\"keccak256\":\"0xe1d1fac07c947df89b865f8a14249ef67686776797df14a743cbafc7b3beed07\"},\"contracts/external/Agreement.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.4.24;\\n\\ninterface Agreement {\\n    function CHANGE_AGREEMENT_ROLE() external pure returns (bytes32);\\n    function MANAGE_DISPUTABLE_ROLE() external pure returns (bytes32);\\n\\n    function initialize(\\n        address _arbitrator,\\n        bool _setAppFeesCashier,\\n        string _title,\\n        bytes _content,\\n        address _stakingFactory\\n    ) external;\\n\\n    function activate(\\n        address _disputableAddress,\\n        address _collateralToken,\\n        uint64 _challengeDuration,\\n        uint256 _actionAmount,\\n        uint256 _challengeAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8316b7ca4a3a8fa3dc8908dbefe5f0f27735d24abd0d1c665853cd57e31d69db\"},\"contracts/external/DisputableVoting.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"./IMiniMeWithPermit.sol\\\";\\n\\n\\ninterface DisputableVoting {\\n    function SET_AGREEMENT_ROLE() external pure returns (bytes32);\\n    function CREATE_VOTES_ROLE() external pure returns (bytes32);\\n    function CHALLENGE_ROLE() external pure returns (bytes32);\\n    function CHANGE_VOTE_TIME_ROLE() external pure returns (bytes32);\\n    function CHANGE_SUPPORT_ROLE() external pure returns (bytes32);\\n    function CHANGE_QUORUM_ROLE() external pure returns (bytes32);\\n    function CHANGE_DELEGATED_VOTING_PERIOD_ROLE() external pure returns (bytes32);\\n    function CHANGE_QUIET_ENDING_ROLE() external pure returns (bytes32);\\n    function CHANGE_EXECUTION_DELAY_ROLE() external pure returns (bytes32);\\n\\n    function initialize(\\n        IMiniMeWithPermit _token,\\n        uint64 _voteTime,\\n        uint64 _supportRequiredPct,\\n        uint64 _minAcceptQuorumPct,\\n        uint64 _delegatedVotingPeriod,\\n        uint64 _quietEndingPeriod,\\n        uint64 _quietEndingExtension,\\n        uint64 _executionDelay\\n    ) external;\\n\\n    function newVote(bytes _executionScript, bytes _context) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x4a2ff535787337977d525d8a558ae2cc17c478dbf75d02af607ff048d92a367d\"},\"contracts/external/Erc721Adapter.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\ncontract Erc721Adapter {\\n\\n    function setConvictionVoting(address _convictionVoting) public;\\n\\n    function setOwner(address _owner) public;\\n\\n}\\n\",\"keccak256\":\"0xb216f87712e4fc3733940e34c146e80292fc207f04f0769eebed24b17307933b\"},\"contracts/external/Erc721AdapterFactory.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./Erc721Adapter.sol\\\";\\n\\ncontract Erc721AdapterFactory {\\n    function newErc721Adapter(address _owner) public returns (Erc721Adapter);\\n}\\n\",\"keccak256\":\"0x95bc6dc694c957ab5e9615a6e9ef21d76a7a55bccad5e04261756d05b0e068e2\"},\"contracts/external/ICollateralRequirementUpdater.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\ncontract ICollateralRequirementUpdater {\\n    function transferOwnership(address _newOwner);\\n}\\n\",\"keccak256\":\"0x6f4da921200e8a80b71b151c2de714985af3e0c28752bb2603667b1ee8623f89\"},\"contracts/external/ICollateralRequirementUpdaterFactory.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./ICollateralRequirementUpdater.sol\\\";\\n\\ncontract ICollateralRequirementUpdaterFactory {\\n\\n    event NewCollateralRequirementUpdater(address _newCollateralRequirementUpdater);\\n\\n    // The returned address needs the MANAGE_DISPUTABLE_ROLE permission on the specified Agreement contract\\n    function newCollateralRequirementUpdater(\\n        address _agreement,\\n        address[] _disputableApps,\\n        address[] _collateralTokens,\\n        uint256[] _actionAmountsStable,\\n        uint256[] _challengeAmountsStable,\\n        address _priceOracle,\\n        address _stableToken\\n    ) public returns (ICollateralRequirementUpdater);\\n}\\n\",\"keccak256\":\"0x185783e1f042fe941be89758b64e7421a6d744e6662c114697d968e48ba19675\"},\"contracts/external/IConvictionVoting.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./IMiniMeWithPermit.sol\\\";\\nimport \\\"@aragon/apps-vault/contracts/Vault.sol\\\";\\nimport \\\"@1hive/funds-manager/contracts/FundsManager.sol\\\";\\n\\ncontract IConvictionVoting {\\n    bytes32 public constant CHALLENGE_ROLE = keccak256(\\\"CHALLENGE_ROLE\\\");\\n    bytes32 public constant SET_AGREEMENT_ROLE = keccak256(\\\"SET_AGREEMENT_ROLE\\\");\\n    bytes32 public constant PAUSE_CONTRACT_ROLE = keccak256(\\\"PAUSE_CONTRACT_ROLE\\\");\\n    bytes32 public constant UPDATE_SETTINGS_ROLE = keccak256(\\\"UPDATE_SETTINGS_ROLE\\\");\\n    bytes32 public constant CREATE_PROPOSALS_ROLE = keccak256(\\\"CREATE_PROPOSALS_ROLE\\\");\\n    bytes32 public constant CANCEL_PROPOSALS_ROLE = keccak256(\\\"CANCEL_PROPOSALS_ROLE\\\");\\n\\n    function initialize(\\n        IMiniMeWithPermit _stakeToken,\\n        address _requestToken,\\n        address _stableToken,\\n        address _stableTokenOracle,\\n        FundsManager _vault,\\n        uint256 _decay,\\n        uint256 _maxRatio,\\n        uint256 _weight,\\n        uint256 _minThresholdStakePercentage\\n    ) external;\\n\\n    function addProposal(\\n        string _title,\\n        bytes _link,\\n        uint256 _requestedAmount,\\n        bool _stableRequestAmount,\\n        address _beneficiary\\n    ) external;\\n\\n    function stableTokenOracle() public returns (address);\\n\\n}\\n\",\"keccak256\":\"0x4c79be1c11c4492052c29dbd7a177db09cea173d98198f384006e61187125a3c\"},\"contracts/external/IHookedTokenManager.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\ncontract IHookedTokenManager {\\n\\n    bytes32 public constant INIT_ROLE = keccak256(\\\"INIT_ROLE\\\");\\n    bytes32 public constant CHANGE_CONTROLLER_ROLE = keccak256(\\\"CHANGE_CONTROLLER_ROLE\\\");\\n    bytes32 public constant MINT_ROLE = keccak256(\\\"MINT_ROLE\\\");\\n    bytes32 public constant ISSUE_ROLE = keccak256(\\\"ISSUE_ROLE\\\");\\n    bytes32 public constant ASSIGN_ROLE = keccak256(\\\"ASSIGN_ROLE\\\");\\n    bytes32 public constant REVOKE_VESTINGS_ROLE = keccak256(\\\"REVOKE_VESTINGS_ROLE\\\");\\n    bytes32 public constant BURN_ROLE = keccak256(\\\"BURN_ROLE\\\");\\n    bytes32 public constant SET_HOOK_ROLE = keccak256(\\\"SET_HOOK_ROLE\\\");\\n\\n    function initialize(address _token, address _wrappableToken, bool _transferable, uint256 _maxAccountTokens) external;\\n\\n    function changeTokenController(address _newController) external;\\n\\n    function mint(address _receiver, uint256 _amount) external;\\n\\n    function token() public returns (address);\\n\\n    function wrappableToken() public returns (address);\\n\\n    function registerHook(address _hook) external returns (uint256);\\n\\n    function hasInitialized() public view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x86cfae0b421de264c309b28b29f5b69e251d2f14c913ac8cd10a4fbd7c03abb2\"},\"contracts/external/IIncentivisedPriceOracleFactory.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\ncontract IIncentivisedPriceOracleFactory {\\n\\n    event NewIncentivisedPriceOracle(address incentivisedSlidingWindowOracle);\\n\\n    // The returned address can be sent some _incentiveToken as an incentive for users to update the price\\n    function newIncentivisedPriceOracle(\\n        address _honeyswapFactory,\\n        uint256 _windowSize,\\n        uint8 _granularity,\\n        address _incentiveToken,\\n        uint256 _percentIncentivePerCall,\\n        address _incentivisedPair\\n    ) public returns (address);\\n}\\n\",\"keccak256\":\"0xea844d4c3c507efe4a9f007e84cda07a3312d2524061e1bcf0d835667a07bdcb\"},\"contracts/external/IIssuance.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\ncontract IIssuance {\\n\\n    bytes32 constant public UPDATE_SETTINGS_ROLE = keccak256(\\\"UPDATE_SETTINGS_ROLE\\\");\\n\\n    function initialize(\\n        address _commonPoolTokenManager,\\n        address _commonPoolVault,\\n        uint256 _targetRatio,\\n        uint256 _maxAdjustmentRatioPerSecond\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdae09dc3ff91a5e6f575dd841c5fc4a92f1f9ba260c22e14ce7544ad9504d8fa\"},\"contracts/external/IMiniMeWithPermit.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"@aragon/os/contracts/lib/token/ERC20.sol\\\";\\n\\ncontract IMiniMeWithPermit is ERC20 {\\n\\n    function changeController(address _newController) public;\\n}\\n\",\"keccak256\":\"0xd0aed9aa2f8be1b26de9d44cd7af1032c5864e8e5f82d70f82cfc663ea0e142b\"},\"contracts/external/IMiniMeWithPermitFactory.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"./IMiniMeWithPermit.sol\\\";\\n\\ncontract IMiniMeWithPermitFactory {\\n    function createCloneToken(\\n        IMiniMeWithPermit _parentToken,\\n        uint _snapshotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public returns (IMiniMeWithPermit);\\n}\\n\",\"keccak256\":\"0x38adae27738ab7979b7b5d766b64ee481aafd238bc0657bff7432778ea06fc9e\"},\"contracts/external/IPriceOracle.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\ncontract IPriceOracle {\\n    function consult(address tokenIn, uint amountIn, address tokenOut) external view returns (uint amountOut);\\n}\\n\",\"keccak256\":\"0x3c5e12cfb65eb861d0ee4e42b08e623ed1d8119e7a1dc7ec85bd6c2b3dc621f9\"},\"contracts/external/IUnipoolFactory.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\ncontract IUnipoolFactory {\\n\\n    event NewUnipool(address unipool);\\n    event NewRewardDepositor(address unipoolRewardDepositor);\\n\\n    function newUnipool(address _rewardToken) public returns (address);\\n    function newUnipoolWithDepositor(address _rewardToken) public returns (address, address);\\n}\\n\",\"keccak256\":\"0xc64e8cdb2cafc68b32f58cb65c31d226e7e66ff2b1a91059eb0fa2f1f51a4912\"},\"contracts/external/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\ninterface IUniswapV2Factory {\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n}\\n\",\"keccak256\":\"0xadb0b8c4369b30ad24ca52ea487883c774f4acc7c3e7cd2bc38ab63d2ffb477c\"},\"contracts/external/IVotingAggregator.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\ncontract IVotingAggregator {\\n\\n    enum PowerSourceType {\\n        Invalid,\\n        ERC20WithCheckpointing,\\n        ERC900\\n    }\\n\\n    function ADD_POWER_SOURCE_ROLE() external pure returns (bytes32);\\n\\n    function initialize(string _name, string _symbol, uint8 _decimals) external;\\n    function addPowerSource(address _sourceAddr, PowerSourceType _sourceType, uint256 _weight) external;\\n}\\n\",\"keccak256\":\"0xc51c3dbc418c6cfed89fbac2670b285bc3dada826a75ec2354a47dd11ec981dc\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405161016080620054f783398101604090815281516020830151918301516060840151608085015160a086015160c087015160e08801516101008901516101208a0151610140909a0151979996979596949593949293919290918a8a60008a620000868364010000000062000323810204565b60408051808201909152601981527f54454d504c4154455f454e535f4e4f545f434f4e545241435400000000000000602082015290151562000163576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620001275781810151838201526020016200010d565b50505050905090810190601f168015620001555780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50620001788464010000000062000323810204565b60408051808201909152601d81527f54454d504c4154455f44414f5f4641435f4e4f545f434f4e5452414354000000602082015290151562000218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015620001275781810151838201526020016200010d565b5060008054600160a060020a0319908116600160a060020a03958616179091556003805482169285169290921790915560018054821694841694909417909355600280549093169116179055620002788864010000000062000352810204565b6200028c896401000000006200040a810204565b60078054600160a060020a0319908116600160a060020a039b8c1617909155600880548216988b1698909817909755600a80548816968a1696909617909555600b8054871694891694909417909355600c8054861692881692909217909155600d80548516918716919091179055600e80548416918616919091179055600f805490921693169290921790915550620004c0915050565b600080600160a060020a03831615156200034157600091506200034c565b823b90506000811191505b50919050565b620003668164010000000062000323810204565b60408051808201909152601f81527f54454d504c4154455f415241474f4e5f49445f4e4f545f434f4e545241435400602082015290151562000406576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015620001275781810151838201526020016200010d565b5050565b6200041e8164010000000062000323810204565b6040805190810160405280602081526020017f54454d504c4154455f4d494e494d455f4641435f4e4f545f434f4e545241435481525090151562000406576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015620001275781810151838201526020016200010d565b61502780620004d06000396000f30060806040526004361061013a5763ffffffff60e060020a600035041663036489b9811461013f5780630e7e97841461016657806317a278c91461017b5780631daffacb14610190578063262337e9146101eb578063291347681461020057806339e39056146102315780635314666c146102bb57806363033ba3146102d0578063648361ae146102e557806366175071146104625780636cc6cde11461047757806378d5f0621461048c5780638bdb2afa146104a15780638f3683f0146104b6578063929b55b214610598578063a164f269146105ad578063a81a57da1461063b578063a9d75b2b14610650578063ba945c6314610665578063ce10a79a1461067a578063db6c4c061461068f578063e8389b7c146106ba578063f21a4cf1146106cf578063f98a150e146106e4578063fa29b497146106f9575b600080fd5b34801561014b57600080fd5b5061015461070e565b60408051918252519081900360200190f35b34801561017257600080fd5b50610154610720565b34801561018757600080fd5b5061015461072b565b34801561019c57600080fd5b506040805160808082019092526101e99160048035600160a060020a031692369260a49190602490849083908390808284375093965050509135600160a060020a03169250610738915050565b005b3480156101f757600080fd5b50610154610cd5565b34801561020c57600080fd5b50610215610ce7565b60408051600160a060020a039092168252519081900360200190f35b34801561023d57600080fd5b50610246610cf6565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610280578181015183820152602001610268565b50505050905090810190601f1680156102ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102c757600080fd5b50610215610d14565b3480156102dc57600080fd5b50610154610d23565b3480156102f157600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101e994369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437505060408051808201825295986001604060020a0388351698909790966060820196509450602001925060029150839083908082843750506040805186358801803560208181028481018201909552818452979a99988801979296509082019450925082919085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610d359650505050505050565b34801561046e57600080fd5b5061021561173c565b34801561048357600080fd5b5061021561174b565b34801561049857600080fd5b5061015461175a565b3480156104ad57600080fd5b5061021561176c565b3480156104c257600080fd5b506040805180820182526101e991369160049160449190839060029083908390808284375050604080516020601f88358a0180359182018390048302840183019094528083529699989781019691955091820193509150819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805160e0818101909252959897968181019695509350600792508491508390808284375093965061177b95505050505050565b3480156105a457600080fd5b50610154611a65565b3480156105b957600080fd5b50604080516020600480358082013583810280860185019096528085526101e995369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750611a899650505050505050565b34801561064757600080fd5b50610215611b63565b34801561065c57600080fd5b50610215611b72565b34801561067157600080fd5b50610246611b81565b34801561068657600080fd5b50610154611ba8565b34801561069b57600080fd5b506106a4611baf565b6040805160ff9092168252519081900360200190f35b3480156106c657600080fd5b50610215611bb4565b3480156106db57600080fd5b50610154611bc3565b3480156106f057600080fd5b50610154611bd5565b34801561070557600080fd5b50610215611bda565b600080516020614fbc83398151915281565b66470de4df82000081565b68056bc75e2d6310000081565b3360009081526006602090815260408083205481518083019092526008825260c060020a674e4f5f43414348450292820192909252829182918291829190600160a060020a0316151561080c5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156107d15781810151838201526020016107b9565b50505050905090810190601f1680156107fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610815611be9565b9650965050509450610898610828611c2c565b8485600160a060020a031663e9a9c8506040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561086757600080fd5b505af115801561087b573d6000803e3d6000fd5b505050506040513d602081101561089157600080fd5b5051611c4c565b600a54600c54600880546040805160e060020a63e6a43905028152600160a060020a0392831660048201528b8316602482015290519482169463ee3e04bc9490921692620151809290918c9166470de4df82000091869163e6a43905916044808201926020929091908290030181600087803b15801561091757600080fd5b505af115801561092b573d6000803e3d6000fd5b505050506040513d602081101561094157600080fd5b50516040805160e060020a63ffffffff8a16028152600160a060020a039788166004820152602481019690965260ff9094166044860152918516606485015260848401529290921660a4820152905160c48083019260209291908290030181600087803b1580156109b157600080fd5b505af11580156109c5573d6000803e3d6000fd5b505050506040513d60208110156109db57600080fd5b50519150600160a060020a038816156109f45787610a71565b600f546040805160e160020a634551e90b0281523060048201529051600160a060020a0390921691638aa3d216916024808201926020929091908290030181600087803b158015610a4457600080fd5b505af1158015610a58573d6000803e3d6000fd5b505050506040513d6020811015610a6e57600080fd5b50515b600854909850610a929086908a908990600160a060020a031686898d611d31565b9050610aad610a9f611c2c565b82610aa8611e1b565b611e3a565b83600160a060020a031663d6751c0f826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b158015610b0857600080fd5b505af1158015610b1c573d6000803e3d6000fd5b5050505083600160a060020a03166313af4035610b37611e1b565b6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b158015610b8257600080fd5b505af1158015610b96573d6000803e3d6000fd5b5050505087600160a060020a03166372f22f70826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b158015610bf557600080fd5b505af1158015610c09573d6000803e3d6000fd5b50506040805160e060020a6313af40350281523360048201529051600160a060020a038c1693506313af40359250602480830192600092919082900301818387803b158015610c5757600080fd5b505af1158015610c6b573d6000803e3d6000fd5b50505050610c78816121e6565b60408051600160a060020a0380881682528085166020830152808416828401528a16606082015290517f182ae041ffb34cc7afaee8831fb079769333f1a6f649f0b9c7023e67d05f64b49181900360800190a15050505050505050565b600080516020614f9c83398151915281565b600e54600160a060020a031681565b604080518082019091526001815260f860020a606102602082015281565b600954600160a060020a031681565b600080516020614f7c83398151915281565b336000908152600660209081526040808320600490810154825160e660020a62200feb0281529251859485948594859485948594600160a060020a0390921693630803fac09381810193929182900301818787803b158015610d9657600080fd5b505af1158015610daa573d6000803e3d6000fd5b505050506040513d6020811015610dc057600080fd5b5051604080518082019091526008815260c060020a674e4f5f4341434845026020820152901515610e365760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107d15781810151838201526020016107b9565b50610e3f611be9565b975050965096509650610e50612218565b9250610e6686610e5f8961223b565b8788612300565b610e9d87600d60009054906101000a9004600160a060020a03168f8f600e60009054906101000a9004600160a060020a03166124e6565b9150610eab8683878861265b565b85600160a060020a031663be038478838788600160a060020a031663d35424fa6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610efa57600080fd5b505af1158015610f0e573d6000803e3d6000fd5b505050506040513d6020811015610f2457600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291891660648201529051608480830192600092919082900301818387803b158015610f8357600080fd5b505af1158015610f97573d6000803e3d6000fd5b5050505085600160a060020a031663be038478838586600160a060020a031663d35424fa6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610fea57600080fd5b505af1158015610ffe573d6000803e3d6000fd5b505050506040513d602081101561101457600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291891660648201529051608480830192600092919082900301818387803b15801561107357600080fd5b505af1158015611087573d6000803e3d6000fd5b5050505081600160a060020a0316633a999604866110a48761281f565b8e8e600060200201518f600160200201516040805160e060020a63ffffffff8916028152600160a060020a0396871660048201529490951660248501526001604060020a03909216604484015260648301526084820152905160a480830192600092919082900301818387803b15801561111d57600080fd5b505af1158015611131573d6000803e3d6000fd5b5050505081600160a060020a0316633a9996048461114e8761281f565b8e8e600060200201518f600160200201516040805160e060020a63ffffffff8916028152600160a060020a0396871660048201529490951660248501526001604060020a03909216604484015260648301526084820152905160a480830192600092919082900301818387803b1580156111c757600080fd5b505af11580156111db573d6000803e3d6000fd5b50505050611222868384600160a060020a0316632cfbcf1b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561086757600080fd5b61122e60046000613efb565b600480546001818101835560008381527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9283018054600160a060020a03808c16600160a060020a031992831617909255855493840190955591909201805491871691909316179091556112a490600590613efb565b60056112af8561281f565b8154600181018355600092835260209092209091018054600160a060020a031916600160a060020a0390921691909117905560056112ec8561281f565b90806001815401808255809150509060018203906000526020600020016000909192909190916101000a815481600160a060020a030219169083600160a060020a0316021790555050600b60009054906101000a9004600160a060020a0316600160a060020a03166339de624f83600460058d8d89600160a060020a0316630649d6dc6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561139e57600080fd5b505af11580156113b2573d6000803e3d6000fd5b505050506040513d60208110156113c857600080fd5b505160085460405160e060020a63ffffffff8a16028152600160a060020a038881166004830190815281851660a4840152921660c4820181905260e060248301908152885460e48401819052919392909160448201916064810191608482019161010401908c90801561146457602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611446575b505085810384528a81815481526020019150805480156114ad57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161148f575b50508581038352895181528951602091820191808c01910280838360005b838110156114e35781810151838201526020016114cb565b50505050905001858103825288818151815260200191508051906020019060200280838360005b8381101561152257818101518382015260200161150a565b505050509050019b505050505050505050505050602060405180830381600087803b15801561155057600080fd5b505af1158015611564573d6000803e3d6000fd5b505050506040513d602081101561157a57600080fd5b50516040805160e060020a63f2fde38b028152600160a060020a03888116600483015291519293509083169163f2fde38b9160248082019260009290919082900301818387803b1580156115cd57600080fd5b505af11580156115e1573d6000803e3d6000fd5b5050505085600160a060020a031663be038478828485600160a060020a0316632cfbcf1b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561163457600080fd5b505af1158015611648573d6000803e3d6000fd5b505050506040513d602081101561165e57600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291891660648201529051608480830192600092919082900301818387803b1580156116bd57600080fd5b505af11580156116d1573d6000803e3d6000fd5b505050506116df8786612983565b6116e7612992565b60408051600160a060020a03808a1682528316602082015281517ff1d63833ffe1e3d8061a873f5f2f8048af1d03586b7592897d5c21514b9035b6929181900390910190a15050505050505050505050505050565b600b54600160a060020a031681565b600d54600160a060020a031681565b600080516020614fdc83398151915281565b600c54600160a060020a031681565b600080600080600080600080600780146040805190810160405280600c815260200160a060020a6b4241445f53455454494e4753028152509015156118055760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107d15781810151838201526020016107b9565b5061180e6129e7565b8d519199509750955061182e8b8b6012600160a060020a038a1615612b65565b945061183b888688612db3565b9350611848888c8c612ec9565b925061185588848b6131c3565b60208d0151909250600160a060020a03161561187e5760208c01516118799061329f565b611889565b6118898888846132e0565b90506118ff878485600160a060020a0316637d5b23a26040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156118ce57600080fd5b505af11580156118e2573d6000803e3d6000fd5b505050506040513d60208110156118f857600080fd5b505161334a565b6040805160e060020a630f3d5d97028152600160a060020a0387811660048301526001602483018190526044830152915191851691630f3d5d979160648082019260009290919082900301818387803b15801561195b57600080fd5b505af115801561196f573d6000803e3d6000fd5b505050506119b6878485600160a060020a0316637d5b23a26040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561086757600080fd5b6119c087836133af565b6119cb878384613597565b611a0e878586600160a060020a031663e9a9c8506040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156118ce57600080fd5b611a1b88888484886137d3565b60408051600160a060020a038316815290517f42b181b1f408abf85d496616a33632c5b354f9d2b99d524baf3ee65bc0351bc09181900360200190a1505050505050505050505050565b7fb4534ca120beef0055b5bd2dbbfe396de7648f1c13a4f7bdfd5a9bd9b40fe82481565b600080611a94611be9565b955050505050600090505b8351811015611b5d5781600160a060020a03166340c10f198583815181101515611ac557fe5b906020019060200201518584815181101515611add57fe5b906020019060200201516040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b158015611b3957600080fd5b505af1158015611b4d573d6000803e3d6000fd5b505060019092019150611a9f9050565b50505050565b600754600160a060020a031681565b600854600160a060020a031681565b60408051808201909152600a815260b260020a691059d9dc9959d85d195902602082015281565b6201518081565b600881565b600a54600160a060020a031681565b600080516020614f3c83398151915281565b600181565b600f54600160a060020a031681565b3360009081526006602052604090208054600182015460028301546003840154600490940154600160a060020a0393841695928416949184169391821692911690565b33600090815260066020526040902060010154600160a060020a03165b90565b6040805160e060020a639d0effdb028152306004820152600160a060020a03848116602483015260448201849052915191851691639d0effdb9160648082019260009290919082900301818387803b158015611ca757600080fd5b505af1158015611cbb573d6000803e3d6000fd5b50506040805160e160020a635442a845028152600160a060020a038681166004830152602482018690529151918716935063a885508a925060448082019260009290919082900301818387803b158015611d1457600080fd5b505af1158015611d28573d6000803e3d6000fd5b50505050505050565b600080611d4c89600080516020614f9c833981519152613848565b835160208501516040808701516060880151825160e060020a636322b513028152600160a060020a038f811660048301528e811660248301528d811660448301528c811660648301528b811660848301526001604060020a0396871660a483015294861660c482015291851660e48301529390931661010484015251929350831691636322b513916101248082019260009290919082900301818387803b158015611df657600080fd5b505af1158015611e0a573d6000803e3d6000fd5b50929b9a5050505050505050505050565b33600090815260066020526040902060020154600160a060020a031690565b82600160a060020a031663be0384786000198485600160a060020a0316638f911dca6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611e8b57600080fd5b505af1158015611e9f573d6000803e3d6000fd5b505050506040513d6020811015611eb557600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291851660648201529051608480830192600092919082900301818387803b158015611f1457600080fd5b505af1158015611f28573d6000803e3d6000fd5b5050505082600160a060020a031663be0384786000198485600160a060020a031663eeabf67e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611f7d57600080fd5b505af1158015611f91573d6000803e3d6000fd5b505050506040513d6020811015611fa757600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291851660648201529051608480830192600092919082900301818387803b15801561200657600080fd5b505af115801561201a573d6000803e3d6000fd5b5050505082600160a060020a031663be038478828485600160a060020a031663f31bbd7f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561206d57600080fd5b505af1158015612081573d6000803e3d6000fd5b505050506040513d602081101561209757600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291851660648201529051608480830192600092919082900301818387803b1580156120f657600080fd5b505af115801561210a573d6000803e3d6000fd5b5050505082600160a060020a031663be038478828485600160a060020a0316634f629fbb6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561215d57600080fd5b505af1158015612171573d6000803e3d6000fd5b505050506040513d602081101561218757600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291851660648201529051608480830192600092919082900301818387803b158015611d1457600080fd5b3360009081526006602052604090206005018054600160a060020a031916600160a060020a0392909216919091179055565b3360009081526006602052604090206005810154600160a060020a0316905b5090565b604080516004815260248101909152602081018051600160e060020a031660e260020a63204a7f07021790526000908161228484600080516020614f5c8339815191528461386c565b6040805160e060020a638c61757d028152600080516020614f5c83398151915260048201529051919250600160a060020a03861691638c61757d9160248082019260009290919082900301818387803b1580156122e057600080fd5b505af11580156122f4573d6000803e3d6000fd5b50929695505050505050565b83600160a060020a031663be038478838586600160a060020a0316635fa5e4e66040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561234f57600080fd5b505af1158015612363573d6000803e3d6000fd5b505050506040513d602081101561237957600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291851660648201529051608480830192600092919082900301818387803b1580156123d857600080fd5b505af11580156123ec573d6000803e3d6000fd5b5050505083600160a060020a031663be038478838586600160a060020a031663368c3c346040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561243f57600080fd5b505af1158015612453573d6000803e3d6000fd5b505050506040513d602081101561246957600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291851660648201529051608480830192600092919082900301818387803b1580156124c857600080fd5b505af11580156124dc573d6000803e3d6000fd5b5050505050505050565b604051600160a060020a038581166024830190815260006044840181905291841660a484015260a060648401908152865160c48501528651929360609360e160020a6316bdb7dd02938a9387938b938b938b9390929091608482019160e4019060208801908083838c5b83811015612568578181015183820152602001612550565b50505050905090810190601f1680156125955780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b838110156125c85781810151838201526020016125b0565b50505050905090810190601f1680156125f55780820380516001836020036101000a031916815260200191505b5097505050505050505060405160208183030381529060405290600160e060020a031916602082018051600160e060020a038381831617835250505050905061265087600080516020614fbc83398151915260010283613883565b979650505050505050565b83600160a060020a031663be038478838586600160a060020a031663cd253d996040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156126aa57600080fd5b505af11580156126be573d6000803e3d6000fd5b505050506040513d60208110156126d457600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291851660648201529051608480830192600092919082900301818387803b15801561273357600080fd5b505af1158015612747573d6000803e3d6000fd5b5050505083600160a060020a031663be038478308586600160a060020a0316632cfbcf1b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561279a57600080fd5b505af11580156127ae573d6000803e3d6000fd5b505050506040513d60208110156127c457600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201523060648201529051608480830192600092919082900301818387803b1580156124c857600080fd5b600080600160a060020a031682600160a060020a0316631dfab0356040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561286957600080fd5b505af115801561287d573d6000803e3d6000fd5b505050506040513d602081101561289357600080fd5b5051600160a060020a0316146129125781600160a060020a0316631dfab0356040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156128e157600080fd5b505af11580156128f5573d6000803e3d6000fd5b505050506040513d602081101561290b57600080fd5b505161297d565b81600160a060020a031663fc0c546a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561295057600080fd5b505af1158015612964573d6000803e3d6000fd5b505050506040513d602081101561297a57600080fd5b50515b92915050565b61298e828283613892565b5050565b3360009081526006602052604090208054600160a060020a0319908116825560018201805482169055600282018054821690556003820180548216905560048201805482169055600590910180549091169055565b6001546040805160e260020a63085a1d1102815230600482015290516000928392600160a060020a039091169163216874449160248082019260209290919082900301818787803b158015612a3b57600080fd5b505af1158015612a4f573d6000803e3d6000fd5b505050506040513d6020811015612a6557600080fd5b505160408051600160a060020a038316815290519193507f0b13a9ab90735191cd544fd95ba68d1385144561cbdeb8acb8035de9a86432f5919081900360200190a181600160a060020a031663de2873596040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015612ae557600080fd5b505af1158015612af9573d6000803e3d6000fd5b505050506040513d6020811015612b0f57600080fd5b50516040805160e060020a638ea8dc9d0281529051919250612b619183918591600160a060020a03831691638ea8dc9d9160048083019260209291908290030181600087803b1580156118ce57600080fd5b9091565b6007546040805180820190915260208082527f54454d504c4154455f4d494e494d455f4641435f4e4f545f50524f564944454490820152600091829190600160a060020a03161515612bfc5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107d15781810151838201526020016107b9565b5060075460405160e060020a635b7b72c10281526000600482018181526024830182905260ff8816606484015286151560a484015260c0604484019081528a5160c48501528a51600160a060020a0390951694635b7b72c19484938d938c938e938d939291608482019160e4019060208901908083838d5b83811015612c8c578181015183820152602001612c74565b50505050905090810190601f168015612cb95780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015612cec578181015183820152602001612cd4565b50505050905090810190601f168015612d195780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b158015612d3e57600080fd5b505af1158015612d52573d6000803e3d6000fd5b505050506040513d6020811015612d6857600080fd5b505160408051600160a060020a038316815290519192507fd18525bc6595a90cc21e9fbd517ada6fc07a7e87b7d2cdb6ee9284c450ebffa4919081900360200190a195945050505050565b600080612dce85600080516020614f3c833981519152613a09565b905083600160a060020a0316633cebb823826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b158015612e2b57600080fd5b505af1158015612e3f573d6000803e3d6000fd5b50506040805160e060020a63effb9523028152600160a060020a03888116600483015287811660248301526001604483015260001960648301529151918516935063effb9523925060848082019260009290919082900301818387803b158015612ea857600080fd5b505af1158015612ebc573d6000803e3d6000fd5b5092979650505050505050565b600080606080612ee787600080516020614fdc833981519152613848565b92506040805190810160405280600a815260200160b260020a691059d9dc9959d85d195902815250866040516020018083805190602001908083835b60208310612f425780518252601f199092019160209182019101612f23565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310612f8a5780518252601f199092019160209182019101612f6b565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f190183528085018552600180825260f860020a6061028284019081529551939a509097508c965091019350839291508083835b602083106130035780518252601f199092019160209182019101612fe4565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b6020831061304b5780518252601f19909201916020918201910161302c565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905082600160a060020a0316631624f6c6838360126040518463ffffffff1660e060020a0281526004018080602001806020018460ff168152602001838103835286818151815260200191508051906020019080838360005b838110156130f15781810151838201526020016130d9565b50505050905090810190601f16801561311e5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015613151578181015183820152602001613139565b50505050905090810190601f16801561317e5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156131a057600080fd5b505af11580156131b4573d6000803e3d6000fd5b50949998505050505050505050565b80516020808301516040808501516060860151608087015160a088015160c08901518551600160a060020a038c1660248201526001604060020a03808b1660448301528089166064830152808716608483015280861660a483015280851660c483015280841660e4830152821661010480830191909152875180830390910181526101249091019096529685018051600160e060020a031660e460020a630acec48f021790526000979693949293919290919061328f8c600080516020614f7c83398151915283613883565b9c9b505050505050505050505050565b600080826132ab613f1c565b600160a060020a03909116815260405190819003602001906000f0801580156132d8573d6000803e3d6000fd5b509392505050565b60008060006132ee8661223b565b9150816132f9613f2c565b600160a060020a03909116815260405190819003602001906000f080158015613326573d6000803e3d6000fd5b50905061333585838687612300565b61334185838387613a26565b95945050505050565b6040805160e360020a6317c0708f0281523060048201819052600160a060020a03858116602484015260448301859052606483019190915291519185169163be0384789160848082019260009290919082900301818387803b158015611d1457600080fd5b81600160a060020a031663be0384786000198384600160a060020a0316638f911dca6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561340057600080fd5b505af1158015613414573d6000803e3d6000fd5b505050506040513d602081101561342a57600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291851660648201529051608480830192600092919082900301818387803b15801561348957600080fd5b505af115801561349d573d6000803e3d6000fd5b5050505081600160a060020a031663be0384786000198384600160a060020a031663be2c64d46040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156134f257600080fd5b505af1158015613506573d6000803e3d6000fd5b505050506040513d602081101561351c57600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291851660648201529051608480830192600092919082900301818387803b15801561357b57600080fd5b505af115801561358f573d6000803e3d6000fd5b505050505050565b600083600160a060020a031663a479e5086040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156135d757600080fd5b505af11580156135eb573d6000803e3d6000fd5b505050506040513d602081101561360157600080fd5b50516040805160e260020a632f63f7870281529051919250600160a060020a038087169263be03847892879286929083169163bd8fde1c9160048083019260209291908290030181600087803b15801561365a57600080fd5b505af115801561366e573d6000803e3d6000fd5b505050506040513d602081101561368457600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291861660648201529051608480830192600092919082900301818387803b1580156136e357600080fd5b505af11580156136f7573d6000803e3d6000fd5b5050505083600160a060020a031663be038478848384600160a060020a03166319f3d10f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561374a57600080fd5b505af115801561375e573d6000803e3d6000fd5b505050506040513d602081101561377457600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291861660648201529051608480830192600092919082900301818387803b1580156124c857600080fd5b3360009081526006602052604090208054600160a060020a0319908116600160a060020a03978816178255600182018054821696881696909617909555600281018054861694871694909417909355600383018054851692861692909217909155600490910180549092169216919091179055565b604080516000808252602082019092526138659084908490613883565b9392505050565b600061387b8484846001613a75565b949350505050565b600061387b8484846000613a75565b600083600160a060020a031663de2873596040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156138d257600080fd5b505af11580156138e6573d6000803e3d6000fd5b505050506040513d60208110156138fc57600080fd5b50516040805160e060020a638ea8dc9d028152905191925061398391839187918791600160a060020a03841691638ea8dc9d916004808201926020929091908290030181600087803b15801561395157600080fd5b505af1158015613965573d6000803e3d6000fd5b505050506040513d602081101561397b57600080fd5b505186613bcc565b6139c781828584600160a060020a0316633d6ab68f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561395157600080fd5b60408051600160a060020a038616815290517f17592627a66846ce06d92a1708275bc653b2a3f34aec855584b819872a8ba4139181900360200190a150505050565b60408051600080825260208201909252613865908490849061386c565b83600160a060020a031663be038478838586600160a060020a031663206b60f96040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561243f57600080fd5b6000806000613a8386613d30565b60405160e060020a63397edd4102815260048101888152600160a060020a0380841660248401528715156064840152608060448401908152895160848501528951949650908b169363397edd41938b9388938c938c9360a40190602086019080838360005b83811015613b00578181015183820152602001613ae8565b50505050905090810190601f168015613b2d5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015613b4f57600080fd5b505af1158015613b63573d6000803e3d6000fd5b505050506040513d6020811015613b7957600080fd5b505160408051600160a060020a03831681526020810189905281519293507f2b183a501d4b1bbd30e6611ebac40ab18a00390e6c6bed324bf92a265c9ce6e3929081900390910190a19695505050505050565b6040805160e060020a630a8ed3db028152600160a060020a038581166004830152868116602483015260448201859052915191871691630a8ed3db9160648082019260009290919082900301818387803b158015613c2957600080fd5b505af1158015613c3d573d6000803e3d6000fd5b50506040805160e060020a639d0effdb028152306004820152600160a060020a0388811660248301526044820187905291519189169350639d0effdb925060648082019260009290919082900301818387803b158015613c9c57600080fd5b505af1158015613cb0573d6000803e3d6000fd5b50506040805160e060020a63afd925df028152600160a060020a0385811660048301528881166024830152604482018790529151918916935063afd925df925060648082019260009290919082900301818387803b158015613d1157600080fd5b505af1158015613d25573d6000803e3d6000fd5b505050505050505050565b600080546040805160e060020a630178b8bf0281526004810185905290518392600160a060020a031691630178b8bf91602480830192602092919082900301818787803b158015613d8057600080fd5b505af1158015613d94573d6000803e3d6000fd5b505050506040513d6020811015613daa57600080fd5b50516040805160e160020a631d9dabef028152600481018690529051600160a060020a0390921691633b3b57de916024808201926020929091908290030181600087803b158015613dfa57600080fd5b505af1158015613e0e573d6000803e3d6000fd5b505050506040513d6020811015613e2457600080fd5b50516040805160e560020a63061b57a30281529051919250600160a060020a0383169163c36af4609160048082019260009290919082900301818387803b158015613e6e57600080fd5b505af1158015613e82573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260a0811015613eab57600080fd5b60608201516080830180519192840191849190602060020a811115613ecf57600080fd5b82016020810184811115613ee257600080fd5b8151602060020a8111828201871017156131b457600080fd5b5080546000825590600052602060002090810190613f199190613f3c565b50565b6040516109fc80613f5783390190565b6040516105e98061495383390190565b611c4991905b808211156122375760008155600101613f425600608060405234801561001057600080fd5b506040516020806109fc833981016040525160008054600160a060020a0319908116331790915560028054600160a060020a039093169290911691909117905561099d8061005f6000396000f3006080604052600436106100955763ffffffff60e060020a60003504166301d08cf1811461009a57806303440db1146100cf57806313af4035146100f257806346ee3c591461011357806372e93225146101445780638322fff2146101765780638da5cb5b1461018b578063a84173ae146101a0578063beabacc8146101b5578063d6751c0f146101df578063e3d670d714610200575b600080fd5b3480156100a657600080fd5b506100bb600160a060020a0360043516610233565b604080519115158252519081900360200190f35b3480156100db57600080fd5b506100f0600160a060020a0360043516610248565b005b3480156100fe57600080fd5b506100f0600160a060020a0360043516610332565b34801561011f57600080fd5b506101286103a9565b60408051600160a060020a039092168252519081900360200190f35b34801561015057600080fd5b506101596103b8565b60408051600160e060020a03199092168252519081900360200190f35b34801561018257600080fd5b506101286103c6565b34801561019757600080fd5b506101286103cb565b3480156101ac57600080fd5b506101286103da565b3480156101c157600080fd5b506100f0600160a060020a03600435811690602435166044356103e9565b3480156101eb57600080fd5b506100f0600160a060020a0360043516610846565b34801561020c57600080fd5b50610221600160a060020a03600435166108c2565b60408051918252519081900360200190f35b60016020526000908152604090205460ff1681565b600054600160a060020a0316331461029d576040805160e560020a62461bcd02815260206004820152600d6024820152609960020a6c22a9291d2727aa2fa7aba722a902604482015290519081900360640190fd5b600160a060020a03811660009081526001602081905260409091205460ff16151514610311576040805160e560020a62461bcd0281526020600482015260186024820152604160020a7722a9291d29a427aaa6222fa122afa32aa72229afaaa9a2a902604482015290519081900360640190fd5b600160a060020a03166000908152600160205260409020805460ff19169055565b600054600160a060020a03163314610387576040805160e560020a62461bcd02815260206004820152600d6024820152609960020a6c22a9291d2727aa2fa7aba722a902604482015290519081900360640190fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b600254600160a060020a031690565b60e060020a63a9059cbb0281565b600081565b600054600160a060020a031681565b600254600160a060020a031681565b3360009081526001602081905260408220546060918291849160ff909116151514610456576040805160e560020a62461bcd0281526020600482015260126024820152607160020a7122a9291d2727aa2fa32aa72229afaaa9a2a902604482015290519081900360640190fd5b600160a060020a03871615156105d857600254604080516000808252602082019283905260e060020a635229073f028352600160a060020a038a811660248401908152604484018b905260848401839052608060648501908152845160a486018190529290961695635229073f958d958d9590949093929160c4860191808383885b838110156104f05781810151838201526020016104d8565b50505050905090810190601f16801561051d5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561053f57600080fd5b505af1158015610553573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561057c57600080fd5b815160208301805191939283019291602060020a81111561059c57600080fd5b820160208101848111156105af57600080fd5b8151602060020a8111828201871017156105c857600080fd5b50949850965061077f9350505050565b60408051600160a060020a0388811660248084019190915260448084018a905284518085038201815260649485018652602081018051600160e060020a031660e060020a63a9059cbb02178152600254965160e060020a635229073f0281528e861660048201908152600095820186905296810185905260809381019384528251608482015282519299509690941695635229073f958e958a9486949293909260a49091019190808383885b8381101561069c578181015183820152602001610684565b50505050905090810190601f1680156106c95780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156106eb57600080fd5b505af11580156106ff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561072857600080fd5b815160208301805191939283019291602060020a81111561074857600080fd5b8201602081018481111561075b57600080fd5b8151602060020a81118282018710171561077457600080fd5b509498509650505050505b5060208201518315156107d7576040805160e560020a62461bcd0281526020600482015260156024820152605a60020a741154948e9514905394d1915497d49155915495115102604482015290519081900360640190fd5b600160a060020a0387161561083d5780151561083d576040805160e560020a62461bcd02815260206004820152601c60248201527f4552523a5452414e534645525f4e4f545f52455455524e5f5452554500000000604482015290519081900360640190fd5b50505050505050565b600054600160a060020a0316331461089b576040805160e560020a62461bcd02815260206004820152600d6024820152609960020a6c22a9291d2727aa2fa7aba722a902604482015290519081900360640190fd5b600160a060020a03166000908152600160208190526040909120805460ff19169091179055565b600080600160a060020a03831615156108e957600254600160a060020a031631915061096b565b506002546040805160e060020a6370a08231028152600160a060020a039283166004820152905184928316916370a082319160248083019260209291908290030181600087803b15801561093c57600080fd5b505af1158015610950573d6000803e3d6000fd5b505050506040513d602081101561096657600080fd5b505191505b509190505600a165627a7a7230582093dc6e8f5ab2b1acdafa6cf5d78f48ad22aeb7f11330c5b8ad5be958b9e6c6d10029608060405234801561001057600080fd5b506040516020806105e9833981016040525160008054600160a060020a0319908116331790915560028054600160a060020a039093169290911691909117905561058a8061005f6000396000f30060806040526004361061007f5763ffffffff60e060020a60003504166301d08cf1811461008457806303440db1146100b957806313af4035146100dc57806346ee3c59146100fd5780638da5cb5b1461012e57806392a8843914610143578063beabacc814610158578063d6751c0f14610182578063e3d670d7146101a3575b600080fd5b34801561009057600080fd5b506100a5600160a060020a03600435166101d6565b604080519115158252519081900360200190f35b3480156100c557600080fd5b506100da600160a060020a03600435166101eb565b005b3480156100e857600080fd5b506100da600160a060020a03600435166102d5565b34801561010957600080fd5b5061011261034c565b60408051600160a060020a039092168252519081900360200190f35b34801561013a57600080fd5b5061011261035b565b34801561014f57600080fd5b5061011261036a565b34801561016457600080fd5b506100da600160a060020a0360043581169060243516604435610379565b34801561018e57600080fd5b506100da600160a060020a036004351661045b565b3480156101af57600080fd5b506101c4600160a060020a03600435166104d7565b60408051918252519081900360200190f35b60016020526000908152604090205460ff1681565b600054600160a060020a03163314610240576040805160e560020a62461bcd02815260206004820152600d6024820152609960020a6c22a9291d2727aa2fa7aba722a902604482015290519081900360640190fd5b600160a060020a03811660009081526001602081905260409091205460ff161515146102b4576040805160e560020a62461bcd0281526020600482015260186024820152604160020a7722a9291d29a427aaa6222fa122afa32aa72229afaaa9a2a902604482015290519081900360640190fd5b600160a060020a03166000908152600160205260409020805460ff19169055565b600054600160a060020a0316331461032a576040805160e560020a62461bcd02815260206004820152600d6024820152609960020a6c22a9291d2727aa2fa7aba722a902604482015290519081900360640190fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b600254600160a060020a031690565b600054600160a060020a031681565b600254600160a060020a031681565b3360009081526001602081905260409091205460ff161515146103de576040805160e560020a62461bcd0281526020600482015260126024820152607160020a7122a9291d2727aa2fa32aa72229afaaa9a2a902604482015290519081900360640190fd5b6002546040805160e360020a6317d57599028152600160a060020a0386811660048301528581166024830152604482018590529151919092169163beabacc891606480830192600092919082900301818387803b15801561043e57600080fd5b505af1158015610452573d6000803e3d6000fd5b50505050505050565b600054600160a060020a031633146104b0576040805160e560020a62461bcd02815260206004820152600d6024820152609960020a6c22a9291d2727aa2fa7aba722a902604482015290519081900360640190fd5b600160a060020a03166000908152600160208190526040909120805460ff19169091179055565b6002546040805160e060020a63e3d670d7028152600160a060020a0384811660048301529151600093929092169163e3d670d79160248082019260209290919082900301818787803b15801561052c57600080fd5b505af1158015610540573d6000803e3d6000fd5b505050506040513d602081101561055657600080fd5b5051929150505600a165627a7a723058202fbf07da61d0d1a673a3c60e7020d5a9b937132b6730ca115b8a163cc5d0044500293ccad1fc11d5b14e58c1c53a5138a51f4da8d509831bc505e60bb74d88f8bef59ac98dc5f995bf0211ed589ef022719d1487e5cb2bab505676f0d084c07cf89a705b5084c67966bb8e4640b28bab7a1e51e03d209d84e3a04d2a4f7415f93b34589851b3734f6578a92f33bfc26877a1166b95238be1f484deeaac6383d14c3841dd0b999b443a19321f2f34fe8078d1af95a1487b49af4c2ca57fb9e3e5331e956b8eeee6100c059c6e68ccf3f3ed9483796128e80f458bc52ad1e6ef246fe6a165627a7a723058200d189b6d45af6b2163af8ba00410a589514e8fcdcff8cb46a96ac8c642845bcd0029",
  "deployedBytecode": "0x60806040526004361061013a5763ffffffff60e060020a600035041663036489b9811461013f5780630e7e97841461016657806317a278c91461017b5780631daffacb14610190578063262337e9146101eb578063291347681461020057806339e39056146102315780635314666c146102bb57806363033ba3146102d0578063648361ae146102e557806366175071146104625780636cc6cde11461047757806378d5f0621461048c5780638bdb2afa146104a15780638f3683f0146104b6578063929b55b214610598578063a164f269146105ad578063a81a57da1461063b578063a9d75b2b14610650578063ba945c6314610665578063ce10a79a1461067a578063db6c4c061461068f578063e8389b7c146106ba578063f21a4cf1146106cf578063f98a150e146106e4578063fa29b497146106f9575b600080fd5b34801561014b57600080fd5b5061015461070e565b60408051918252519081900360200190f35b34801561017257600080fd5b50610154610720565b34801561018757600080fd5b5061015461072b565b34801561019c57600080fd5b506040805160808082019092526101e99160048035600160a060020a031692369260a49190602490849083908390808284375093965050509135600160a060020a03169250610738915050565b005b3480156101f757600080fd5b50610154610cd5565b34801561020c57600080fd5b50610215610ce7565b60408051600160a060020a039092168252519081900360200190f35b34801561023d57600080fd5b50610246610cf6565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610280578181015183820152602001610268565b50505050905090810190601f1680156102ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102c757600080fd5b50610215610d14565b3480156102dc57600080fd5b50610154610d23565b3480156102f157600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101e994369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437505060408051808201825295986001604060020a0388351698909790966060820196509450602001925060029150839083908082843750506040805186358801803560208181028481018201909552818452979a99988801979296509082019450925082919085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610d359650505050505050565b34801561046e57600080fd5b5061021561173c565b34801561048357600080fd5b5061021561174b565b34801561049857600080fd5b5061015461175a565b3480156104ad57600080fd5b5061021561176c565b3480156104c257600080fd5b506040805180820182526101e991369160049160449190839060029083908390808284375050604080516020601f88358a0180359182018390048302840183019094528083529699989781019691955091820193509150819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805160e0818101909252959897968181019695509350600792508491508390808284375093965061177b95505050505050565b3480156105a457600080fd5b50610154611a65565b3480156105b957600080fd5b50604080516020600480358082013583810280860185019096528085526101e995369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750611a899650505050505050565b34801561064757600080fd5b50610215611b63565b34801561065c57600080fd5b50610215611b72565b34801561067157600080fd5b50610246611b81565b34801561068657600080fd5b50610154611ba8565b34801561069b57600080fd5b506106a4611baf565b6040805160ff9092168252519081900360200190f35b3480156106c657600080fd5b50610215611bb4565b3480156106db57600080fd5b50610154611bc3565b3480156106f057600080fd5b50610154611bd5565b34801561070557600080fd5b50610215611bda565b600080516020614fbc83398151915281565b66470de4df82000081565b68056bc75e2d6310000081565b3360009081526006602090815260408083205481518083019092526008825260c060020a674e4f5f43414348450292820192909252829182918291829190600160a060020a0316151561080c5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156107d15781810151838201526020016107b9565b50505050905090810190601f1680156107fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610815611be9565b9650965050509450610898610828611c2c565b8485600160a060020a031663e9a9c8506040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561086757600080fd5b505af115801561087b573d6000803e3d6000fd5b505050506040513d602081101561089157600080fd5b5051611c4c565b600a54600c54600880546040805160e060020a63e6a43905028152600160a060020a0392831660048201528b8316602482015290519482169463ee3e04bc9490921692620151809290918c9166470de4df82000091869163e6a43905916044808201926020929091908290030181600087803b15801561091757600080fd5b505af115801561092b573d6000803e3d6000fd5b505050506040513d602081101561094157600080fd5b50516040805160e060020a63ffffffff8a16028152600160a060020a039788166004820152602481019690965260ff9094166044860152918516606485015260848401529290921660a4820152905160c48083019260209291908290030181600087803b1580156109b157600080fd5b505af11580156109c5573d6000803e3d6000fd5b505050506040513d60208110156109db57600080fd5b50519150600160a060020a038816156109f45787610a71565b600f546040805160e160020a634551e90b0281523060048201529051600160a060020a0390921691638aa3d216916024808201926020929091908290030181600087803b158015610a4457600080fd5b505af1158015610a58573d6000803e3d6000fd5b505050506040513d6020811015610a6e57600080fd5b50515b600854909850610a929086908a908990600160a060020a031686898d611d31565b9050610aad610a9f611c2c565b82610aa8611e1b565b611e3a565b83600160a060020a031663d6751c0f826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b158015610b0857600080fd5b505af1158015610b1c573d6000803e3d6000fd5b5050505083600160a060020a03166313af4035610b37611e1b565b6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b158015610b8257600080fd5b505af1158015610b96573d6000803e3d6000fd5b5050505087600160a060020a03166372f22f70826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b158015610bf557600080fd5b505af1158015610c09573d6000803e3d6000fd5b50506040805160e060020a6313af40350281523360048201529051600160a060020a038c1693506313af40359250602480830192600092919082900301818387803b158015610c5757600080fd5b505af1158015610c6b573d6000803e3d6000fd5b50505050610c78816121e6565b60408051600160a060020a0380881682528085166020830152808416828401528a16606082015290517f182ae041ffb34cc7afaee8831fb079769333f1a6f649f0b9c7023e67d05f64b49181900360800190a15050505050505050565b600080516020614f9c83398151915281565b600e54600160a060020a031681565b604080518082019091526001815260f860020a606102602082015281565b600954600160a060020a031681565b600080516020614f7c83398151915281565b336000908152600660209081526040808320600490810154825160e660020a62200feb0281529251859485948594859485948594600160a060020a0390921693630803fac09381810193929182900301818787803b158015610d9657600080fd5b505af1158015610daa573d6000803e3d6000fd5b505050506040513d6020811015610dc057600080fd5b5051604080518082019091526008815260c060020a674e4f5f4341434845026020820152901515610e365760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107d15781810151838201526020016107b9565b50610e3f611be9565b975050965096509650610e50612218565b9250610e6686610e5f8961223b565b8788612300565b610e9d87600d60009054906101000a9004600160a060020a03168f8f600e60009054906101000a9004600160a060020a03166124e6565b9150610eab8683878861265b565b85600160a060020a031663be038478838788600160a060020a031663d35424fa6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610efa57600080fd5b505af1158015610f0e573d6000803e3d6000fd5b505050506040513d6020811015610f2457600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291891660648201529051608480830192600092919082900301818387803b158015610f8357600080fd5b505af1158015610f97573d6000803e3d6000fd5b5050505085600160a060020a031663be038478838586600160a060020a031663d35424fa6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610fea57600080fd5b505af1158015610ffe573d6000803e3d6000fd5b505050506040513d602081101561101457600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291891660648201529051608480830192600092919082900301818387803b15801561107357600080fd5b505af1158015611087573d6000803e3d6000fd5b5050505081600160a060020a0316633a999604866110a48761281f565b8e8e600060200201518f600160200201516040805160e060020a63ffffffff8916028152600160a060020a0396871660048201529490951660248501526001604060020a03909216604484015260648301526084820152905160a480830192600092919082900301818387803b15801561111d57600080fd5b505af1158015611131573d6000803e3d6000fd5b5050505081600160a060020a0316633a9996048461114e8761281f565b8e8e600060200201518f600160200201516040805160e060020a63ffffffff8916028152600160a060020a0396871660048201529490951660248501526001604060020a03909216604484015260648301526084820152905160a480830192600092919082900301818387803b1580156111c757600080fd5b505af11580156111db573d6000803e3d6000fd5b50505050611222868384600160a060020a0316632cfbcf1b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561086757600080fd5b61122e60046000613efb565b600480546001818101835560008381527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9283018054600160a060020a03808c16600160a060020a031992831617909255855493840190955591909201805491871691909316179091556112a490600590613efb565b60056112af8561281f565b8154600181018355600092835260209092209091018054600160a060020a031916600160a060020a0390921691909117905560056112ec8561281f565b90806001815401808255809150509060018203906000526020600020016000909192909190916101000a815481600160a060020a030219169083600160a060020a0316021790555050600b60009054906101000a9004600160a060020a0316600160a060020a03166339de624f83600460058d8d89600160a060020a0316630649d6dc6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561139e57600080fd5b505af11580156113b2573d6000803e3d6000fd5b505050506040513d60208110156113c857600080fd5b505160085460405160e060020a63ffffffff8a16028152600160a060020a038881166004830190815281851660a4840152921660c4820181905260e060248301908152885460e48401819052919392909160448201916064810191608482019161010401908c90801561146457602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611446575b505085810384528a81815481526020019150805480156114ad57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161148f575b50508581038352895181528951602091820191808c01910280838360005b838110156114e35781810151838201526020016114cb565b50505050905001858103825288818151815260200191508051906020019060200280838360005b8381101561152257818101518382015260200161150a565b505050509050019b505050505050505050505050602060405180830381600087803b15801561155057600080fd5b505af1158015611564573d6000803e3d6000fd5b505050506040513d602081101561157a57600080fd5b50516040805160e060020a63f2fde38b028152600160a060020a03888116600483015291519293509083169163f2fde38b9160248082019260009290919082900301818387803b1580156115cd57600080fd5b505af11580156115e1573d6000803e3d6000fd5b5050505085600160a060020a031663be038478828485600160a060020a0316632cfbcf1b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561163457600080fd5b505af1158015611648573d6000803e3d6000fd5b505050506040513d602081101561165e57600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291891660648201529051608480830192600092919082900301818387803b1580156116bd57600080fd5b505af11580156116d1573d6000803e3d6000fd5b505050506116df8786612983565b6116e7612992565b60408051600160a060020a03808a1682528316602082015281517ff1d63833ffe1e3d8061a873f5f2f8048af1d03586b7592897d5c21514b9035b6929181900390910190a15050505050505050505050505050565b600b54600160a060020a031681565b600d54600160a060020a031681565b600080516020614fdc83398151915281565b600c54600160a060020a031681565b600080600080600080600080600780146040805190810160405280600c815260200160a060020a6b4241445f53455454494e4753028152509015156118055760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107d15781810151838201526020016107b9565b5061180e6129e7565b8d519199509750955061182e8b8b6012600160a060020a038a1615612b65565b945061183b888688612db3565b9350611848888c8c612ec9565b925061185588848b6131c3565b60208d0151909250600160a060020a03161561187e5760208c01516118799061329f565b611889565b6118898888846132e0565b90506118ff878485600160a060020a0316637d5b23a26040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156118ce57600080fd5b505af11580156118e2573d6000803e3d6000fd5b505050506040513d60208110156118f857600080fd5b505161334a565b6040805160e060020a630f3d5d97028152600160a060020a0387811660048301526001602483018190526044830152915191851691630f3d5d979160648082019260009290919082900301818387803b15801561195b57600080fd5b505af115801561196f573d6000803e3d6000fd5b505050506119b6878485600160a060020a0316637d5b23a26040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561086757600080fd5b6119c087836133af565b6119cb878384613597565b611a0e878586600160a060020a031663e9a9c8506040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156118ce57600080fd5b611a1b88888484886137d3565b60408051600160a060020a038316815290517f42b181b1f408abf85d496616a33632c5b354f9d2b99d524baf3ee65bc0351bc09181900360200190a1505050505050505050505050565b7fb4534ca120beef0055b5bd2dbbfe396de7648f1c13a4f7bdfd5a9bd9b40fe82481565b600080611a94611be9565b955050505050600090505b8351811015611b5d5781600160a060020a03166340c10f198583815181101515611ac557fe5b906020019060200201518584815181101515611add57fe5b906020019060200201516040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b158015611b3957600080fd5b505af1158015611b4d573d6000803e3d6000fd5b505060019092019150611a9f9050565b50505050565b600754600160a060020a031681565b600854600160a060020a031681565b60408051808201909152600a815260b260020a691059d9dc9959d85d195902602082015281565b6201518081565b600881565b600a54600160a060020a031681565b600080516020614f3c83398151915281565b600181565b600f54600160a060020a031681565b3360009081526006602052604090208054600182015460028301546003840154600490940154600160a060020a0393841695928416949184169391821692911690565b33600090815260066020526040902060010154600160a060020a03165b90565b6040805160e060020a639d0effdb028152306004820152600160a060020a03848116602483015260448201849052915191851691639d0effdb9160648082019260009290919082900301818387803b158015611ca757600080fd5b505af1158015611cbb573d6000803e3d6000fd5b50506040805160e160020a635442a845028152600160a060020a038681166004830152602482018690529151918716935063a885508a925060448082019260009290919082900301818387803b158015611d1457600080fd5b505af1158015611d28573d6000803e3d6000fd5b50505050505050565b600080611d4c89600080516020614f9c833981519152613848565b835160208501516040808701516060880151825160e060020a636322b513028152600160a060020a038f811660048301528e811660248301528d811660448301528c811660648301528b811660848301526001604060020a0396871660a483015294861660c482015291851660e48301529390931661010484015251929350831691636322b513916101248082019260009290919082900301818387803b158015611df657600080fd5b505af1158015611e0a573d6000803e3d6000fd5b50929b9a5050505050505050505050565b33600090815260066020526040902060020154600160a060020a031690565b82600160a060020a031663be0384786000198485600160a060020a0316638f911dca6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611e8b57600080fd5b505af1158015611e9f573d6000803e3d6000fd5b505050506040513d6020811015611eb557600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291851660648201529051608480830192600092919082900301818387803b158015611f1457600080fd5b505af1158015611f28573d6000803e3d6000fd5b5050505082600160a060020a031663be0384786000198485600160a060020a031663eeabf67e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611f7d57600080fd5b505af1158015611f91573d6000803e3d6000fd5b505050506040513d6020811015611fa757600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291851660648201529051608480830192600092919082900301818387803b15801561200657600080fd5b505af115801561201a573d6000803e3d6000fd5b5050505082600160a060020a031663be038478828485600160a060020a031663f31bbd7f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561206d57600080fd5b505af1158015612081573d6000803e3d6000fd5b505050506040513d602081101561209757600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291851660648201529051608480830192600092919082900301818387803b1580156120f657600080fd5b505af115801561210a573d6000803e3d6000fd5b5050505082600160a060020a031663be038478828485600160a060020a0316634f629fbb6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561215d57600080fd5b505af1158015612171573d6000803e3d6000fd5b505050506040513d602081101561218757600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291851660648201529051608480830192600092919082900301818387803b158015611d1457600080fd5b3360009081526006602052604090206005018054600160a060020a031916600160a060020a0392909216919091179055565b3360009081526006602052604090206005810154600160a060020a0316905b5090565b604080516004815260248101909152602081018051600160e060020a031660e260020a63204a7f07021790526000908161228484600080516020614f5c8339815191528461386c565b6040805160e060020a638c61757d028152600080516020614f5c83398151915260048201529051919250600160a060020a03861691638c61757d9160248082019260009290919082900301818387803b1580156122e057600080fd5b505af11580156122f4573d6000803e3d6000fd5b50929695505050505050565b83600160a060020a031663be038478838586600160a060020a0316635fa5e4e66040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561234f57600080fd5b505af1158015612363573d6000803e3d6000fd5b505050506040513d602081101561237957600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291851660648201529051608480830192600092919082900301818387803b1580156123d857600080fd5b505af11580156123ec573d6000803e3d6000fd5b5050505083600160a060020a031663be038478838586600160a060020a031663368c3c346040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561243f57600080fd5b505af1158015612453573d6000803e3d6000fd5b505050506040513d602081101561246957600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291851660648201529051608480830192600092919082900301818387803b1580156124c857600080fd5b505af11580156124dc573d6000803e3d6000fd5b5050505050505050565b604051600160a060020a038581166024830190815260006044840181905291841660a484015260a060648401908152865160c48501528651929360609360e160020a6316bdb7dd02938a9387938b938b938b9390929091608482019160e4019060208801908083838c5b83811015612568578181015183820152602001612550565b50505050905090810190601f1680156125955780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b838110156125c85781810151838201526020016125b0565b50505050905090810190601f1680156125f55780820380516001836020036101000a031916815260200191505b5097505050505050505060405160208183030381529060405290600160e060020a031916602082018051600160e060020a038381831617835250505050905061265087600080516020614fbc83398151915260010283613883565b979650505050505050565b83600160a060020a031663be038478838586600160a060020a031663cd253d996040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156126aa57600080fd5b505af11580156126be573d6000803e3d6000fd5b505050506040513d60208110156126d457600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291851660648201529051608480830192600092919082900301818387803b15801561273357600080fd5b505af1158015612747573d6000803e3d6000fd5b5050505083600160a060020a031663be038478308586600160a060020a0316632cfbcf1b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561279a57600080fd5b505af11580156127ae573d6000803e3d6000fd5b505050506040513d60208110156127c457600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201523060648201529051608480830192600092919082900301818387803b1580156124c857600080fd5b600080600160a060020a031682600160a060020a0316631dfab0356040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561286957600080fd5b505af115801561287d573d6000803e3d6000fd5b505050506040513d602081101561289357600080fd5b5051600160a060020a0316146129125781600160a060020a0316631dfab0356040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156128e157600080fd5b505af11580156128f5573d6000803e3d6000fd5b505050506040513d602081101561290b57600080fd5b505161297d565b81600160a060020a031663fc0c546a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561295057600080fd5b505af1158015612964573d6000803e3d6000fd5b505050506040513d602081101561297a57600080fd5b50515b92915050565b61298e828283613892565b5050565b3360009081526006602052604090208054600160a060020a0319908116825560018201805482169055600282018054821690556003820180548216905560048201805482169055600590910180549091169055565b6001546040805160e260020a63085a1d1102815230600482015290516000928392600160a060020a039091169163216874449160248082019260209290919082900301818787803b158015612a3b57600080fd5b505af1158015612a4f573d6000803e3d6000fd5b505050506040513d6020811015612a6557600080fd5b505160408051600160a060020a038316815290519193507f0b13a9ab90735191cd544fd95ba68d1385144561cbdeb8acb8035de9a86432f5919081900360200190a181600160a060020a031663de2873596040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015612ae557600080fd5b505af1158015612af9573d6000803e3d6000fd5b505050506040513d6020811015612b0f57600080fd5b50516040805160e060020a638ea8dc9d0281529051919250612b619183918591600160a060020a03831691638ea8dc9d9160048083019260209291908290030181600087803b1580156118ce57600080fd5b9091565b6007546040805180820190915260208082527f54454d504c4154455f4d494e494d455f4641435f4e4f545f50524f564944454490820152600091829190600160a060020a03161515612bfc5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107d15781810151838201526020016107b9565b5060075460405160e060020a635b7b72c10281526000600482018181526024830182905260ff8816606484015286151560a484015260c0604484019081528a5160c48501528a51600160a060020a0390951694635b7b72c19484938d938c938e938d939291608482019160e4019060208901908083838d5b83811015612c8c578181015183820152602001612c74565b50505050905090810190601f168015612cb95780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015612cec578181015183820152602001612cd4565b50505050905090810190601f168015612d195780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b158015612d3e57600080fd5b505af1158015612d52573d6000803e3d6000fd5b505050506040513d6020811015612d6857600080fd5b505160408051600160a060020a038316815290519192507fd18525bc6595a90cc21e9fbd517ada6fc07a7e87b7d2cdb6ee9284c450ebffa4919081900360200190a195945050505050565b600080612dce85600080516020614f3c833981519152613a09565b905083600160a060020a0316633cebb823826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b158015612e2b57600080fd5b505af1158015612e3f573d6000803e3d6000fd5b50506040805160e060020a63effb9523028152600160a060020a03888116600483015287811660248301526001604483015260001960648301529151918516935063effb9523925060848082019260009290919082900301818387803b158015612ea857600080fd5b505af1158015612ebc573d6000803e3d6000fd5b5092979650505050505050565b600080606080612ee787600080516020614fdc833981519152613848565b92506040805190810160405280600a815260200160b260020a691059d9dc9959d85d195902815250866040516020018083805190602001908083835b60208310612f425780518252601f199092019160209182019101612f23565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310612f8a5780518252601f199092019160209182019101612f6b565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f190183528085018552600180825260f860020a6061028284019081529551939a509097508c965091019350839291508083835b602083106130035780518252601f199092019160209182019101612fe4565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b6020831061304b5780518252601f19909201916020918201910161302c565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905082600160a060020a0316631624f6c6838360126040518463ffffffff1660e060020a0281526004018080602001806020018460ff168152602001838103835286818151815260200191508051906020019080838360005b838110156130f15781810151838201526020016130d9565b50505050905090810190601f16801561311e5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015613151578181015183820152602001613139565b50505050905090810190601f16801561317e5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156131a057600080fd5b505af11580156131b4573d6000803e3d6000fd5b50949998505050505050505050565b80516020808301516040808501516060860151608087015160a088015160c08901518551600160a060020a038c1660248201526001604060020a03808b1660448301528089166064830152808716608483015280861660a483015280851660c483015280841660e4830152821661010480830191909152875180830390910181526101249091019096529685018051600160e060020a031660e460020a630acec48f021790526000979693949293919290919061328f8c600080516020614f7c83398151915283613883565b9c9b505050505050505050505050565b600080826132ab613f1c565b600160a060020a03909116815260405190819003602001906000f0801580156132d8573d6000803e3d6000fd5b509392505050565b60008060006132ee8661223b565b9150816132f9613f2c565b600160a060020a03909116815260405190819003602001906000f080158015613326573d6000803e3d6000fd5b50905061333585838687612300565b61334185838387613a26565b95945050505050565b6040805160e360020a6317c0708f0281523060048201819052600160a060020a03858116602484015260448301859052606483019190915291519185169163be0384789160848082019260009290919082900301818387803b158015611d1457600080fd5b81600160a060020a031663be0384786000198384600160a060020a0316638f911dca6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561340057600080fd5b505af1158015613414573d6000803e3d6000fd5b505050506040513d602081101561342a57600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291851660648201529051608480830192600092919082900301818387803b15801561348957600080fd5b505af115801561349d573d6000803e3d6000fd5b5050505081600160a060020a031663be0384786000198384600160a060020a031663be2c64d46040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156134f257600080fd5b505af1158015613506573d6000803e3d6000fd5b505050506040513d602081101561351c57600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291851660648201529051608480830192600092919082900301818387803b15801561357b57600080fd5b505af115801561358f573d6000803e3d6000fd5b505050505050565b600083600160a060020a031663a479e5086040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156135d757600080fd5b505af11580156135eb573d6000803e3d6000fd5b505050506040513d602081101561360157600080fd5b50516040805160e260020a632f63f7870281529051919250600160a060020a038087169263be03847892879286929083169163bd8fde1c9160048083019260209291908290030181600087803b15801561365a57600080fd5b505af115801561366e573d6000803e3d6000fd5b505050506040513d602081101561368457600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291861660648201529051608480830192600092919082900301818387803b1580156136e357600080fd5b505af11580156136f7573d6000803e3d6000fd5b5050505083600160a060020a031663be038478848384600160a060020a03166319f3d10f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561374a57600080fd5b505af115801561375e573d6000803e3d6000fd5b505050506040513d602081101561377457600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152604483019190915291861660648201529051608480830192600092919082900301818387803b1580156124c857600080fd5b3360009081526006602052604090208054600160a060020a0319908116600160a060020a03978816178255600182018054821696881696909617909555600281018054861694871694909417909355600383018054851692861692909217909155600490910180549092169216919091179055565b604080516000808252602082019092526138659084908490613883565b9392505050565b600061387b8484846001613a75565b949350505050565b600061387b8484846000613a75565b600083600160a060020a031663de2873596040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156138d257600080fd5b505af11580156138e6573d6000803e3d6000fd5b505050506040513d60208110156138fc57600080fd5b50516040805160e060020a638ea8dc9d028152905191925061398391839187918791600160a060020a03841691638ea8dc9d916004808201926020929091908290030181600087803b15801561395157600080fd5b505af1158015613965573d6000803e3d6000fd5b505050506040513d602081101561397b57600080fd5b505186613bcc565b6139c781828584600160a060020a0316633d6ab68f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561395157600080fd5b60408051600160a060020a038616815290517f17592627a66846ce06d92a1708275bc653b2a3f34aec855584b819872a8ba4139181900360200190a150505050565b60408051600080825260208201909252613865908490849061386c565b83600160a060020a031663be038478838586600160a060020a031663206b60f96040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561243f57600080fd5b6000806000613a8386613d30565b60405160e060020a63397edd4102815260048101888152600160a060020a0380841660248401528715156064840152608060448401908152895160848501528951949650908b169363397edd41938b9388938c938c9360a40190602086019080838360005b83811015613b00578181015183820152602001613ae8565b50505050905090810190601f168015613b2d5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015613b4f57600080fd5b505af1158015613b63573d6000803e3d6000fd5b505050506040513d6020811015613b7957600080fd5b505160408051600160a060020a03831681526020810189905281519293507f2b183a501d4b1bbd30e6611ebac40ab18a00390e6c6bed324bf92a265c9ce6e3929081900390910190a19695505050505050565b6040805160e060020a630a8ed3db028152600160a060020a038581166004830152868116602483015260448201859052915191871691630a8ed3db9160648082019260009290919082900301818387803b158015613c2957600080fd5b505af1158015613c3d573d6000803e3d6000fd5b50506040805160e060020a639d0effdb028152306004820152600160a060020a0388811660248301526044820187905291519189169350639d0effdb925060648082019260009290919082900301818387803b158015613c9c57600080fd5b505af1158015613cb0573d6000803e3d6000fd5b50506040805160e060020a63afd925df028152600160a060020a0385811660048301528881166024830152604482018790529151918916935063afd925df925060648082019260009290919082900301818387803b158015613d1157600080fd5b505af1158015613d25573d6000803e3d6000fd5b505050505050505050565b600080546040805160e060020a630178b8bf0281526004810185905290518392600160a060020a031691630178b8bf91602480830192602092919082900301818787803b158015613d8057600080fd5b505af1158015613d94573d6000803e3d6000fd5b505050506040513d6020811015613daa57600080fd5b50516040805160e160020a631d9dabef028152600481018690529051600160a060020a0390921691633b3b57de916024808201926020929091908290030181600087803b158015613dfa57600080fd5b505af1158015613e0e573d6000803e3d6000fd5b505050506040513d6020811015613e2457600080fd5b50516040805160e560020a63061b57a30281529051919250600160a060020a0383169163c36af4609160048082019260009290919082900301818387803b158015613e6e57600080fd5b505af1158015613e82573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260a0811015613eab57600080fd5b60608201516080830180519192840191849190602060020a811115613ecf57600080fd5b82016020810184811115613ee257600080fd5b8151602060020a8111828201871017156131b457600080fd5b5080546000825590600052602060002090810190613f199190613f3c565b50565b6040516109fc80613f5783390190565b6040516105e98061495383390190565b611c4991905b808211156122375760008155600101613f425600608060405234801561001057600080fd5b506040516020806109fc833981016040525160008054600160a060020a0319908116331790915560028054600160a060020a039093169290911691909117905561099d8061005f6000396000f3006080604052600436106100955763ffffffff60e060020a60003504166301d08cf1811461009a57806303440db1146100cf57806313af4035146100f257806346ee3c591461011357806372e93225146101445780638322fff2146101765780638da5cb5b1461018b578063a84173ae146101a0578063beabacc8146101b5578063d6751c0f146101df578063e3d670d714610200575b600080fd5b3480156100a657600080fd5b506100bb600160a060020a0360043516610233565b604080519115158252519081900360200190f35b3480156100db57600080fd5b506100f0600160a060020a0360043516610248565b005b3480156100fe57600080fd5b506100f0600160a060020a0360043516610332565b34801561011f57600080fd5b506101286103a9565b60408051600160a060020a039092168252519081900360200190f35b34801561015057600080fd5b506101596103b8565b60408051600160e060020a03199092168252519081900360200190f35b34801561018257600080fd5b506101286103c6565b34801561019757600080fd5b506101286103cb565b3480156101ac57600080fd5b506101286103da565b3480156101c157600080fd5b506100f0600160a060020a03600435811690602435166044356103e9565b3480156101eb57600080fd5b506100f0600160a060020a0360043516610846565b34801561020c57600080fd5b50610221600160a060020a03600435166108c2565b60408051918252519081900360200190f35b60016020526000908152604090205460ff1681565b600054600160a060020a0316331461029d576040805160e560020a62461bcd02815260206004820152600d6024820152609960020a6c22a9291d2727aa2fa7aba722a902604482015290519081900360640190fd5b600160a060020a03811660009081526001602081905260409091205460ff16151514610311576040805160e560020a62461bcd0281526020600482015260186024820152604160020a7722a9291d29a427aaa6222fa122afa32aa72229afaaa9a2a902604482015290519081900360640190fd5b600160a060020a03166000908152600160205260409020805460ff19169055565b600054600160a060020a03163314610387576040805160e560020a62461bcd02815260206004820152600d6024820152609960020a6c22a9291d2727aa2fa7aba722a902604482015290519081900360640190fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b600254600160a060020a031690565b60e060020a63a9059cbb0281565b600081565b600054600160a060020a031681565b600254600160a060020a031681565b3360009081526001602081905260408220546060918291849160ff909116151514610456576040805160e560020a62461bcd0281526020600482015260126024820152607160020a7122a9291d2727aa2fa32aa72229afaaa9a2a902604482015290519081900360640190fd5b600160a060020a03871615156105d857600254604080516000808252602082019283905260e060020a635229073f028352600160a060020a038a811660248401908152604484018b905260848401839052608060648501908152845160a486018190529290961695635229073f958d958d9590949093929160c4860191808383885b838110156104f05781810151838201526020016104d8565b50505050905090810190601f16801561051d5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561053f57600080fd5b505af1158015610553573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561057c57600080fd5b815160208301805191939283019291602060020a81111561059c57600080fd5b820160208101848111156105af57600080fd5b8151602060020a8111828201871017156105c857600080fd5b50949850965061077f9350505050565b60408051600160a060020a0388811660248084019190915260448084018a905284518085038201815260649485018652602081018051600160e060020a031660e060020a63a9059cbb02178152600254965160e060020a635229073f0281528e861660048201908152600095820186905296810185905260809381019384528251608482015282519299509690941695635229073f958e958a9486949293909260a49091019190808383885b8381101561069c578181015183820152602001610684565b50505050905090810190601f1680156106c95780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156106eb57600080fd5b505af11580156106ff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561072857600080fd5b815160208301805191939283019291602060020a81111561074857600080fd5b8201602081018481111561075b57600080fd5b8151602060020a81118282018710171561077457600080fd5b509498509650505050505b5060208201518315156107d7576040805160e560020a62461bcd0281526020600482015260156024820152605a60020a741154948e9514905394d1915497d49155915495115102604482015290519081900360640190fd5b600160a060020a0387161561083d5780151561083d576040805160e560020a62461bcd02815260206004820152601c60248201527f4552523a5452414e534645525f4e4f545f52455455524e5f5452554500000000604482015290519081900360640190fd5b50505050505050565b600054600160a060020a0316331461089b576040805160e560020a62461bcd02815260206004820152600d6024820152609960020a6c22a9291d2727aa2fa7aba722a902604482015290519081900360640190fd5b600160a060020a03166000908152600160208190526040909120805460ff19169091179055565b600080600160a060020a03831615156108e957600254600160a060020a031631915061096b565b506002546040805160e060020a6370a08231028152600160a060020a039283166004820152905184928316916370a082319160248083019260209291908290030181600087803b15801561093c57600080fd5b505af1158015610950573d6000803e3d6000fd5b505050506040513d602081101561096657600080fd5b505191505b509190505600a165627a7a7230582093dc6e8f5ab2b1acdafa6cf5d78f48ad22aeb7f11330c5b8ad5be958b9e6c6d10029608060405234801561001057600080fd5b506040516020806105e9833981016040525160008054600160a060020a0319908116331790915560028054600160a060020a039093169290911691909117905561058a8061005f6000396000f30060806040526004361061007f5763ffffffff60e060020a60003504166301d08cf1811461008457806303440db1146100b957806313af4035146100dc57806346ee3c59146100fd5780638da5cb5b1461012e57806392a8843914610143578063beabacc814610158578063d6751c0f14610182578063e3d670d7146101a3575b600080fd5b34801561009057600080fd5b506100a5600160a060020a03600435166101d6565b604080519115158252519081900360200190f35b3480156100c557600080fd5b506100da600160a060020a03600435166101eb565b005b3480156100e857600080fd5b506100da600160a060020a03600435166102d5565b34801561010957600080fd5b5061011261034c565b60408051600160a060020a039092168252519081900360200190f35b34801561013a57600080fd5b5061011261035b565b34801561014f57600080fd5b5061011261036a565b34801561016457600080fd5b506100da600160a060020a0360043581169060243516604435610379565b34801561018e57600080fd5b506100da600160a060020a036004351661045b565b3480156101af57600080fd5b506101c4600160a060020a03600435166104d7565b60408051918252519081900360200190f35b60016020526000908152604090205460ff1681565b600054600160a060020a03163314610240576040805160e560020a62461bcd02815260206004820152600d6024820152609960020a6c22a9291d2727aa2fa7aba722a902604482015290519081900360640190fd5b600160a060020a03811660009081526001602081905260409091205460ff161515146102b4576040805160e560020a62461bcd0281526020600482015260186024820152604160020a7722a9291d29a427aaa6222fa122afa32aa72229afaaa9a2a902604482015290519081900360640190fd5b600160a060020a03166000908152600160205260409020805460ff19169055565b600054600160a060020a0316331461032a576040805160e560020a62461bcd02815260206004820152600d6024820152609960020a6c22a9291d2727aa2fa7aba722a902604482015290519081900360640190fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b600254600160a060020a031690565b600054600160a060020a031681565b600254600160a060020a031681565b3360009081526001602081905260409091205460ff161515146103de576040805160e560020a62461bcd0281526020600482015260126024820152607160020a7122a9291d2727aa2fa32aa72229afaaa9a2a902604482015290519081900360640190fd5b6002546040805160e360020a6317d57599028152600160a060020a0386811660048301528581166024830152604482018590529151919092169163beabacc891606480830192600092919082900301818387803b15801561043e57600080fd5b505af1158015610452573d6000803e3d6000fd5b50505050505050565b600054600160a060020a031633146104b0576040805160e560020a62461bcd02815260206004820152600d6024820152609960020a6c22a9291d2727aa2fa7aba722a902604482015290519081900360640190fd5b600160a060020a03166000908152600160208190526040909120805460ff19169091179055565b6002546040805160e060020a63e3d670d7028152600160a060020a0384811660048301529151600093929092169163e3d670d79160248082019260209290919082900301818787803b15801561052c57600080fd5b505af1158015610540573d6000803e3d6000fd5b505050506040513d602081101561055657600080fd5b5051929150505600a165627a7a723058202fbf07da61d0d1a673a3c60e7020d5a9b937132b6730ca115b8a163cc5d0044500293ccad1fc11d5b14e58c1c53a5138a51f4da8d509831bc505e60bb74d88f8bef59ac98dc5f995bf0211ed589ef022719d1487e5cb2bab505676f0d084c07cf89a705b5084c67966bb8e4640b28bab7a1e51e03d209d84e3a04d2a4f7415f93b34589851b3734f6578a92f33bfc26877a1166b95238be1f484deeaac6383d14c3841dd0b999b443a19321f2f34fe8078d1af95a1487b49af4c2ca57fb9e3e5331e956b8eeee6100c059c6e68ccf3f3ed9483796128e80f458bc52ad1e6ef246fe6a165627a7a723058200d189b6d45af6b2163af8ba00410a589514e8fcdcff8cb46a96ac8c642845bcd0029",
  "devdoc": {
    "methods": {
      "createGardenTxOne(address[2],string,string,uint64[7])": {
        "details": "Create the DAO and initialise the basic apps necessary for gardens",
        "params": {
          "_addresses": "Array of [existingToken, gnosisSafe]     existingToken An existing token used for the common pool token. Set to address(0) to create a new token.     gnosisSafe Gnosis Safe used to hold common pools funds. Set to address(0) to use an Aragon Agent instead.",
          "_disputableVotingSettings": "Array of [voteDuration, voteSupportRequired, voteMinAcceptanceQuorum, voteDelegatedVotingPeriod,   voteQuietEndingPeriod, voteQuietEndingExtension, voteExecutionDelay] to set up the voting app of the organization",
          "_gardenTokenName": "DAO governance new token name",
          "_gardenTokenSymbol": "DAO governance new token symbol"
        }
      },
      "createGardenTxThree(string,string,bytes,uint64,uint256[2],uint256[],uint256[])": {
        "details": "Add, initialise and activate the agreement",
        "params": {
          "_actionAmountsStable": "The action amount specified as a stable value (eg in xdai)",
          "_agreementContent": "Link to a human-readable text that describes the initial rules for the Agreement",
          "_agreementTitle": "String indicating a short description",
          "_challengeAmountsStable": "The challenge amount specified as a stable value (eg in xdai)",
          "_challengeDuration": "Challenge duration, during which the submitter can raise a dispute",
          "_daoId": "The ENS ID assigned to this DAO",
          "_initialFees": "Array of fees settings: [actionFee, challangeFee]"
        }
      },
      "createGardenTxTwo(address,uint64[4],address)": {
        "details": "Add and initialise issuance and conviction voting",
        "params": {
          "_convictionSettings": "Array of conviction settings: [decay, max_ratio, weight, min_threshold_stake_percentage]",
          "_convictionVotingRequestToken": "The Garden's common pool token, requested using conviction voting. If set to       address(0) the Garden will use it's main token.",
          "_erc721Adapter": "The Conviction Voting stake token. Set to address(0) to create a new one."
        }
      },
      "createTokenHolders(address[],uint256[])": {
        "details": "Add tokenholders, only accessible between the first and second createDao transactions and if no existing     token was specified. Note will fail if called incorrectly due to missing mint permission.",
        "params": {
          "_holders": "List of initial tokenholder addresses",
          "_stakes": "List of intial tokenholder amounts"
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}