type Config @entity {
  id: ID!
  conviction: ConvictionConfig
  voting: VotingConfig
}

type ConvictionConfig @entity {
  id: ID!
  decay: BigInt!
  weight: BigInt!
  maxRatio: BigInt!
  pctBase: BigInt!
  stakeToken: Token
  totalStaked: BigInt!
  maxStakedProposals: Int!
  minThresholdStakePercentage: BigInt!
  requestToken: Token
  stableToken: Token
  stableTokenOracle: Bytes
  contractPaused: Boolean
}

type VotingConfig @entity {
  id: ID!
  token:  Token
  settingId: BigInt!
  voteTime: BigInt!
  supportRequiredPct: BigInt!
  minimumAcceptanceQuorumPct: BigInt!
  delegatedVotingPeriod: BigInt!
  quietEndingPeriod: BigInt!
  quietEndingExtension: BigInt!
  executionDelay: BigInt!
  createdAt: BigInt!
}

type Proposal @entity {
  id: ID!
  number: BigInt!
  creator: Bytes!
  status: ProposalStatus!
  statusInt: Int!
  type: ProposalType!
  typeInt: Int!
  createdAt: BigInt!
  weight: BigInt!
  metadata: String
  executedAt: BigInt
  
  # Proposal data
  link: String
  stakes: [Stake!] @derivedFrom(field: "proposal")
  stakesHistory: [StakeHistory!] @derivedFrom(field: "proposal")
  beneficiary: Bytes
  convictionLast: BigInt
  requestedAmount: BigInt
  totalTokensStaked: BigInt
  stable: Boolean

  # Voting data
  setting: VotingConfig
  startDate: BigInt
  totalPower: BigInt
  snapshotBlock: BigInt!
  yeas: BigInt
  nays: BigInt
  quietEndingExtensionDuration: BigInt
  quietEndingSnapshotSupport: VoterState
  script: Bytes
  isAccepted: Boolean
  castVotes: [Cast!] @derivedFrom(field: "proposal")

  # Dispute data
  actionId: BigInt!
  disputeId: BigInt
  challengeId: BigInt!
  challenger: Bytes!
  challengeEndDate: BigInt!
  settledAt: BigInt!
  settlementOffer: BigInt
  disputedAt: BigInt!
  pausedAt: BigInt!
  pauseDuration: BigInt!
  submitterArbitratorFee: ArbitratorFee
  challengerArbitratorFee: ArbitratorFee
  collateralRequirement: CollateralRequirement @derivedFrom(field: "proposal")
}

type Cast @entity {
  id: ID!
  entity: Supporter!
  caster: Bytes!
  proposal: Proposal!
  supports: Boolean!
  stake: BigInt!
  createdAt: BigInt!
}

type Stake @entity {
  id: ID!
  type: StakeType!
  entity: Supporter!
  proposal: Proposal!
  amount: BigInt!
  createdAt: BigInt!
}

type StakeHistory @entity {
  id: ID!
  type: StakeType!
  entity: Supporter!
  proposal: Proposal!
  tokensStaked: BigInt!
  totalTokensStaked: BigInt!
  conviction: BigInt!
  time: BigInt!      # Block at which was created
  createdAt: BigInt! # Timestamp at which was created
}

type Supporter @entity {
  id: ID!
  address: Bytes!
  proposal: Proposal!
  representative: Bytes
  casts: [Cast!] @derivedFrom(field: "entity")
  stakes: [Stake!] @derivedFrom(field: "entity")
  stakesHistory: [StakeHistory!] @derivedFrom(field: "entity")
}

type Token @entity {
  id:ID!
  name: String!
  symbol: String!
  decimals: Int!
}

type CollateralRequirement @entity {
  id: ID!
  proposal: Proposal
  token: Token
  actionAmount: BigInt
  challengeAmount: BigInt
  challengeDuration: BigInt
}

enum ProposalStatus {
  Active
  Cancelled
  Executed
  Challenged
  Disputed
  Rejected
  Settled
}

enum ProposalType {
  Suggestion # Signaling proposal
  Proposal   # Proposal requesting funds
  Decision   # Vote
}

enum StakeType {
  Add
  Withdraw
}

enum VoterState {
  Absent,
  Yea,
  Nay
}

type ArbitratorFee @entity {
  id: ID!
  proposal: Proposal!
  token: Token!
  amount: BigInt!
}